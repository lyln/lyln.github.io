<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落影流年</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wiredtiger.org/"/>
  <updated>2022-11-21T07:07:14.500Z</updated>
  <id>http://www.wiredtiger.org/</id>
  
  <author>
    <name>Lyln</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建draw.io并配置gitlab作为存储</title>
    <link href="http://www.wiredtiger.org/2022/11/20/2022-11-20-docker-draw-use-gitlab/"/>
    <id>http://www.wiredtiger.org/2022/11/20/2022-11-20-docker-draw-use-gitlab/</id>
    <published>2022-11-19T16:00:00.000Z</published>
    <updated>2022-11-21T07:07:14.500Z</updated>
    
    <content type="html"><![CDATA[<h4 id="搭建draw-io"><a href="#搭建draw-io" class="headerlink" title="搭建draw.io"></a>搭建draw.io</h4><pre class="language-none"><code class="language-none">docker run -d --rm --name&#x3D;draw \-p 9080:8080 -p 9443:8443 \-v &#x2F;data&#x2F;apps&#x2F;draw-io&#x2F;index.html:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;draw&#x2F;index.html \-e DRAWIO_GITLAB_URL&#x3D;http:&#x2F;&#x2F;gitlab_url \-e DRAWIO_GITLAB_ID&#x3D;gitlab_id \fjudith&#x2F;draw.io</code></pre><p><code>DRAWIO_GITLAB_URL</code>:  gitlab地址</p><p><code>DRAWIO_GITLAB_ID</code>：gitlab管理中心申请新的应用ID</p><p>-v 挂载项可选</p><p>访问：<a href="http://host_ip:9080/">http://host_ip:9080/</a></p><p>参考地址：<br><a href="https://hub.docker.com/r/fjudith/draw.io">https://hub.docker.com/r/fjudith/draw.io</a></p><h4 id="drawio和gitlab整合"><a href="#drawio和gitlab整合" class="headerlink" title="drawio和gitlab整合"></a>drawio和gitlab整合</h4><p><strong>gitlab申请application_id</strong></p><p>管理中心-应用-New application<br>Redirect URI <a href="http://draw_url:9080/gitlab.html">http://draw_url:9080/gitlab.html</a><br>Trusted</p><p>获得<strong>应用程序ID</strong>    </p><p><strong>draw配置</strong></p><p>draw.io版本中增加了PreConfig.js，<br>可以在启动docker容器时，配置DRAWIO_GITLAB_URL 和 DRAWIO_GITLAB_ID</p><p>参数参考：<a href="https://github.com/fjudith/docker-draw.io/blob/master/docker-compose.yml">https://github.com/fjudith/docker-draw.io/blob/master/docker-compose.yml</a></p><p>删除重新创建draw容器，增加DRAWIO_GITLAB_URL和 DRAWIO_GITLAB_ID环境变量。</p><h4 id="drawio使用"><a href="#drawio使用" class="headerlink" title="drawio使用"></a>drawio使用</h4><p>新建drawio-file gitlab项目，打开draw_url:9080选择使用gitlab存储。（ps：认证过程忽略～）</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image-20221121144200293.png" alt="image-20221121144200293"></p><p>修改显示语言，设置样式，使用google自定义字体（ZCOOL KuaiLe）等</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image-20221121144835974.png" alt="image-20221121144835974"></p><p>参考地址：</p><p><a href="https://juejin.cn/post/6995873463684562974">https://juejin.cn/post/6995873463684562974</a></p><h4 id="drawio-xml转为png"><a href="#drawio-xml转为png" class="headerlink" title="drawio xml转为png"></a>drawio xml转为png</h4><p>使用jeknins将giltab存储的项目转换成png图上传到oss供查看。</p><p>实现可以参考<a href="https://github.com/b1f6c1c4/draw.io-export">https://github.com/b1f6c1c4/draw.io-export</a> </p><p>docker 挂载可以转换成功，指定转发方式可修改convert.sh脚本</p><pre class="language-none"><code class="language-none">docker run --rm \         -v &#x2F;data&#x2F;apps&#x2F;draw-io&#x2F;drawio-file:&#x2F;files \         b1f6c1c4&#x2F;draw.io-export</code></pre><p>npm 安装并没有转换成功～</p><p>npm安装错误提示解决。</p><pre class="language-none"><code class="language-none">error while loading shared libraries: libatk-bridge-2.0.so.0: cannot open shared object file: No such file or directoryerror while loading shared libraries: libxkbcommon.so.0: cannot open shared objecyum install -y libxkbcommonyum install -y at-spi2-atk </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;搭建draw-io&quot;&gt;&lt;a href=&quot;#搭建draw-io&quot; class=&quot;headerlink&quot; title=&quot;搭建draw.io&quot;&gt;&lt;/a&gt;搭建draw.io&lt;/h4&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;langu
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="draw gitlab" scheme="http://www.wiredtiger.org/tags/draw-gitlab/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq容器化部署</title>
    <link href="http://www.wiredtiger.org/2022/11/12/2022-11-12-rabbit-run-docker-k8s/"/>
    <id>http://www.wiredtiger.org/2022/11/12/2022-11-12-rabbit-run-docker-k8s/</id>
    <published>2022-11-11T16:00:00.000Z</published>
    <updated>2022-11-21T10:46:52.610Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/1552936-20201024103921637-693350551.png" alt="img"></p><h4 id="rabbit服务组成"><a href="#rabbit服务组成" class="headerlink" title="rabbit服务组成"></a>rabbit服务组成</h4><p>rabbitmq服务4大部分组成：</p><ul><li>epmd服务：rabbitmq起来后会自动的启动epmd服务，empd服务是erlang的一个小程序，专门用来做端口管理的。通常端口是4369</li><li>rabbitmq amqp server：这个服务就是我们通常使用rabbitmq服务的时候，连接5672端口的服务，使用来支持amqp服务的。通常端口是5672</li><li>rabbitmq cluster server：主要是用来做cluster节点之间的心跳发现的，通常端口是25672</li><li>如果开启来rabbitmq manager plugin，会有一个manager api服务，通常端口是15672<br>除以上的服务之外，还有一个是erlang自带的数据库，专门用来做分部署服务发现的:mnesia数据库。</li></ul><p>由于之前环境都是相对比较老的版本，所有本人中容器部署都是用3.6.14版本</p><h4 id="RabbitMQ常用命令"><a href="#RabbitMQ常用命令" class="headerlink" title="RabbitMQ常用命令"></a>RabbitMQ常用命令</h4><pre class="language-none"><code class="language-none">rabbitmqctl statusrabbitmqctl cluster_statusrabbitmqctl eval &#39;rabbit_mnesia:dir().&#39;#修改用户密码rabbitmqctl change_password &#123;userName&#125; &#123;newPassword&#125;#所有名称以ha.开始的队列，都会在集群的所有节点上成为镜像队列。rabbitmqctl set_policy ha-all &quot;^ha\.&quot; &#39;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#39;#同步队列rabbitmqctl --vhost&#x3D;&#x2F;test sync_queue testhttps:&#x2F;&#x2F;www.cnblogs.com&#x2F;caoweixiong&#x2F;p&#x2F;14371114.html</code></pre><p>rabbitmqctl设置策略参数<br><pre class="language-none"><code class="language-none">rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority]-p Vhost： 可选参数，针对指定vhost下的queue进行设置Name: policy的名称Pattern: queue的匹配模式(正则表达式)Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode ha-mode:指明镜像队列的模式，有效值为 all&#x2F;exactly&#x2F;nodes all：表示在集群中所有的节点上进行镜像 exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定 nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定 ha-params：ha-mode模式需要用到的参数 ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manualpriority：可选参数，policy的优先级</code></pre></p><h4 id="单机容器部署"><a href="#单机容器部署" class="headerlink" title="单机容器部署"></a>单机容器部署</h4><p>单机容器部署仅用于测试环境。<br>docker启动命令行参考</p><pre class="language-none"><code class="language-none">docker run -d \--name&#x3D;my-rabbitmq \-p 5672:5672 \-p 15672:15672  \-e RABBITMQ_DEFAULT_USER&#x3D;admin \-e RABBITMQ_DEFAULT_PASS&#x3D;pass  \-v &#x2F;data&#x2F;rabbitmq&#x2F;rabbitmq_test:&#x2F;var&#x2F;lib&#x2F;rabbitmq \rabbitmq:3.6.14-management</code></pre><p>ps:latest版本没有管理界面，管理界面注意选择management版本。</p><p><a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p><h4 id="集群镜像模式"><a href="#集群镜像模式" class="headerlink" title="集群镜像模式"></a>集群镜像模式</h4><p>RabbitMQ提供了一个Autocluster插件，可以自动创建RabbitMQ集群。<br>基于RabbitMQ的官方docker镜像，添加这个autocluster插件，构建我们自己的Rabbit镜像，在DomeOS部署使用这个镜像。</p><p>注意事项：</p><ul><li><p><strong>Autocluster插件适用于低于3.7.X版本</strong><br><strong>对3.7.X及以上版本使用abbitmq_peer_discovery_k8s插件</strong></p></li><li><p>部署类型使用StatefulSet</p></li><li><p>AUTOCLUSTER_CLEANUP 设置为false,默认值也为false</p></li></ul><p><strong>RABBITMQ及Autocluster插件参数说明：</strong></p><p><strong>AUTOCLUSTER_CLEANUP</strong> 这个环境变量是用来设置自动清除不健康的节点，<br>需要配合CLEANUP_WARN_ONLY=false，同时也依赖CLEANUP_INTERVAL这个参数，默认是60s，<br>每隔一分钟进行一次检测，当检测到不健康节点的时候，<br>就会把节点从集群中删除，对应的节点上的数据也相应丢失，如果对应的queue没设置成mirror queue是非常危险的。所以一般会AUTOCLUSTER_CLEANUP =false。</p><p>如果AUTOCLUSTER_CLEANUP设置成true，当不健康节点节点从集群中剔除，后面故障节点又重新起来后，<br>由于故障节点中存储的的信息中，包含该节点属于之前的集群，所以节点在起来后会尝试加入之前的集群，但是之前的集群已经吧它剔除， 所以导致故障节点一直起不来，并且报错，具体错误信息参照问题汇总3。 这个时候，需要吧对应的故障节点的数据目录下的mnesia数据目录（mnesia数据目录是erlang自带的mnesia数据库的数据存储目录）。<br>然后重启节点，让节点重新加入集群。</p><p><strong>RABBITMQ_ERLANG_COOKIE生成命令</strong><br>生成.erlang.cookie<br>echo $(openssl rand -base64 32)</p><p><strong>RABBITMQ_NODENAME设置</strong><br>需要指定rabbitmq nodename,可以通过env查看拼接。<br>不指定AUTOCLUSTER使用默认值导致创建集群失败。</p><p>yaml变量设置参考</p><pre class="language-none"><code class="language-none">RABBITMQ_DEFAULT_USERadminRABBITMQ_DEFAULT_PASSpassRABBITMQ_ERLANG_COOKIExxxRABBITMQ_NODE_TYPEdiscRABBITMQ_USE_LONGNAMEtrueAUTOCLUSTER_TYPEk8sK8S_SERVICE_NAMErabbitmq部署服务svcK8S_HOSTk8s的svckubernetes+命名空间+cluster-domain拼接K8S_PORT443AUTOCLUSTER_LOG_LEVELdebugRABBITMQ_NODENAMErabbit@$(MY_POD_IP)</code></pre><p>部署过程可参考</p><p><a href="https://blog.frognew.com/2017/09/kubernetes-rabbitmq-stateful-set.html#">https://blog.frognew.com/2017/09/kubernetes-rabbitmq-stateful-set.html#</a></p><h4 id="rabbitmq备份还原"><a href="#rabbitmq备份还原" class="headerlink" title="rabbitmq备份还原"></a>rabbitmq备份还原</h4><p>由于这边只做元数据备份和还原。参考如下链接</p><p><a href="https://www.cnblogs.com/heruiguo/p/11045288.html#_label1">https://www.cnblogs.com/heruiguo/p/11045288.html#_label1</a></p><h4 id="rabbitmq监控"><a href="#rabbitmq监控" class="headerlink" title="rabbitmq监控"></a>rabbitmq监控</h4><p>选择单独部署rabbitmq_exporter监控rabbit集群</p><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;rabbitmq_exporter.service[Unit]Description&#x3D;rabbitmq_exporterAfter&#x3D;network.target[Service]Type&#x3D;simpleUser&#x3D;rootExecStart&#x3D;&#x2F;data&#x2F;apps&#x2F;rabbitmq_exporter&#x2F;rabbitmq_exporter -config-file &#x2F;data&#x2F;apps&#x2F;rabbitmq_exporter&#x2F;config.jsonRestart&#x3D;on-failure[Install]WantedBy&#x3D;multi-user.target</code></pre><p>prometheus增加配置</p><pre class="language-none"><code class="language-none">- job_name: &#39;rabbitmq-online&#39;  static_configs:    - targets: [&quot;192.168.0.110:9419&quot;]</code></pre><p>grafana导入看板2121。</p><p>监控指标参考如下。</p><p><a href="https://blog.csdn.net/yaomingyang/article/details/103978330">https://blog.csdn.net/yaomingyang/article/details/103978330</a></p><p>过滤对应的指标，添加到grafana展示。</p><h4 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h4><ul><li><p><code>&quot;pod_name&quot;: nxdomain (non-existing domain)</code><br>RABBITMQ_NODENAME 配置不对，可以通过容器内执行env 查看容器启动后的rabbitmq名称。</p></li><li><p><code>Error: &#123;inconsistent_cluster,&quot;Node &#39;rabbit@172.29.44.2&#39; thinks it&#39;s clustered with node &#39;rabbit@172.29.120.3&#39;, but &#39;rabbit@172.29.120.3&#39; disagrees&quot;&#125;</code></p><p>查看集群状态，执行forget_cluster_node节点。<br>rabbitmqctl cluster_status<br>rabbitmqctl forget_cluster_node rabbit@${MY_POD_IP};</p><p>如果一个节点在与集群失去联系后被重置，它将表现得像一个空白节点。注意，其他集群成员可能仍然认为它是集群成员，<br>在这种情况下，双方会产生分歧，节点将无法加入。还必须使用针对现有集群成员执行的rabbitmqctl forget_cluster_node从集群中删除此类重置节点。<br><a href="https://blog.csdn.net/zhongbeida_xue/article/details/117447892">https://blog.csdn.net/zhongbeida_xue/article/details/117447892</a></p></li><li><p><code>&#123;&quot;init terminating in do_boot&quot;,&#123;error,&#123;inconsistent_cluster,&quot;Node &#39;rabbit@rabbit_slave&#39; thinks it&#39;s clustered with node &#39;rabbit@rabbit_master&#39;, but &#39;rabbit@rabbit_master&#39; disagrees&quot;&#125;&#125;&#125;init terminating in do_boot ()</code><br><code>Crash dump is being written to: erl_crash.dump...</code></p><p>删除宿主节点对应挂载点mnesia数据目录下数据。</p><p>问题2，3为<strong>AUTOCLUSTER_CLEANUP设置为ture多次出现。所以建议AUTOCLUSTER_CLEANUP设置为false，即默认即可</strong></p></li></ul><p>参考地址：</p><p><a href="https://www.cnblogs.com/cao-lei/p/13050206.html">https://www.cnblogs.com/cao-lei/p/13050206.html</a></p><p><a href="https://www.cnblogs.com/xiaozhang666/p/13866121.html">https://www.cnblogs.com/xiaozhang666/p/13866121.html</a></p><p><a href="https://www.cnblogs.com/caoweixiong/p/12736573.html">https://www.cnblogs.com/caoweixiong/p/12736573.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://inshub.oss-cn-beijing.aliyuncs.com/blog/1552936-20201024103921637-693350551.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;rabbit服务组成&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="rabbit k8s docker" scheme="http://www.wiredtiger.org/tags/rabbit-k8s-docker/"/>
    
  </entry>
  
  <entry>
    <title>Windows Server2008 elk监控服务器日志和防火墙日志</title>
    <link href="http://www.wiredtiger.org/2022/10/01/2022-10-01-win-server-install-elk/"/>
    <id>http://www.wiredtiger.org/2022/10/01/2022-10-01-win-server-install-elk/</id>
    <published>2022-09-30T16:00:00.000Z</published>
    <updated>2022-10-23T12:25:59.770Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/win_server_elk.png" alt="win_server_elk"></p><p>Win2008搭建elk收集防火墙日志和服务器日志，用于安全审核。本文记录下搭建过程中的注意事项和遇到的一些问题。</p><p><strong>组件如下：</strong></p><ul><li>Syslog: 记录设备的系统日志信息</li><li>Logstash: 数据过滤组件，用于收集和日志过滤等</li><li>Winlogbeat: 收集windows系统日志</li><li>Metricbeat: 收集Elasticsearch指标,kibana监控es展示需要此插件</li><li>Elasticsearch: 全文索引引擎+存储</li><li>Kibana: 可视化平台，可展示、检索、管理Elasticsearch中的数据。</li><li>Nginx: 反向代理，增加安全认证。</li><li>NSSM:NSSM是一个服务封装程序，将exe封装为服务。</li></ul><p><strong>注意事项：</strong></p><ul><li><p>安装版本 6.8.22</p><p>版本说明：本计划安装7.17.6版本的elk，但是kibana依赖nodejs版本。win2008 server不支持node版本，被迫放弃。 kibana7系列支持用户认证，所以7以下的版本只能通过nginx加简单的安全认证。</p></li><li><p>win下部署所有服务都是用NSSM将exe封装为服务。通过win服务管理启动关闭等。</p></li><li><p>win有防火墙规则，需要给 syslog服务开放端口。</p></li></ul><p><strong>Elasticsearch安装</strong></p><pre class="language-none"><code class="language-none">解压，修改配置文件cluster.name: es-clusternode.name: elk-1node.master: truenode.data: truenetwork.host: 0.0.0.0http.port: 9200path.data: D:&#x2F;data&#x2F;elk&#x2F;elastic&#x2F;datapath.logs: D:&#x2F;data&#x2F;elk&#x2F;elastic&#x2F;logshttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;elasticsearch可不用nssmelasticsearch-service.bat installelasticsearch-service.bat后面还可以执行这些命令install: 安装Elasticsearch服务remove: 删除已安装的Elasticsearch服务（如果启动则停止服务）start: 启动Elasticsearch服务（如果已安装）stop: 停止服务（如果启动）manager:启动GUI来管理已安装的服务curl http:&#x2F;&#x2F;localhost:9200</code></pre><p><strong>Kibana安装</strong></p><pre class="language-none"><code class="language-none">解压，修改配置文件server.port: 5601server.host: &quot;0.0.0.0&quot;server.name: &quot;kibana-cluster&quot;elasticsearch.hosts: [&quot;http:&#x2F;&#x2F;localhost:9200&quot;]elasticsearch.requestTimeout: 99999#支持中文i18n.locale: &quot;zh-CN&quot;</code></pre><p><strong>NSSM使用</strong></p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;nssm.cc&#x2F;download安装服务：nssm install 服务名删除服务：nssm remove 服务名删除服务确定：nssm remove 服务名 confirm 修改服务（显示界面修改）：nssm edit 服务名启动服务：nssm start 服务名停止服务：nssm stop 服务名重启服务：nssm restart 服务名nssm.exe 放到程序目录nssm install kibana 将kibana通过service.msi服务管理。如果指定配置文件位置，nssm指定启动参数，不然会启动失败Arguments：参数-f D:\elk\logstash\config\syslog-security.conf</code></pre><p><strong>Winlogbeat</strong> 安装</p><pre class="language-none"><code class="language-none">winlogbeat.exe setup.\winlogbeat.exe test config -c .\winlogbeat.ymlwinlogbeat.yml修改es和kibana地址nssm安装为服务即可要查看全部类型，在PowerShell中运行Get-EventLog *，更多信息请参考event_logs.name.</code></pre><p><strong>Metricbeat</strong> 安装</p><pre class="language-none"><code class="language-none">默认加载配置加载modules.d&#x2F;system.ymlmetricbeat.ymlsetup.kibana:  host: &quot;localhost:5601&quot;output.elasticsearch:  hosts: [&quot;localhost:9200&quot;] nssm安装为服务即可</code></pre><p><strong>Logstash安装</strong></p><pre class="language-none"><code class="language-none">收集防火墙日志syslog日志到eslogstash.ymlinput &#123;       syslog&#123;   type &#x3D;&gt; &quot;syslog-security&quot;    port &#x3D;&gt; 514   &#125;&#125;output &#123;       elasticsearch &#123;        hosts &#x3D;&gt; [&quot;localhost:9200&quot;]              index &#x3D;&gt; &quot;syslog-security-%&#123;+YYYY.MM&#125;&quot;       &#125;        #stdout &#123;codec &#x3D;&gt; rubydebug&#125;&#125;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://inshub.oss-cn-beijing.aliyuncs.com/blog/win_server_elk.png&quot; alt=&quot;win_server_elk&quot;&gt;&lt;/p&gt;
&lt;p&gt;Win2008搭建elk收集防火墙日志和服务器日志，用于安全
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="win-server elk syslog elastic logstash kibana" scheme="http://www.wiredtiger.org/tags/win-server-elk-syslog-elastic-logstash-kibana/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下编译安装ffmpeg扩展gl-transitions</title>
    <link href="http://www.wiredtiger.org/2022/09/06/2022-09-06-ffmpeg-gl-transitions/"/>
    <id>http://www.wiredtiger.org/2022/09/06/2022-09-06-ffmpeg-gl-transitions/</id>
    <published>2022-09-05T16:00:00.000Z</published>
    <updated>2022-09-08T09:20:29.099Z</updated>
    
    <content type="html"><![CDATA[<p>ffmpeg在4.3版本后加入xfade的转场，GRE大神使用WebGL编写的一些转场，效果十分酷炫，以及Travis Fischer大神gl-transitions,<br>本文记录帮开发编译扩展gl-transitions</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/ffmpeg.png" alt="ffmpeg"></p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>源码下载目录<br><code>/data/apps/ffmpeg_sources</code></p><p>系统版本<br><pre class="language-none"><code class="language-none">Red Hat7.9 or Centos7</code></pre></p><pre class="language-none"><code class="language-none">替换yum源mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.bakcurl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repoyum makecache安装编译工具及依赖yum -y install autoconf automake bzip2 bzip2-devel cmake freetype-devel gcc gcc-c++ git libtool make pkgconfig zlib-devel libxml2-devel mesa* freeglut*</code></pre><h4 id="cmake安装"><a href="#cmake安装" class="headerlink" title="cmake安装"></a>cmake安装</h4><p>当前安装cmake版本基本是2.8左右的，后续依赖的glfw需要升级cmake。</p><pre class="language-none"><code class="language-none">cmake --version#移除旧的cmake版本yum remove cmake -ywget https:&#x2F;&#x2F;cmake.org&#x2F;files&#x2F;v3.14&#x2F;cmake-3.14.5.tar.gztar zxvf cmake-3.14.5.tar.gzcd cmake-3.14.5.&#x2F;configuremake &amp;&amp; make install</code></pre><h4 id="安装glfw3"><a href="#安装glfw3" class="headerlink" title="安装glfw3"></a>安装glfw3</h4><pre class="language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;ffmpeg_sourceswget https:&#x2F;&#x2F;github.com&#x2F;glfw&#x2F;glfw&#x2F;archive&#x2F;refs&#x2F;tags&#x2F;3.3.4.tar.gztar -xzvf glfw-3.3.4.tar.gzcd glfw-3.3.4yum -y install libXrandr*yum -y install libXcursor*yum -y install libXi*cmake .make &amp;&amp; make install</code></pre><h4 id="安装OpenGL相关库-glew"><a href="#安装OpenGL相关库-glew" class="headerlink" title="安装OpenGL相关库(glew)"></a>安装OpenGL相关库(glew)</h4><pre class="language-none"><code class="language-none">yum -y install glew glew-devel</code></pre><h4 id="编译安装ffmpeg"><a href="#编译安装ffmpeg" class="headerlink" title="编译安装ffmpeg"></a>编译安装ffmpeg</h4><p>全版本地址:<a href="https://ffmpeg.org/releases/">https://ffmpeg.org/releases/</a><br>选择4.4版本(<a href="https://ffmpeg.org/releases/ffmpeg-4.4.tar.gz">https://ffmpeg.org/releases/ffmpeg-4.4.tar.gz</a>)</p><h5 id="安装编译依赖"><a href="#安装编译依赖" class="headerlink" title="安装编译依赖"></a>安装编译依赖</h5><p><strong>安装nasm</strong></p><pre class="language-none"><code class="language-none">cd &#x2F;data&#x2F;apps&#x2F;ffmpeg_sourcescurl -O -L https:&#x2F;&#x2F;www.nasm.us&#x2F;pub&#x2F;nasm&#x2F;releasebuilds&#x2F;2.15.05&#x2F;nasm-2.15.05.tar.bz2tar xjvf nasm-2.15.05.tar.bz2cd nasm-2.15.05.&#x2F;autogen.sh.&#x2F;configuremakemake install</code></pre><p><strong>安装yasm</strong></p><pre class="language-none"><code class="language-none">cd &#x2F;data&#x2F;apps&#x2F;ffmpeg_sourcescurl -O -L https:&#x2F;&#x2F;www.tortall.net&#x2F;projects&#x2F;yasm&#x2F;releases&#x2F;yasm-1.3.0.tar.gztar xzvf yasm-1.3.0.tar.gzcd yasm-1.3.0.&#x2F;configuremakemake install</code></pre><p><strong>安装libx264</strong></p><pre class="language-none"><code class="language-none">cd &#x2F;data&#x2F;apps&#x2F;ffmpeg_sourcesgit clone --branch stable --depth 1 https:&#x2F;&#x2F;code.videolan.org&#x2F;videolan&#x2F;x264.gitcd x264.&#x2F;configure --enable-staticmakemake install</code></pre><p><strong>下载ffmpeg</strong></p><pre class="language-none"><code class="language-none">cd &#x2F;data&#x2F;apps&#x2F;ffmpeg_sourceswget https:&#x2F;&#x2F;ffmpeg.org&#x2F;releases&#x2F;ffmpeg-4.4.tar.gztar -xzvf ffmpeg-4.4.tar.gz</code></pre><p><strong>下载ffmpeg-gl-transition</strong></p><pre class="language-none"><code class="language-none">cd &#x2F;data&#x2F;apps&#x2F;ffmpeg_sourcesgit clone https:&#x2F;&#x2F;github.com&#x2F;transitive-bullshit&#x2F;ffmpeg-gl-transition.git# 注意clone后进入ffmpeg4.4目录下cd ffmpeg-4.4# 拷贝vf_gltransition.c到libavfiltercp &#x2F;data&#x2F;apps&#x2F;ffmpeg_sources&#x2F;ffmpeg-gl-transition&#x2F;vf_gltransition.c libavfilter&#x2F;</code></pre><p>上面的复制就是在ffmpeg/libavfilter里加入要编译vf_gltransition.c这个文件<br>然后进入libavfilter文件夹<br><pre class="language-none"><code class="language-none"># 在libavfilter&#x2F;Makefile里加入OBJS-$(CONFIG_GLTRANSITION_FILTER)           +&#x3D; vf_gltransition.o# 在libavfilter&#x2F;allfilters.c加入extern AVFilter ff_vf_gltransition;</code></pre><br>还需要修改vf_gltransition.c,去掉宏定义。直接将<code># define GL_TRANSITION_USING_EGL</code>删除就可。<br>ps：<code>#</code>这里不是注释，直接删除哈～</p><p>编译ffmpeg<br><pre class="language-none"><code class="language-none">cd &#x2F;data&#x2F;apps&#x2F;ffmpeg_sources&#x2F;ffmpeg-4.4# 指定pkgconfig 避免找不到export PKG_CONFIG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;pkgconfig:$PKG_CONFIG_PATH# 执行configure.&#x2F;configure --enable-nonfree --enable-cross-compile --enable-gpl --enable-libx264 --enable-opengl --enable-filter&#x3D;gltransition --extra-libs&#x3D;&#39;-lGLEW -lglfw3 -ldl -lX11&#39;# 执行makemake# 建立软连接ln -sf &#x2F;data&#x2F;apps&#x2F;ffmpeg_sources&#x2F;ffmpeg &#x2F;usr&#x2F;bin&#x2F;ffmpeg &amp;&amp; ln -sf &#x2F;data&#x2F;apps&#x2F;ffmpeg_sources&#x2F;ffprobe &#x2F;usr&#x2F;bin&#x2F;ffprobe</code></pre></p><h4 id="校验是否安装成功"><a href="#校验是否安装成功" class="headerlink" title="校验是否安装成功"></a>校验是否安装成功</h4><p><code>ffmpeg -v 0 -filters |grep transitions</code></p><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><p><strong>安装并启动Xvfb</strong></p><pre class="language-none"><code class="language-none">yum -y install Xvfb nohup Xvfb :1 -screen 0 1280x1024x16 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;# 设置环境变量export DISPLAY&#x3D;:1</code></pre><pre class="language-none"><code class="language-none">cd &#x2F;data&#x2F;apps&#x2F;ffmpeg_sources&#x2F;gl-transitions&#x2F;transitions# 转场文件在https:&#x2F;&#x2F;github.com&#x2F;gl-transitions&#x2F;gl-transitions，crosswarp.glsl为转场文件ffmpeg -i input.mp4 -filter_complex &quot;gltransition&#x3D;duration&#x3D;4:offset&#x3D;1.5:source&#x3D;crosswarp.glsl&quot; -y out.mp4</code></pre><h4 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h4><p><a href="https://blog.csdn.net/weixin_40948587/article/details/121073081">https://blog.csdn.net/weixin_40948587/article/details/121073081</a><br><a href="https://github.com/transitive-bullshit/ffmpeg-gl-transition">https://github.com/transitive-bullshit/ffmpeg-gl-transition</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ffmpeg在4.3版本后加入xfade的转场，GRE大神使用WebGL编写的一些转场，效果十分酷炫，以及Travis Fischer大神gl-transitions,&lt;br&gt;本文记录帮开发编译扩展gl-transitions&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="ffmpeg gl-transitions" scheme="http://www.wiredtiger.org/tags/ffmpeg-gl-transitions/"/>
    
  </entry>
  
  <entry>
    <title>zabbix跨版本升级避坑指南(3.2-5.0)</title>
    <link href="http://www.wiredtiger.org/2022/09/01/2022-09-01-zabbix-update-3.2-5.0/"/>
    <id>http://www.wiredtiger.org/2022/09/01/2022-09-01-zabbix-update-3.2-5.0/</id>
    <published>2022-08-31T16:00:00.000Z</published>
    <updated>2022-09-09T08:19:27.973Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近zabbix服务需要迁移，在运行的zabbix版本为Zabbix 3.2.4,所以趁这次迁移也把Zabbix版本。本计划直接升级为zabbix6.0(zabbix6.0支持原生高可用集群），但是由于这边db版本问题（zabbix6.0需要mysql8）。暂且升级为zabbix5版本。</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/zabbix-update-3to5.png" alt="zabbix-update-3to5"></p><h4 id="升级流程"><a href="#升级流程" class="headerlink" title="升级流程"></a>升级流程</h4><p>升级流程大致如下：<br>1.搭建ha环境<br>2.搭建新的zabbix5 server环境<br>3.备份旧zabbix数据导入新zabbix server<br>4.两边关闭报警（禁用Media types），批量替换zabbix agent配置。</p><h4 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h4><table><thead><tr><th>ip</th><th>keepalive</th><th>nginx</th><th>linux</th></tr></thead><tbody><tr><td>192.168.0.101</td><td>Keepalived v1.3.5</td><td>nginx/1.12.1</td><td>Centos7</td></tr><tr><td>192.168.0.102</td><td>Keepalived v1.3.5</td><td>nginx/1.12.1</td><td>Centos7</td></tr><tr><td>vip</td><td>192.168.0.168</td><td></td></tr></tbody></table><h4 id="zabbix监听端口"><a href="#zabbix监听端口" class="headerlink" title="zabbix监听端口"></a>zabbix监听端口</h4><table><thead><tr><th style="text-align:left">Zabbix component</th><th style="text-align:left">Port number</th><th style="text-align:left">Protocol</th><th style="text-align:left">Type of connection</th></tr></thead><tbody><tr><td style="text-align:left">Zabbix agent</td><td style="text-align:left">10050</td><td style="text-align:left">TCP</td><td style="text-align:left">on demand</td></tr><tr><td style="text-align:left">Zabbix agent 2</td><td style="text-align:left">10050</td><td style="text-align:left">TCP</td><td style="text-align:left">on demand</td></tr><tr><td style="text-align:left">Zabbix server</td><td style="text-align:left">10051</td><td style="text-align:left">TCP</td><td style="text-align:left">on demand</td></tr><tr><td style="text-align:left">Zabbix proxy</td><td style="text-align:left">10051</td><td style="text-align:left">TCP</td><td style="text-align:left">on demand</td></tr><tr><td style="text-align:left">Zabbix Java gateway</td><td style="text-align:left">10052</td><td style="text-align:left">TCP</td><td style="text-align:left">on demand</td></tr></tbody></table><h4 id="搭建ha环境"><a href="#搭建ha环境" class="headerlink" title="搭建ha环境"></a>搭建ha环境</h4><p>安装keeplaived+nginx主备环境<br><pre class="language-none"><code class="language-none">yum install keepaliveyum install nginx</code></pre><br>由于nginx及zabbix server本身就部署在192.168.0.101/102这两台，所有无需配置virtual_serve(LVS负载均衡)。<br>keepalive配置参考<br><pre class="language-none"><code class="language-none">! Configuration File for keepalivedglobal_defs &#123;   router_id KEEPALIVED_ZABBIX_101&#125;vrrp_script chk_http_nginx &#123;       script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_nginx_status.sh&quot;    #一句指令或者一个脚本文件，需返回0(成功)或非0(失败)，keepalived以此为依据判断其监控的服务状态。    interval 1   #健康检查周期    #weight -10   #优先级变化幅度，如果script中的指令执行失败，那么相应的vrrp_instance的优先级会减少10个点。&#125;vrrp_instance Z1 &#123;    state MASTER    nopreempt  # nopreempt 允许一个priority比较低的节点作为master，即使有priority更高的节点启动    interface eth0 # interface 节点固有IP（非VIP）的网卡，用来发VRRP包    virtual_router_id 144 # virtual_router_id 取值在0-255之间，用来区分多个instance的VRRP组播， 同一网段中virtual_router_id的值不能重复，否则会出错    priority 200    advert_int 1 # advert_int 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）    authentication &#123; # authentication 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）        auth_type PASS        auth_pass 110    &#125;    virtual_ipaddress &#123; # 设置vip        192.168.0.168&#x2F;24    &#125;  track_script &#123;        chk_http_nginx    &#125;&#125;</code></pre><br>两台配置唯一不同的就是<strong>router_id、state以及priority</strong><br><strong>virtual_router_id</strong> 注意保持一致！</p><p><code>router_id</code> KEEPALIVED_ZABBIX_101<br>router_id 标识本节点的字符串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。</p><p><code>state MASTER</code><br>state MASTER或BACKUP，当其他节点keepalived启动时会将priority比较大的节点选举为MASTER，因此该项其实没有实质用途。</p><p><code>priority 100</code><br>priority用来选举master的，根据服务是否可用，以weight的幅度来调整节点的priority，<br>从而选取priority高的为master，该项取值范围是1-255（在此范围之外会被识别成默认值100）</p><p>check_nginx_status.sh参考<br><pre class="language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash&#x2F;usr&#x2F;bin&#x2F;curl http:&#x2F;&#x2F;localhost &amp;&gt;&#x2F;dev&#x2F;nullif [ $? -ne 0 ]thensystemctl stop keepalivedsystemctl stop zabbix-server#ssh 192.168.0.102 &quot;systemctl start zabbix-server&quot;fi</code></pre></p><p>模拟停掉keepalive或者nginx，查看keepalived测试vip漂移<br><code>journalctl -f -u keepalived</code></p><h4 id="搭建新的zabbix5-server环境"><a href="#搭建新的zabbix5-server环境" class="headerlink" title="搭建新的zabbix5 server环境"></a>搭建新的zabbix5 server环境</h4><p>先搭建lnmp环境<br><a href="https://www.zabbix.com/documentation/5.0/en/manual/installation/requirements">https://www.zabbix.com/documentation/5.0/en/manual/installation/requirements</a><br>注意查看版本要求，尤其php，mysql版本<br>不然你可能会卸载重装～</p><pre class="language-none"><code class="language-none">#修改epel源wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repoyum install -y epel-release#php yum源rpm -ivh http:&#x2F;&#x2F;rpms.famillecollet.com&#x2F;enterprise&#x2F;remi-release-7.rpm#php74安装yum install -y php74-php-gd php74-php-bcmath php74-php-mbstring php74-php-mysqlnd php74-php-ldap php74-php-xml yum install -y php74-php-fpm</code></pre><p>nginx配置参考<br><pre class="language-none"><code class="language-none">listen       80;server_name  localhost;#charset koi8-r;#access_log  logs&#x2F;host.access.log  main;location &#x2F; &#123;root   &#x2F;data&#x2F;zabbix;index  index.php;allow 192.168.0.0&#x2F;16;deny all;&#125;error_page   500 502 503 504  &#x2F;50x.html;location &#x3D; &#x2F;50x.html &#123;root   html;&#125;# proxy the PHP scripts to Apache listening on 127.0.0.1:80#location ~ \.php$ &#123;root &#x2F;data&#x2F;zabbix;fastcgi_pass   127.0.0.1:9000;fastcgi_index  index.php;fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;include        fastcgi_params;&#125;</code></pre><br>php info查看配置详情,查看php.ini位置，修改参数<br><pre class="language-none"><code class="language-none">nginx添加info.php&#x2F;data&#x2F;zabbix&#x2F;info.php&lt;?phpecho phpinfo();?&gt;</code></pre></p><p>Configuration File (php.ini) Path<br><pre class="language-none"><code class="language-none">php_value max_execution_time 300php_value memory_limit 128Mphp_value post_max_size 16Mphp_value upload_max_filesize 2Mphp_value max_input_time 300php_value max_input_vars 10000php_value always_populate_raw_post_data -1php_value date.timezone Asia&#x2F;Shanghai修改完重启php-fpm。</code></pre><br>lnmp环境搭建完毕。</p><p><strong>zabbix server编译安装</strong><br><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;cdn.zabbix.com&#x2F;zabbix&#x2F;sources&#x2F;stable&#x2F;5.0&#x2F;zabbix-5.0.26.tar.gztar -zxvf zabbix-5.0.26.tar.gzgroupadd --system zabbixuseradd --system -g zabbix -d &#x2F;usr&#x2F;lib&#x2F;zabbix -s &#x2F;sbin&#x2F;nologin -c &quot;Zabbix Monitoring System&quot; zabbixyum install zlib-develyum install libevent-devel  -yyum install curl-devel.&#x2F;configure --prefix&#x3D;&#x2F;data&#x2F;apps&#x2F;zabbix-server --enable-server --enable-agent --with-mysql --with-net-snmp --with-libcurlmake &amp;&amp; make install -j2</code></pre></p><p>zabbix_server.conf配置参考<br><pre class="language-none"><code class="language-none">ListenPort&#x3D;10051SourceIP&#x3D;192.168.0.168LogFile&#x3D;&#x2F;data&#x2F;logs&#x2F;zabbix&#x2F;zabbix_server.logLogFileSize&#x3D;1024PidFile&#x3D;&#x2F;data&#x2F;apps&#x2F;zabbix-server&#x2F;zabbix_server.pidDBHost&#x3D;dbhostDBName&#x3D;zabbixDBUser&#x3D;zabbixDBPassword&#x3D;zabbixpassStartPollers&#x3D;100 #看配置自行调整参数StartPollersUnreachable&#x3D;50StartTrappers&#x3D;50StartPingers&#x3D;5StartDiscoverers&#x3D;30StartHTTPPollers&#x3D;20CacheSize&#x3D;8GHistoryCacheSize&#x3D;1GHistoryIndexCacheSize&#x3D;1GTrendCacheSize&#x3D;1GValueCacheSize&#x3D;4GTimeout&#x3D;30FpingLocation&#x3D;&#x2F;usr&#x2F;sbin&#x2F;fpingLogSlowQueries&#x3D;3000AllowRoot&#x3D;1User&#x3D;rootStatsAllowedIP&#x3D;127.0.0.1</code></pre></p><h4 id="备份旧zabbix数据导入新zabbix-server"><a href="#备份旧zabbix数据导入新zabbix-server" class="headerlink" title="备份旧zabbix数据导入新zabbix server"></a>备份旧zabbix数据导入新zabbix server</h4><p>备份原来的zabbix数据，（history/history_uint/trends/trends_uint）这4张表数据比较大，备份可跳过。新的mysql库清空。给予新zabbix用户<strong>足够的权限</strong>,systemctl启动zabbix_server,<br>查看zabbix_server.log。zabbix会自动升级表结构，看日志报错解决即可。</p><p>notes:<br>数据库可能会修改的参数</p><pre class="language-none"><code class="language-none">set GLOBAL SQL_SAFE_UPDATES&#x3D;0set GLOBAL innodb_large_prefix&#x3D;1</code></pre><p>ui配置<br>zabbix-5.0.26/ui目录同步到/data/zabbix目录下，conf/zabbix.conf.php web相关的配置</p><p>访问<a href="http://vip_ip">http://vip_ip</a> 即可。</p><h4 id="批量替换zabbix-agent配置"><a href="#批量替换zabbix-agent配置" class="headerlink" title="批量替换zabbix agent配置"></a>批量替换zabbix agent配置</h4><p>新zabbix server启动后，记得禁用报警的方式，不然会收到一坨报警。如果误操作，看下面的【问题处理】</p><p>获取所有zabbix主机<br>zabbix_get_all_hosts.py脚本参考<br><pre class="language-none"><code class="language-none"># -*-coding: utf-8 -*-import requestsimport jsonheaders &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;json-rpc&#39;&#125;server_ip &#x3D; &#39;zabbix server_ip&#39;url &#x3D; &#39;http:&#x2F;&#x2F;%s&#x2F;api_jsonrpc.php&#39; % server_ipusername &#x3D; &#39;username&#39;passwd &#x3D; &#39;password&#39;# 获取tokendef getToken():    # url &#x3D; &#39;http:&#x2F;&#x2F;%s&#x2F;zabbix&#x2F;api_jsonrpc.php&#39;%server_ip    # headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;json-rpc&#39;    data &#x3D; &#123;        &quot;jsonrpc&quot;: &quot;2.0&quot;,        &quot;method&quot;: &quot;user.login&quot;,        &quot;params&quot;: &#123;            &quot;user&quot;: username,            &quot;password&quot;: passwd        &#125;,        &quot;id&quot;: 0    &#125;    request &#x3D; requests.post(url&#x3D;url, headers&#x3D;headers, data&#x3D;json.dumps(data))    dict &#x3D; json.loads(request.text)    return dict[&#39;result&#39;]# 从api获取主机信息，def getHosts(token_num):    data &#x3D; &#123;        &quot;jsonrpc&quot;: &quot;2.0&quot;,        &quot;method&quot;: &quot;host.get&quot;,        &quot;params&quot;: &#123;            &quot;output&quot;: [                &quot;hostid&quot;,                &quot;host&quot;            ],            &quot;selectInterfaces&quot;: [                &quot;interfaceid&quot;,                &quot;ip&quot;            ]        &#125;,        &quot;id&quot;: 2,        &quot;auth&quot;: token_num,    &#125;    request &#x3D; requests.post(url&#x3D;url, headers&#x3D;headers, data&#x3D;json.dumps(data))    dict &#x3D; json.loads(request.content)    # print dict[&#39;result&#39;]    return dict[&#39;result&#39;]# 整理信息,输出想要的信息，组合成字典，我这边提出ip。def getProc(data):    dict &#x3D; &#123;&#125;    list &#x3D; data    for i in list:        host &#x3D; i[&#39;host&#39;]        inter &#x3D; i[&#39;interfaces&#39;]        for j in inter:            ip &#x3D; j[&#39;ip&#39;]            dict[host] &#x3D; ip    return dict# 排序ip列表def getData(dict):    data &#x3D; dict    ip_list &#x3D; []    for key in data.keys():        ip &#x3D; data[key]        ip_list.append(ip)    ip_list &#x3D; list(set(ip_list))    ip_list.sort()    return ip_list# 整理输出ipdef getGroup(ip_list):    ip_group &#x3D; &#123;&#125;    ips &#x3D; ip_list    for i in ips:        print(i)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    token_num &#x3D; getToken()    data &#x3D; getHosts(token_num)    hosts &#x3D; getProc(data)    ip_list &#x3D; getData(hosts)    getGroup(ip_list)</code></pre><br>modiy_zabbix_server.sh脚本参考<br><pre class="language-none"><code class="language-none">if [ $# -ne 1 ];then        echo &quot;Usage: .&#x2F;&#96;basename $0&#96; host_ip_list&quot;        exit 1;fifor i in &#96;grep -v ^# $1&#96;;do        timestamps&#x3D;&#96;date +%F&#96;echo $issh $i &quot;cp &#x2F;etc&#x2F;zabbix_agentd.conf &#x2F;etc&#x2F;zabbix_agentd.conf-$&#123;timestamps&#125;&quot;        ssh $i &quot;sed -i &#39;s&#x2F;old_server&#x2F;new_server&#x2F;g&#39; &#x2F;etc&#x2F;zabbix_agentd.conf&quot;        ssh $i &quot;service zabbix_agentd restart&quot;ssh $i &quot;grep -i server &#x2F;etc&#x2F;zabbix_agentd.conf |grep -v &#39;#&#39;&quot;done</code></pre><br>运行批量修改脚本前，可以先ansible ping过滤下机器是否可登录。</p><p>批量修复后可以观察zabbix server状态，如果有些angent有问题可以逐个修复。</p><h4 id="grafana配置zabbix数据源"><a href="#grafana配置zabbix数据源" class="headerlink" title="grafana配置zabbix数据源"></a>grafana配置zabbix数据源</h4><p>grafana扩展zabbix数据源插件<br><pre class="language-none"><code class="language-none">grafana-cli plugins install alexanderzobnin-zabbix-appsystemctl restart grafana-server</code></pre><br>界面配置参数<br><pre class="language-none"><code class="language-none">Url: http:&#x2F;&#x2F;zabbix.local&#x2F;zabbix&#x2F;api_jsonrpc.php #zabbix服务器api地址,注意是否有zabbixAccess: BrowserUsername: zabbix用户名Password：zabbix密码</code></pre><br>导入grafana看板，16896。（觉得不错可以给个star）<br>zabbix作为数据源的弊端就是需要Item的名称统一，如果看板没有数据，可以先从zabbix看是不是item有区别于模版，自行修复。<br>用zabbix数据源，grafana的通用型和可扩展性的相比于NodeExporter还是差一些。</p><p>最终效果</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/Grafana-Zabbix.png" alt="Grafana-Zabbix"></p><h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p><strong>Zabbix告警队列清理</strong></p><pre class="language-none"><code class="language-none">场景：由于网络故障导致，导致zabbix几百上千台机子告警，邮件失败多次尝试发送，导致堆积了很多告警队列，其他邮件产生了时延处理：方法1、通过修改mysql的zabbix库alerts表,把状态改为已发送或发送失败 （建议使用）方法2、直接清理alerts表，但这种操作会导致action日志也被清理说明：alerts表为告警日志表，记录zabbix action发送过的信息，status字段含义：0表示待发送，1表示发送正常，2表示发送失败建议：在对数据库进行修改或删除操作时，对数据进行备份，命令：mysqldump -u -p 库名 表名 &gt;表名.sql方法一：1、查看alerts目前存在多少待发送的action;mysql&gt; select count(*) from alerts where status &#x3D;0;2、对待发送的action进行状态更新mysql&gt; update zabbix.alerts set status &#x3D; 1 where status &#x3D; 0;3、重启zabbix-server服务#systemctl restart zabbix_server方法二：（该方法请先备份alerts表）1、查看alerts表创建的语句,记录，后面清理后需重新创建mysql&gt; show create table alerts；2、删除alerts表mysql&gt;drop table alterts；3、重启zabbix-server服务，查看状态是否正常#systemctl restart zabbix_server</code></pre><h4 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h4><p><a href="https://www.jianshu.com/p/53382fdeab28">https://www.jianshu.com/p/53382fdeab28</a><br><a href="https://www.cnblogs.com/phpdragon/p/14710830.html">https://www.cnblogs.com/phpdragon/p/14710830.html</a><br><a href="https://www.zabbix.com/documentation/5.0/en/manual/installation/requirements">https://www.zabbix.com/documentation/5.0/en/manual/installation/requirements</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于最近zabbix服务需要迁移，在运行的zabbix版本为Zabbix 3.2.4,所以趁这次迁移也把Zabbix版本。本计划直接升级为zabbix6.0(zabbix6.0支持原生高可用集群），但是由于这边db版本问题（zabbix6.0需要mysql8）。暂且升级为z
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="zabbix" scheme="http://www.wiredtiger.org/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Fastapi+Vue前后端分离</title>
    <link href="http://www.wiredtiger.org/2022/05/21/2021-08-10-fastapi-vue/"/>
    <id>http://www.wiredtiger.org/2022/05/21/2021-08-10-fastapi-vue/</id>
    <published>2022-05-20T16:00:00.000Z</published>
    <updated>2022-09-13T01:48:27.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fastapi-Vue前后端分离-Vue环境搭建"><a href="#Fastapi-Vue前后端分离-Vue环境搭建" class="headerlink" title="Fastapi+Vue前后端分离-Vue环境搭建"></a>Fastapi+Vue前后端分离-Vue环境搭建</h3><h4 id="nodejs环境安装"><a href="#nodejs环境安装" class="headerlink" title="nodejs环境安装"></a>nodejs环境安装</h4><p>nvm多版本管理工具</p><p><a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a> (linux/mac)</p><p><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a> (win)</p><p>nvm常用命令</p><pre class="language-none"><code class="language-none">nvm off                     &#x2F;&#x2F; 禁用node.js版本管理(不卸载任何东西)nvm on                      &#x2F;&#x2F; 启用node.js版本管理nvm install &lt;version&gt;       &#x2F;&#x2F; 安装node.js的命名 version是版本号 例如：nvm install 8.12.0nvm uninstall &lt;version&gt;     &#x2F;&#x2F; 卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用nvm ls                      &#x2F;&#x2F; 显示所有已安装的node.js版本nvm list available          &#x2F;&#x2F; 显示可以安装的所有node.js的版本nvm use &lt;version&gt;           &#x2F;&#x2F; 切换到使用指定的nodejs版本nvm v                       &#x2F;&#x2F; 显示nvm版本nvm install stable          &#x2F;&#x2F; 安装最新稳定版</code></pre><p>node,npm版本查看</p><pre class="language-none"><code class="language-none">node -vnpm -v</code></pre><p>vue-cli安装</p><pre class="language-none"><code class="language-none">sudo npm i -g vue-cliEEXIST: file already exists, mkdir xxx卸载重装 sudo npm uninstall vue-cli -g</code></pre><p>在对应的项目目录初始化vue项目</p><pre class="language-none"><code class="language-none">vue-init webpack freepd? Project name freepd? Project description freepd fronted project? Author lyln? Vue build standalone? Install vue-router? Yes? Use ESLint to lint your code? No? Set up unit tests No? Setup e2e tests with Nightwatch? No? Should we run &#96;npm install&#96; for you after the project has been created? (recommended) (Use arrow keys)❯ Yes, use NPM  Yes, use Yarn  No, I will handle that myself</code></pre><p>启动项目</p><pre class="language-none"><code class="language-none">sudo npm run dev 可能会报错。启动找不到如下命令，安装即可。sudo npm install webpack-dev-server --save-devsudo npm install -g webpack webpack-clinpm link webpacknpm link webpack-clisudo npm install 安装依赖。</code></pre><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/vue-start.png" alt="vue-start"></p><h3 id="Fastapi-Vue前后端分离-整合element-ui"><a href="#Fastapi-Vue前后端分离-整合element-ui" class="headerlink" title="Fastapi+Vue前后端分离-整合element-ui"></a>Fastapi+Vue前后端分离-整合element-ui</h3><p>package.json</p><pre class="language-none"><code class="language-none">&quot;dependencies&quot;: &#123;  &quot;vue&quot;: &quot;^2.5.2&quot;,  &quot;vue-router&quot;: &quot;^3.0.1&quot;,  &quot;element-ui&quot;: &quot;^2.15.7&quot;&#125;,</code></pre><p><code>npm install</code>执行安装</p><p>然后在main.js引入element-ui组件</p><pre class="language-none"><code class="language-none">import ElementUI from &#39;element-ui&#39;;import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;; Vue.config.productionTip &#x3D; false Vue.use(ElementUI)</code></pre><p><a href="https://element.faas.ele.me/#/zh-CN/component/quickstart">https://element.faas.ele.me/#/zh-CN/component/quickstart</a> 具体可以参考官网，目前先使用完全引入的方式，后面优化按需引入。</p><p>直接修改helloworld模块</p><pre class="language-none"><code class="language-none">&lt;template&gt;&lt;el-container&gt;&lt;el-main style&#x3D;&quot;wide: 80%&quot;&gt;&lt;el-row&gt;&lt;el-col :span&#x3D;&quot;24&quot;&gt;&lt;div class&#x3D;&quot;grid-content bg-purple-dark&quot;&gt;&lt;&#x2F;div&gt;&lt;el-form ref&#x3D;&quot;form&quot; :model&#x3D;&quot;form&quot; label-width&#x3D;&quot;120px&quot; class&#x3D;&quot;fpd-form&quot;&gt;&lt;el-form-item label&#x3D;&quot;分享链接内容&quot;&gt;&lt;el-input v-model&#x3D;&quot;form.url&quot;&gt;&lt;&#x2F;el-input&gt;&lt;&#x2F;el-form-item&gt;&lt;el-form-item label&#x3D;&quot;平台&quot; label-width&#x3D;&quot;120px&quot;&gt;&lt;el-radio-group v-model&#x3D;&quot;form.type&quot;&gt;&lt;el-radio :label&#x3D;&quot;1&quot;&gt;抖音&lt;&#x2F;el-radio&gt;&lt;el-radio :label&#x3D;&quot;2&quot;&gt;网易云&lt;&#x2F;el-radio&gt;&lt;el-radio :label&#x3D;&quot;3&quot;&gt;快手&lt;&#x2F;el-radio&gt;&lt;&#x2F;el-radio-group&gt;&lt;&#x2F;el-form-item&gt;&lt;el-form-item&gt;&lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onSubmit&quot;&gt;在线解析&lt;&#x2F;el-button&gt;&lt;&#x2F;el-form-item&gt;&lt;&#x2F;el-form&gt;&lt;&#x2F;el-col&gt;&lt;&#x2F;el-row&gt;&lt;&#x2F;el-main&gt;&lt;&#x2F;el-container&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;name: &#39;HelloWorld&#39;,data() &#123;return &#123;msg: &#39;free parse download&#39;,form: &#123;url: &#39;&#39;,type: 1,&#125;,&#125;&#125;,methods: &#123;onSubmit() &#123;console.log(&#39;submit!&#39;)  #这里实现后端请求交互。&#125;,&#125;,&#125;&lt;&#x2F;script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;h1,h2 &#123;font-weight: normal;&#125;ul &#123;list-style-type: none;padding: 0;&#125;li &#123;display: inline-block;margin: 0 10px;&#125;a &#123;color: #42b983;&#125;.el-input &#123;width: 320px;&#125;.fpd-form &#123;text-align: left;&#125;&lt;&#x2F;style&gt;</code></pre><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/freepd-v1.png" alt="freepd-v1"></p><p>前端展示如上，整合element-ui完成。</p><h3 id="Fastapi-Vue前后端分离-前后端交互"><a href="#Fastapi-Vue前后端分离-前后端交互" class="headerlink" title="Fastapi+Vue前后端分离-前后端交互"></a>Fastapi+Vue前后端分离-前后端交互</h3><p>目前我们已经实现了前端页面的展示，那怎样和后端交互呢？</p><p>后端交互使用axios请求。</p><p>package.json</p><pre class="language-none"><code class="language-none">&quot;dependencies&quot;: &#123;  &quot;vue&quot;: &quot;^2.5.2&quot;,  &quot;vue-router&quot;: &quot;^3.0.1&quot;,  &quot;element-ui&quot;: &quot;^2.15.7&quot;,  &quot;axios&quot;: &quot;0.18.1&quot;&#125;,</code></pre><p><code>npm install</code>执行安装</p><p>在vue页面中导入使用</p><pre class="language-none"><code class="language-none">import axios from &#39;axios&#39;onSubmit() &#123;console.log(&#39;submit!&#39;)  #这里实现后端请求交互。axios.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;douyin&#39;, &#123; url: this.form.url &#125;).then((res) &#x3D;&gt; &#123;console.log(res.data)this.data &#x3D; res.data&#125;).catch((err) &#x3D;&gt; &#123;console.log(&#39;请求失败&#39;, err)&#125;)&#125;,</code></pre><p>将请求返回的data数据赋值给data。</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/freepd-vue.png" alt="freepd-vue"></p><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/lyln/freepd">https://github.com/lyln/freepd</a></p><p>可参见backend下Dockerfile自行构建镜像。</p><pre class="language-none"><code class="language-none">cd backenddocker build -t freepd:v1 .docker run -d --name freepd -p 9000:9000 freepd:v1</code></pre><h4 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h4><p>fastapi docs接口访问解决方法</p><pre class="language-none"><code class="language-none"> &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;fastapi&#x2F;openapi&#x2F;docs.py venv&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;fastapi&#x2F;openapi&#x2F;docs.py # swagger_js_url: str &#x3D; &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;swagger-ui-dist@4&#x2F;swagger-ui-bundle.js&quot;,swagger_js_url: str &#x3D; &quot;https:&#x2F;&#x2F;petstore.swagger.io&#x2F;swagger-ui-bundle.js&quot;,# swagger_css_url: str &#x3D; &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;swagger-ui-dist@4&#x2F;swagger-ui.css&quot;,swagger_css_url: str &#x3D; &quot;https:&#x2F;&#x2F;petstore.swagger.io&#x2F;swagger-ui.css&quot;,</code></pre><p><a href="https://cdnjs.com/libraries/swagger-ui">https://cdnjs.com/libraries/swagger-ui</a></p><p>替换swagger js和css文件</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;swagger-ui&#x2F;4.12.0&#x2F;swagger-ui-bundle.jshttps:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;swagger-ui&#x2F;4.12.0&#x2F;swagger-ui.css或者https:&#x2F;&#x2F;petstore.swagger.io&#x2F;swagger-ui-bundle.jshttps:&#x2F;&#x2F;petstore.swagger.io&#x2F;swagger-ui.css</code></pre><p>问题描述：</p><p>ImportError: No module named Crypto</p><p>问题解决：</p><pre class="language-none"><code class="language-none">1.pycrypto、pycrytodome和crypto是一个东西，crypto在python上面的名字是pycrypto，它是一个第三方库，但是已经停止更新三年了，所以不建议安装这个库；2.windows下python3.6安装也不会成功！这个时候pycryptodome就来了，它是pycrypto的延伸版本，用法和pycrypto是一模一样的；所以，现在告诉大家一种解决方法，直接安装：pip install pycryptodome</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Fastapi-Vue前后端分离-Vue环境搭建&quot;&gt;&lt;a href=&quot;#Fastapi-Vue前后端分离-Vue环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Fastapi+Vue前后端分离-Vue环境搭建&quot;&gt;&lt;/a&gt;Fastapi+Vue前后端
      
    
    </summary>
    
      <category term="Python" scheme="http://www.wiredtiger.org/categories/Python/"/>
    
    
      <category term="Fastapi vue" scheme="http://www.wiredtiger.org/tags/Fastapi-vue/"/>
    
  </entry>
  
  <entry>
    <title>k8s配置多集群访问和kubectl自动补全</title>
    <link href="http://www.wiredtiger.org/2022/05/21/2022-05-21-configure-access-multiple-clusters-and-kubectl/"/>
    <id>http://www.wiredtiger.org/2022/05/21/2022-05-21-configure-access-multiple-clusters-and-kubectl/</id>
    <published>2022-05-20T16:00:00.000Z</published>
    <updated>2022-05-20T10:22:48.101Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义集群、用户和上下文"><a href="#定义集群、用户和上下文" class="headerlink" title="定义集群、用户和上下文"></a>定义集群、用户和上下文</h4><pre class="language-none"><code class="language-none">config-demoapiVersion: v1clusters:- cluster:    certificate-authority: fake-ca-file    server: https:&#x2F;&#x2F;1.2.3.4  name: development- cluster:    insecure-skip-tls-verify: true    server: https:&#x2F;&#x2F;5.6.7.8  name: scratchcontexts:- context:    cluster: development    namespace: frontend    user: developer  name: dev-frontend- context:    cluster: development    namespace: storage    user: developer  name: dev-storage- context:    cluster: scratch    namespace: default    user: experimenter  name: exp-scratchcurrent-context: &quot;&quot;kind: Configpreferences: &#123;&#125;users:- name: developer  user:    client-certificate: fake-cert-file    client-key: fake-key-file- name: experimenter  user:    password: some-password    username: exp</code></pre><p>多集群配置，将云上或者集群对应的配置复制到config-demo对应的<br>clusters<br>contexts<br>users<br>下，即可。如果多个集群冲突contexts下修改对应的名字就行。</p><a id="more"></a><h4 id="常用切换集群命令"><a href="#常用切换集群命令" class="headerlink" title="常用切换集群命令"></a>常用切换集群命令</h4><pre class="language-none"><code class="language-none">alias kubectl&#x3D;&#39;&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;kubectl --kubeconfig &#x2F;etc&#x2F;sysconfig&#x2F;kubeconfig&#39;kubectl config get-contextskubectl config use-context append-testkubectl config current-context</code></pre><p>获取当前K8S上下文<br><code>kubectl config current-context</code></p><p>获取取全局上下文<br><code>kubectl config get-contexts</code></p><p>切换当前上下文<br><code>kubectl config use-context kubernetes-dev</code></p><h4 id="kubectl自动补全"><a href="#kubectl自动补全" class="headerlink" title="kubectl自动补全"></a>kubectl自动补全</h4><pre class="language-none"><code class="language-none">yum install -y bash-completionsource &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completionsource &lt;(kubectl completion bash)echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~&#x2F;.bashrc</code></pre><h4 id="kubecolor显示输出"><a href="#kubecolor显示输出" class="headerlink" title="kubecolor显示输出"></a>kubecolor显示输出</h4><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;hidetatz&#x2F;kubecolor 下载二进制后cp到&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;alias kubectl&#x3D;&quot;kubecolor&quot; kube自动补全会提示kubecolor，修改为kbcalias kubectl&#x3D;&#39;kbc&#39;</code></pre><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/">https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/</a></p><p><a href="https://github.com/hidetatz/kubecolor">https://github.com/hidetatz/kubecolor</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;定义集群、用户和上下文&quot;&gt;&lt;a href=&quot;#定义集群、用户和上下文&quot; class=&quot;headerlink&quot; title=&quot;定义集群、用户和上下文&quot;&gt;&lt;/a&gt;定义集群、用户和上下文&lt;/h4&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;config-demo

apiVersion: v1
clusters:
- cluster:
    certificate-authority: fake-ca-file
    server: https:&amp;#x2F;&amp;#x2F;1.2.3.4
  name: development
- cluster:
    insecure-skip-tls-verify: true
    server: https:&amp;#x2F;&amp;#x2F;5.6.7.8
  name: scratch
contexts:
- context:
    cluster: development
    namespace: frontend
    user: developer
  name: dev-frontend
- context:
    cluster: development
    namespace: storage
    user: developer
  name: dev-storage
- context:
    cluster: scratch
    namespace: default
    user: experimenter
  name: exp-scratch
current-context: &amp;quot;&amp;quot;
kind: Config
preferences: &amp;#123;&amp;#125;
users:
- name: developer
  user:
    client-certificate: fake-cert-file
    client-key: fake-key-file
- name: experimenter
  user:
    password: some-password
    username: exp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多集群配置，将云上或者集群对应的配置复制到config-demo对应的&lt;br&gt;clusters&lt;br&gt;contexts&lt;br&gt;users&lt;br&gt;下，即可。如果多个集群冲突contexts下修改对应的名字就行。&lt;/p&gt;
    
    </summary>
    
      <category term="K8S" scheme="http://www.wiredtiger.org/categories/K8S/"/>
    
    
      <category term="kubectl" scheme="http://www.wiredtiger.org/tags/kubectl/"/>
    
  </entry>
  
  <entry>
    <title>kubevirt初体验</title>
    <link href="http://www.wiredtiger.org/2022/05/21/2022-05-21-kubevirt-user-guide/"/>
    <id>http://www.wiredtiger.org/2022/05/21/2022-05-21-kubevirt-user-guide/</id>
    <published>2022-05-20T16:00:00.000Z</published>
    <updated>2022-05-20T10:58:14.642Z</updated>
    
    <content type="html"><![CDATA[<p>在云计算发展过程中，有两类虚拟化平台技术:<br>• OpenStack(laaS):关注虚拟机的计算、网络和存储资源管理<br>• Kubernetes(PaaS):关注容器的自动化部署、编排调度和发布管理</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/kubevirt.png" alt="kubevirt"></p><h4 id="安装Kubevirt组件"><a href="#安装Kubevirt组件" class="headerlink" title="安装Kubevirt组件"></a>安装Kubevirt组件</h4><pre class="language-none"><code class="language-none">如果虚拟化不可用，则需要手动开启软件仿真kubectl create configmap kubevirt-config -n kubevirt --from-literal debug.useEmulation&#x3D;true --from-literal feature-gates&#x3D;Macvtap,LiveMigration,Snapshot# LiveMigration 开启迁移功能# Snapshot 开启快照功能export VERSION&#x3D;v0.46.1echo $VERSIONkubectl create -f https:&#x2F;&#x2F;github.com&#x2F;kubevirt&#x2F;kubevirt&#x2F;releases&#x2F;download&#x2F;$&#123;VERSION&#125;&#x2F;kubevirt-operator.yamlkubectl create -f https:&#x2F;&#x2F;github.com&#x2F;kubevirt&#x2F;kubevirt&#x2F;releases&#x2F;download&#x2F;$&#123;VERSION&#125;&#x2F;kubevirt-cr.yaml</code></pre><p>检查实例是否正常运行<br><pre class="language-none"><code class="language-none">kubectl get pods -n kubevirt</code></pre></p><a id="more"></a><h4 id="使用KubeVirt创建虚拟机"><a href="#使用KubeVirt创建虚拟机" class="headerlink" title="使用KubeVirt创建虚拟机"></a>使用KubeVirt创建虚拟机</h4><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;kubevirt.io&#x2F;labs&#x2F;manifests&#x2F;vm.yaml kubectl apply -f vm.yamlkubectl get vmvm.yamlapiVersion: kubevirt.io&#x2F;v1kind: VirtualMachinemetadata:  name: testvmspec:  running: false  template:    metadata:      labels:        kubevirt.io&#x2F;size: small        kubevirt.io&#x2F;domain: testvm    spec:      domain:        devices:          disks:            - name: containerdisk              disk:                bus: virtio            - name: cloudinitdisk              disk:                bus: virtio          interfaces:          - name: default            masquerade: &#123;&#125;        resources:          requests:            memory: 64M      networks:      - name: default        pod: &#123;&#125;      volumes:        - name: containerdisk          containerDisk:            image: quay.io&#x2F;kubevirt&#x2F;cirros-container-disk-demo        - name: cloudinitdisk          cloudInitNoCloud:            userDataBase64: SGkuXG4&#x3D;</code></pre><h4 id="virtctl常用命令"><a href="#virtctl常用命令" class="headerlink" title="virtctl常用命令"></a>virtctl常用命令</h4><pre class="language-none"><code class="language-none">export VERSION&#x3D;v0.41.0wget https:&#x2F;&#x2F;github.com&#x2F;kubevirt&#x2F;kubevirt&#x2F;releases&#x2F;download&#x2F;$&#123;VERSION&#125;&#x2F;virtctl-$&#123;VERSION&#125;-linux-amd64copy virtctl-v0.41.0-linux-amd64 &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;virtctlchmod +x &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;virtctlvirtctl start testvm virtctl stop testvm virtctl restart testvmvirtctl console testvm退出虚拟机快捷键： ctrl+]</code></pre><h4 id="创建虚拟机快照和恢复"><a href="#创建虚拟机快照和恢复" class="headerlink" title="创建虚拟机快照和恢复"></a>创建虚拟机快照和恢复</h4><p>snap.yaml<br><pre class="language-none"><code class="language-none">apiVersion: snapshot.kubevirt.io&#x2F;v1alpha1kind: VirtualMachineSnapshotmetadata:  name: snap-testvmspec:  source:    apiGroup: kubevirt.io    kind: VirtualMachine    name: testvm</code></pre><br>查看快照<br><code>kubectl get virtualmachinesnapshot.snapshot.kubevirt.io</code></p><p>recovery-snap.yaml<br><pre class="language-none"><code class="language-none">apiVersion: snapshot.kubevirt.io&#x2F;v1alpha1kind: VirtualMachineRestoremetadata:  name: restore-testvmspec:  target:    apiGroup: kubevirt.io    kind: VirtualMachine    name: testvm  virtualMachineSnapshotName: snap-testvm</code></pre><br>查看恢复快照<br><code>kubectl get virtualmachinerestore.snapshot.kubevirt.io</code></p><p>目前测试镜像快照和恢复有问题，恢复虚拟机快照数据丢失。</p><h4 id="虚拟机迁移"><a href="#虚拟机迁移" class="headerlink" title="虚拟机迁移"></a>虚拟机迁移</h4><p><code>virtctl migrate testvm</code></p><p>会将虚拟机vm从一个节点迁移到另外一台节点上，测试从旧节点迁移到新节点，不会丢数据。</p><p>查看命令<br><pre class="language-none"><code class="language-none">kubectl get pods -o wideNAME                         READY   STATUS     RESTARTS   AGE   IP              NODE          NOMINATED NODE   READINESS GATESvirt-launcher-testvm-bwfh8   3&#x2F;3     Running    0          14m   172.12.124.24   node-117   &lt;none&gt;           &lt;none&gt;virt-launcher-testvm-znv55   1&#x2F;3     NotReady   0          21h   172.12.64.96    node-119   &lt;none&gt;           &lt;none&gt;迁移前kubectl get vmiNAME     AGE   PHASE     IP              NODENAME      READYtestvm   21h   Running   172.12.64.96    node-119   Tru迁移后kubectl get vmiNAME     AGE   PHASE     IP              NODENAME      READYtestvm   21h   Running   172.12.124.24   node-117   Tru</code></pre></p><h4 id="kubevirt磁盘和卷"><a href="#kubevirt磁盘和卷" class="headerlink" title="kubevirt磁盘和卷"></a>kubevirt磁盘和卷</h4><p>在 spec.volumes 下可以指定多种类型的卷:<br>cloudInitNoCloud:Cloud-init相关的配置，用于修改或者初始化虚拟机中的配置信息 containerDisk:指定一个包含 qcow2 或 raw 格式的 docker 镜像，重启 vm 数据会丢失 dataVolume:动态创建一个 PVC，并用指定的磁盘映像填充该 PVC，重启 vm 数据不会丢失 emptyDisk:从宿主机上分配固定容量的空间，映射到vm中的一块磁盘，emptyDisk 的生命周期与 vm 等同，重启 mv 数据会丢失<br>ephemeral: 在虚机启动时创建一个临时卷，虚机关闭后自动销毁，临时卷在不需要磁盘持久性的任何情 况下都很有用。<br>hostDisk:在宿主机上创建一个 img 镜像文件，挂给虚拟机使用。重启 vm 数据不会丢失。 persistentVolumeClaim: 指定一个 PVC 创建一个块设备。重启 vm 数据不会丢失。<br>configMap<br>serviceAccount<br>secret : 可以把信息configMap，serviceAccount，secret写入到 iso 磁盘中，挂给虚拟机。</p><h4 id="删除命名空间下异常pod"><a href="#删除命名空间下异常pod" class="headerlink" title="删除命名空间下异常pod"></a>删除命名空间下异常pod</h4><p>delete_unexpect_pods.sh<br><pre class="language-none"><code class="language-none">namespace&#x3D;$1list&#x3D;&#96;kubectl get pods -n $namespace | grep UnexpectedAdmissionError |awk &#39;&#123;print $1&#125;&#39;&#96;for i in $list;do echo $i; kubectl delete pods -n $namespace $i;done</code></pre></p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://kubevirt.io/user-guide">http://kubevirt.io/user-guide</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在云计算发展过程中，有两类虚拟化平台技术:&lt;br&gt;• OpenStack(laaS):关注虚拟机的计算、网络和存储资源管理&lt;br&gt;• Kubernetes(PaaS):关注容器的自动化部署、编排调度和发布管理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://inshub.oss-cn-beijing.aliyuncs.com/blog/kubevirt.png&quot; alt=&quot;kubevirt&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装Kubevirt组件&quot;&gt;&lt;a href=&quot;#安装Kubevirt组件&quot; class=&quot;headerlink&quot; title=&quot;安装Kubevirt组件&quot;&gt;&lt;/a&gt;安装Kubevirt组件&lt;/h4&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;如果虚拟化不可用，则需要手动开启软件仿真
kubectl create configmap kubevirt-config -n kubevirt --from-literal debug.useEmulation&amp;#x3D;true --from-literal feature-gates&amp;#x3D;Macvtap,LiveMigration,Snapshot

# LiveMigration 开启迁移功能
# Snapshot 开启快照功能

export VERSION&amp;#x3D;v0.46.1
echo $VERSION
kubectl create -f https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;kubevirt&amp;#x2F;kubevirt&amp;#x2F;releases&amp;#x2F;download&amp;#x2F;$&amp;#123;VERSION&amp;#125;&amp;#x2F;kubevirt-operator.yaml
kubectl create -f https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;kubevirt&amp;#x2F;kubevirt&amp;#x2F;releases&amp;#x2F;download&amp;#x2F;$&amp;#123;VERSION&amp;#125;&amp;#x2F;kubevirt-cr.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查实例是否正常运行&lt;br&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;kubectl get pods -n kubevirt&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="K8S" scheme="http://www.wiredtiger.org/categories/K8S/"/>
    
    
      <category term="kubevirt" scheme="http://www.wiredtiger.org/tags/kubevirt/"/>
    
  </entry>
  
  <entry>
    <title>Yum安装Gitlab并备份还原</title>
    <link href="http://www.wiredtiger.org/2021/05/19/2021-05-19-gitlab-host-install/"/>
    <id>http://www.wiredtiger.org/2021/05/19/2021-05-19-gitlab-host-install/</id>
    <published>2021-05-18T16:00:00.000Z</published>
    <updated>2022-06-08T03:24:41.263Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/907596-20191118212733899-716856611-20220607184727327.png" alt="gitlab"></p><h4 id="GitLab安装"><a href="#GitLab安装" class="headerlink" title="GitLab安装"></a>GitLab安装</h4><p>添加GitLab社区版Package<br><code>curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</code><br>安装GitLab社区版<br><code>sudo yum install -y gitlab-ce</code></p><p>安装完成如下提示</p><pre class="language-none"><code class="language-none">Thank you for installing GitLab!GitLab was unable to detect a valid hostname for your instance.Please configure a URL for your GitLab instance by setting &#96;external_url&#96;configuration in &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb file.Then, you can start your GitLab instance by running the following command:  sudo gitlab-ctl reconfigureFor a comprehensive list of configuration options please see the Omnibus GitLab readmehttps:&#x2F;&#x2F;gitlab.com&#x2F;gitlab-org&#x2F;omnibus-gitlab&#x2F;blob&#x2F;master&#x2F;README.mdHelp us improve the installation experience, let us know how we did with a 1 minute survey:https:&#x2F;&#x2F;gitlab.fra1.qualtrics.com&#x2F;jfe&#x2F;form&#x2F;SV_6kVqZANThUQ1bZb?installation&#x3D;omnibus&amp;release&#x3D;13-10</code></pre><p>修改/etc/gitlab/gitlab.rb后</p><pre class="language-none"><code class="language-none">external_url &#39;http:&#x2F;&#x2F;hacker.sohu.com&#x2F;git&#39;nginx[&#39;listen_port&#39;] &#x3D; 8000sudo gitlab-ctl reconfigure</code></pre><p>gitlab-ctl常用命令及项目默认目录</p><pre class="language-none"><code class="language-none">gitlab-ctl statusgitlab-ctl restartgitlab-rake 生成的备份文件一般在 &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups 中&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;sbin&#x2F;nginx -p &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx -t&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;sbin&#x2F;nginx -p &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx -s reloadnginx[&#39;enable&#39;] &#x3D; truenginx[&#39;client_max_body_size&#39;] &#x3D; &#39;4096m&#39;nginx[&#39;redirect_http_to_https&#39;] &#x3D; falsenginx[&#39;redirect_http_to_https_port&#39;] &#x3D; 80</code></pre><p>修改nginx配置文件</p><pre class="language-none"><code class="language-none">upstream gitlab &#123;    server 192.168.0.110:8000;&#125;server &#123;        listen 80;        server_name git.inshub.cn;        #也可以将client_max_body_size提到server层        client_max_body_size  2048m;        location &#x2F;git &#123;            # 设置最大允许上传单个的文件大小1G            client_max_body_size 1024m;            proxy_redirect off;            #以下确保 gitlab中项目的 url 是域名而不是 http:&#x2F;&#x2F;git，不可缺少            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            # 反向代理到 gitlab 内置的 nginx            proxy_pass http:&#x2F;&#x2F;gitlab&#x2F;git;            index index.html index.htm;        &#125;    &#125;</code></pre><h4 id="GitLab备份恢复"><a href="#GitLab备份恢复" class="headerlink" title="GitLab备份恢复"></a>GitLab备份恢复</h4><p>备份</p><pre class="language-none"><code class="language-none">sudo gitlab-rake gitlab:backup:creategitlab-rake 生成的备份文件一般在 &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups </code></pre><p>恢复</p><pre class="language-none"><code class="language-none">将 &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups 中的文件同步到新服务器相同目录中gitlab-ctl stop unicorn  gitlab-ctl stop sidekiqchmod 777 &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F;从指定文件恢复（不要加_gitlab_backup.tar）sudo gitlab-rake gitlab:backup:restore BACKUP&#x3D;gitlab-rake gitlab:backup:restore BACKUP&#x3D;1621409658_2021_05_19_13.10.3_gitlab_backupgitlab-ctl restart</code></pre><h4 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h4><p>问题描述：<br>git最大文件上传限制</p><p>问题解决：<br>修改nginx配置client_max_body_size<br>可以设置为到server层</p><p>问题描述：<br>GitLab is taking too much time to respond.</p><p>问题解决：<br><pre class="language-none"><code class="language-none">检查端口因为gitlab的webcache系统默认8080端口。我的8080端口已经被别的占用了解决办法：找到gitlab.rb这个配置文件gitlab_workhorse[&#39;auth_backend&#39;] &#x3D; &quot;http:&#x2F;&#x2F;localhost:8080&quot;unicorn[&#39;port&#39;] &#x3D; 8080把前面的注释打开，然后修改成别空的端口，#使配置生效gitlab-ctl reconfigure#重新启动GitLabgitlab-ctl restart即可生效</code></pre><br>参考地址：<br><a href="https://blog.51cto.com/cainiaibage/2312499">https://blog.51cto.com/cainiaibage/2312499</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://inshub.oss-cn-beijing.aliyuncs.com/blog/907596-20191118212733899-716856611-20220607184727327.png&quot; alt=&quot;gitlab&quot;&gt;&lt;/p&gt;
&lt;h4
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="gitlab" scheme="http://www.wiredtiger.org/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>接入层网关配置管理中心</title>
    <link href="http://www.wiredtiger.org/2021/02/09/2021-02-09-gateway-nginx-nacos/"/>
    <id>http://www.wiredtiger.org/2021/02/09/2021-02-09-gateway-nginx-nacos/</id>
    <published>2021-02-08T16:00:00.000Z</published>
    <updated>2022-11-21T06:24:05.464Z</updated>
    
    <content type="html"><![CDATA[<p>之前调研confd+nacos无侵入的管理nginx配置管理方案，可以通过nacos本身的ui管理配置实现nginx配置的自动更新。但是本身ui可能管理配置起来相对麻烦。遂考虑整合到运维管理平台。</p><p><a href="http://www.inshub.cn/2020/04/19/2020-04-19-confd-nacos-notes/">http://www.inshub.cn/2020/04/19/2020-04-19-confd-nacos-notes/</a></p><h3 id="confd新增权限"><a href="#confd新增权限" class="headerlink" title="confd新增权限"></a>confd新增权限</h3><p>开源版本confd没有新增权限，修改开源版本</p><p><a href="https://github.com/lyln/nacos-confd">https://github.com/lyln/nacos-confd</a> </p><p>用于Nacos 1.2.0 增加权限控制后，拉取配置中心配置。</p><pre class="language-none"><code class="language-none">### 环境版本#### 后端- [Spring Boot 2.2.1](http:&#x2F;&#x2F;spring.io&#x2F;projects&#x2F;spring-boot&#x2F;)- [Mybatis-Plus](https:&#x2F;&#x2F;mp.baomidou.com&#x2F;guide&#x2F;)- [MySQL 5.7.x](https:&#x2F;&#x2F;dev.mysql.com&#x2F;downloads&#x2F;mysql&#x2F;5.7.html#downloads),[Hikari](https:&#x2F;&#x2F;brettwooldridge.github.io&#x2F;HikariCP&#x2F;),[Redis](https:&#x2F;&#x2F;redis.io&#x2F;)- [Shiro 1.4.2](http:&#x2F;&#x2F;shiro.apache.org&#x2F;)#### 前端- [Layui 2.5.5](https:&#x2F;&#x2F;www.layui.com&#x2F;)- [Nepadmin](https:&#x2F;&#x2F;gitee.com&#x2F;june000&#x2F;nep-admin)- [formSelects 4.x 多选框](https:&#x2F;&#x2F;hnzzmsf.github.io&#x2F;example&#x2F;example_v4.html)- [eleTree 树组件](https:&#x2F;&#x2F;layuiextend.hsianglee.cn&#x2F;eletree&#x2F;)- [formSelect.js树形下拉](https:&#x2F;&#x2F;wujiawei0926.gitee.io&#x2F;treeselect&#x2F;docs&#x2F;doc.html)- [Apexcharts图表](https:&#x2F;&#x2F;apexcharts.com&#x2F;)</code></pre><h3 id="后台登陆"><a href="#后台登陆" class="headerlink" title="后台登陆"></a>后台登陆</h3><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/fabos-login.jpg" alt="fabos-login"></p><h3 id="域名管理"><a href="#域名管理" class="headerlink" title="域名管理"></a>域名管理</h3><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/fabos-domain.jpg" alt=""></p><h3 id="域名新增"><a href="#域名新增" class="headerlink" title="域名新增"></a>域名新增</h3><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/fabos-add-domain.jpg" alt="fabos-add-domain"></p><h3 id="域名更新"><a href="#域名更新" class="headerlink" title="域名更新"></a>域名更新</h3><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/fabos-update-domain.jpg" alt="fabos-update-domain"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前调研confd+nacos无侵入的管理nginx配置管理方案，可以通过nacos本身的ui管理配置实现nginx配置的自动更新。但是本身ui可能管理配置起来相对麻烦。遂考虑整合到运维管理平台。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.inshub.cn/2
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="接入层网关" scheme="http://www.wiredtiger.org/tags/%E6%8E%A5%E5%85%A5%E5%B1%82%E7%BD%91%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>通过api创建Grafana图表</title>
    <link href="http://www.wiredtiger.org/2021/02/08/2021-02-08-grafana-create-by-api-go/"/>
    <id>http://www.wiredtiger.org/2021/02/08/2021-02-08-grafana-create-by-api-go/</id>
    <published>2021-02-07T16:00:00.000Z</published>
    <updated>2021-02-23T10:07:02.406Z</updated>
    
    <content type="html"><![CDATA[<p><strong>获取API Keys</strong></p><pre class="language-none"><code class="language-none">用户名：ops密码：123456API KEY：xxxx</code></pre><p><strong>创建dashboard</strong></p><p>参考官网接口 <a href="https://grafana.com/docs/grafana/latest/http_api/dashboard/">https://grafana.com/docs/grafana/latest/http_api/dashboard/</a></p><pre class="language-none"><code class="language-none">POST &#x2F;api&#x2F;dashboards&#x2F;db Accept: application&#x2F;jsonContent-Type: application&#x2F;jsonAuthorization: Bearer &lt;API KEY&gt;&#123;  &quot;dashboard&quot;: &#123;    &quot;id&quot;: null,    &quot;uid&quot;: null,    &quot;title&quot;: &quot;Production Overview&quot;,    &quot;tags&quot;: [ &quot;templated&quot; ],    &quot;timezone&quot;: &quot;browser&quot;,    &quot;schemaVersion&quot;: 16,    &quot;version&quot;: 0,    &quot;refresh&quot;: &quot;25s&quot;  &#125;,  &quot;folderId&quot;: 0,  &quot;overwrite&quot;: false&#125;</code></pre><p><strong>创建图表</strong></p><p>获取创建dashboard的id及uid</p><pre class="language-none"><code class="language-none">&#123; &quot;dashboard&quot;:  &#123;        &quot;id&quot;: 104,        &quot;uid&quot;: &quot;dHEquNzGz&quot;,        &quot;title&quot;: &quot;Production Overview&quot;,        &quot;panels&quot;: [            &#123;            &quot;datasource&quot;: &quot;prometheus_xxx&quot;,                &quot;gridPos&quot;: &#123;                    &quot;h&quot;: 8,                    &quot;w&quot;: 24,                    &quot;x&quot;: 0,                    &quot;y&quot;: 8                &#125;,                &quot;targets&quot;: [                    &#123;                    &quot;format&quot;: &quot;time_series&quot;,                    &quot;rawSql&quot;: &quot;查询sql&quot;,                        &quot;refId&quot;: &quot;A&quot;                    &#125;                ],                &quot;timeRegions&quot;: [],                &quot;timeShift&quot;: null,                &quot;title&quot;: &quot;Panel Title&quot;,                &quot;title&quot;: &quot;接口QPS&quot;,                &quot;type&quot;: &quot;graph&quot;            &#125;        ],        &quot;overwrite&quot;: true,        &quot;version&quot;: 1    &#125;&#125;</code></pre><p>Response响应JSON，通过获取url拼接grafana的生成地址。</p><pre class="language-none"><code class="language-none">&#123;  &quot;id&quot;:      1,  &quot;uid&quot;:     &quot;cIBgcSjkk&quot;,  &quot;url&quot;:     &quot;&#x2F;d&#x2F;cIBgcSjkk&#x2F;production-overview&quot;,  &quot;status&quot;:  &quot;success&quot;,  &quot;version&quot;: 1&#125;</code></pre><p><strong>Go代码实现</strong></p><pre class="language-none"><code class="language-none">import (&quot;bytes&quot;&quot;fmt&quot;&quot;io&#x2F;ioutil&quot;&quot;net&#x2F;http&quot;&quot;strconv&quot;&quot;github.com&#x2F;bitly&#x2F;go-simplejson&quot;)&#x2F;&#x2F;发送Grafana请求函数func reqGrafanaServer(jsonStr []byte) (*simplejson.Json, error) &#123;grafana_url :&#x3D; &quot;http:&#x2F;&#x2F;192.168.1.101:3001&#x2F;api&#x2F;dashboards&#x2F;db&quot;grafana_token :&#x3D; &quot;Bearer  &lt;API KEY&gt;&quot;grafanaReq, err :&#x3D; http.NewRequest(&quot;POST&quot;, grafana_url, bytes.NewBuffer(jsonStr))grafanaReq.Header.Set(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;)grafanaReq.Header.Set(&quot;Authorization&quot;, grafana_token)client :&#x3D; &amp;http.Client&#123;&#125;grafanaResp, err :&#x3D; client.Do(grafanaReq)if err !&#x3D; nil &#123;fmt.Println(&quot;get grafanaResp failed, err:&quot;, err)&#125;defer grafanaResp.Body.Close()grafanaRespBody, err :&#x3D; ioutil.ReadAll(grafanaResp.Body)if err !&#x3D; nil &#123;fmt.Println(&quot;read from grafanaRespBody failed,err:&quot;, err)&#125;return simplejson.NewJson([]byte(grafanaRespBody))&#125;func main() &#123;grafana_ui_url :&#x3D; &quot;http:&#x2F;&#x2F;xxx_url&quot;var dashJson &#x3D; []byte(&#96;&#123;&quot;dashboard&quot;: &#123;&quot;id&quot;: null,&quot;uid&quot;: null,&quot;title&quot;: &quot;Production Overview Test&quot;,&quot;tags&quot;: [ &quot;templated&quot; ],&quot;timezone&quot;: &quot;browser&quot;,&quot;schemaVersion&quot;: 16,&quot;version&quot;: 0&#125;,&quot;folderId&quot;: 0,&quot;overwrite&quot;: false&#125;&#96;)dashData, err :&#x3D; reqGrafanaServer(dashJson)if err !&#x3D; nil &#123;fmt.Printf(&quot;%v\n&quot;, err)return&#125;dashId, _ :&#x3D; dashData.Get(&quot;id&quot;).Int()dashUid, _ :&#x3D; dashData.Get(&quot;uid&quot;).String()fmt.Println(&quot;dashId status is: &quot;, dashId)fmt.Println(&quot;dashUid status is: &quot;, dashUid)&#x2F;&#x2F;创建图表var graphJson &#x3D; []byte(&#96;&#123;&quot;dashboard&quot;: &#123;&quot;id&quot;:&#96; + strconv.Itoa(dashId) + &#96;,&quot;uid&quot;:&quot;&#96; + dashUid + &#96;&quot;,&quot;title&quot;:&quot;Production Overview Test&quot;,&quot;panels&quot;: [&#123;&quot;datasource&quot;: &quot;viper_test&quot;,&quot;gridPos&quot;: &#123;&quot;h&quot;: 8,&quot;w&quot;: 24,&quot;x&quot;: 0,&quot;y&quot;: 8&#125;,&quot;targets&quot;: [&#123;&quot;format&quot;: &quot;time_series&quot;,&quot;rawSql&quot;: &quot;查询sql&quot;,&quot;refId&quot;: &quot;A&quot;&#125;],&quot;title&quot;: &quot;接口QPS&quot;,&quot;type&quot;: &quot;graph&quot;&#125;]&#125;,&quot;overwrite&quot;: true&#125;&#96;)graphData, err :&#x3D; reqGrafanaServer(graphJson)if err !&#x3D; nil &#123;fmt.Printf(&quot;%v\n&quot;, err)return&#125;grafana_url, _ :&#x3D; graphData.Get(&quot;url&quot;).String()fmt.Println(&quot;reqGrafanaServer grafana url :&quot;, grafana_url)fmt.Println(&quot;grafana url is:&quot;, grafana_ui_url+grafana_url)&#125;</code></pre><p><strong>通过接口调用自动生成grafana界面</strong></p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/grafana-interface-qps.jpg" alt="grafana-interface-qps"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;获取API Keys&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;用户名：ops
密码：123456
API KEY：xxxx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;st
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="监控" scheme="http://www.wiredtiger.org/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Go简明语法</title>
    <link href="http://www.wiredtiger.org/2021/01/17/2021-01-17-go-base-use/"/>
    <id>http://www.wiredtiger.org/2021/01/17/2021-01-17-go-base-use/</id>
    <published>2021-01-16T16:00:00.000Z</published>
    <updated>2021-01-19T01:32:03.713Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Go基础用法"><a href="#Go基础用法" class="headerlink" title="Go基础用法"></a>Go基础用法</h4><p>Go指针</p><pre class="language-none"><code class="language-none">a :&#x3D; 5fmt.Println(a)var pa *intpa &#x3D; &amp;afmt.Println(pa)fmt.Println(*pa)go常量const message string &#x3D; &quot;go入门&quot;</code></pre><p>Go选择控制语句</p><pre class="language-none"><code class="language-none">for循环for i :&#x3D; 1; i &lt;&#x3D; 5; i++ &#123;fmt.Println(i)&#125;If&#x2F;Else逻辑判断score :&#x3D; 10if score &gt;&#x3D; 30 &#123;fmt.Println(&quot;MVP级别&quot;)&#125; else if score &gt;&#x3D; 20 &#123;fmt.Println(&quot;球星级别&quot;)&#125; else if score &gt;&#x3D; 10 &#123;fmt.Println(&quot;首发球员&quot;)&#125; else &#123;fmt.Println(&quot;酱油球员&quot;)&#125;Switch分支switch time.Now().Weekday() &#123;case time.Saturday, time.Sunday:fmt.Println(&quot;来了来了，周末来了&quot;)default:fmt.Println(&quot;哭吧哭吧&quot;)&#125;</code></pre><p>Go数组定义</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 数组定义var a [5]intfmt.Println(&quot;a数组:&quot;, a)&#x2F;&#x2F; 元素赋值a[4] &#x3D; 100fmt.Println(&quot;a数组:&quot;, a)fmt.Println(&quot;a[4]:&quot;, a[4])&#x2F;&#x2F; 数组长度fmt.Println(&quot;len:&quot;, len(a))&#x2F;&#x2F; 数组定义且赋值b :&#x3D; [5]int&#123;1, 2, 3, 4, 5&#125;fmt.Println(&quot;b数组:&quot;, b)&#x2F;&#x2F; 二维数组var c [2][3]intfor i :&#x3D; 0; i &lt; 2; i++ &#123;for j :&#x3D; 0; j &lt; 3; j++ &#123;c[i][j] &#x3D; i + j&#125;&#125;fmt.Println(&quot;二维数组: &quot;, c)</code></pre><p>Go切片</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 创建空切片s :&#x3D; make([]string, 3)fmt.Println(&quot;切片:&quot;, s)s[0] &#x3D; &quot;a&quot;s[1] &#x3D; &quot;b&quot;s[2] &#x3D; &quot;c&quot;fmt.Println(&quot;切片内容:&quot;, s)fmt.Println(&quot;s[2]:&quot;, s[2])fmt.Println(&quot;切片长度:&quot;, len(s))&#x2F;&#x2F; 内容追加s &#x3D; append(s, &quot;d&quot;)s &#x3D; append(s, &quot;e&quot;, &quot;f&quot;)fmt.Println(&quot;数据追加后切片内容:&quot;, s)&#x2F;&#x2F; 创建新的切片c :&#x3D; make([]string, len(s))&#x2F;&#x2F; 拷贝切片内容copy(c, s)fmt.Println(&quot;新切片内容:&quot;, c)&#x2F;&#x2F; 取切片下标：2,3,4. 结果[2,5) l :&#x3D; s[2:5]fmt.Println(&quot;数据234:&quot;, l)&#x2F;&#x2F; 取切片下标：0,1,2,3,4l &#x3D; s[:5]fmt.Println(&quot;数据01234:&quot;, l)&#x2F;&#x2F; 取切片下标：2,3,4,5l &#x3D; s[2:]fmt.Println(&quot;数据2345:&quot;, l)&#x2F;&#x2F; 创建数组t :&#x3D; []string&#123;&quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;&#125;fmt.Println(&quot;数组t:&quot;, t)&#x2F;&#x2F; 数组切片fmt.Println(&quot;数组t[2:4]:&quot;, t[2:4])</code></pre><p>Go map哈希字典</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 定义一个key:value的哈希表m :&#x3D; make(map[string]int)&#x2F;&#x2F; 赋值m[&quot;k1&quot;] &#x3D; 7m[&quot;k2&quot;] &#x3D; 13fmt.Println(&quot;m:&quot;, m)&#x2F;&#x2F; 给变量赋值v1 :&#x3D; m[&quot;k1&quot;]fmt.Println(&quot;v1: &quot;, v1)&#x2F;&#x2F; 哈希长度fmt.Println(&quot;len(m):&quot;, len(m))&#x2F;&#x2F; 删除一个哈希值delete(m, &quot;k2&quot;)fmt.Println(&quot;m:&quot;, m)&#x2F;&#x2F; 定义+初始化n :&#x3D; map[string]int&#123;&quot;foo&quot;: 1, &quot;bar&quot;: 2&#125;fmt.Println(&quot;n:&quot;, n)</code></pre><p>Go range的使用</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 定义一个数组nums :&#x3D; []int&#123;2, 3, 4&#125;sum :&#x3D; 0&#x2F;&#x2F; range 循环数组for _, num :&#x3D; range nums &#123;sum +&#x3D; num&#125;fmt.Println(&quot;sum:&quot;, sum)for i, num :&#x3D; range nums &#123;fmt.Println(&quot;index:&quot;, i, &quot;, num:&quot;, num)&#125;&#x2F;&#x2F; 迭代一个字典kvs :&#x3D; map[string]string&#123;&quot;a&quot;: &quot;apple&quot;, &quot;b&quot;: &quot;banana&quot;, &quot;c&quot;: &quot;orange&quot;&#125;for k, v :&#x3D; range kvs &#123;fmt.Printf(&quot;%s -&gt; %s\n&quot;, k, v)&#125;&#x2F;&#x2F; 仅仅迭代字典的keyfor k :&#x3D; range kvs &#123;fmt.Println(&quot;key:&quot;, k)&#125;&#x2F;&#x2F; 仅仅迭代字典的valuefor _, v :&#x3D; range kvs &#123;fmt.Println(&quot;value:&quot;, v)&#125;&#x2F;&#x2F; 迭代循环一个字符串for i, c :&#x3D; range &quot;iloveu&quot; &#123;fmt.Println(i, string(c))&#125;</code></pre><p>Go函数使用</p><pre class="language-none"><code class="language-none">函数声明&#x2F;&#x2F; a+bfunc plus2(a int, b int) int &#123;return a + b&#125;&#x2F;&#x2F; a+b+cfunc plus3(a, b, c int) int &#123;return a + b + c&#125;&#x2F;&#x2F; 四则计算：计算两个值的加减乘除结果，返回多个值func calABCD(a, b int) (int, int, int, int) &#123;return a + b, a - b, a * b, a &#x2F; b&#125;&#x2F;&#x2F; 可变参数函数：合计参数值func addNums(nums ...int) int &#123;fmt.Print(nums, &quot; &quot;)total :&#x3D; 0for _, num :&#x3D; range nums &#123;total +&#x3D; num&#125;return total&#125;函数使用&#x2F;&#x2F;两个数相加result :&#x3D; plus2(10, 20)fmt.Println(&quot;10+20&#x3D;&quot;, result)&#x2F;&#x2F; 三个数相加result &#x3D; plus3(10, 20, 30)fmt.Println(&quot;10+20+30&#x3D;&quot;, result)&#x2F;&#x2F; 两个数计算加减乘除w, x, y, z :&#x3D; calABCD(200, 100)fmt.Println(&quot;ab四则计算&#x3D;&quot;, w, x, y, z)&#x2F;&#x2F; 可变参数函数计算合集result &#x3D; addNums(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)fmt.Println(&quot;1-10合计为&#x3D;&quot;, result)</code></pre><p>Go递归函数</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 递归函数(自调用)func sum(num int) int &#123;    if num &#x3D;&#x3D; 1 &#123;        return num    &#125;    return sum(num-1) + num &#125;&#x2F;&#x2F; 求和1-10fmt.Println(sum(10))</code></pre><p>Go Structs的使用</p><p>值传递结构体</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 声明user结构体type user struct &#123;    name string    password string    age  int&#125;&#x2F;&#x2F; 实例化 user 结构体 user1user1 :&#x3D; user&#123;name: &quot;koma&quot;, password: &quot;12345678&quot;, age: 25&#125;fmt.Println(user1.name, user1.password, user1.age)&#x2F;&#x2F; 声明一个指向 user1 的指针 user1puser1p :&#x3D; &amp;user1fmt.Println(user1p.name, user1p.password, user1p.age)&#x2F;&#x2F; 利用指针给 user1 赋值，会改变 user1 的内容user1p.name &#x3D; &quot;mike&quot;user1p.password &#x3D; &quot;iloveu&quot;user1p.age &#x3D; 20fmt.Println(user1.name, user1.password, user1.age)fmt.Println(user1p.name, user1p.password, user1p.age)</code></pre><p>Structs结构体定义专用的方法</p><p>rect结构体， func(r *rect) area() init   area为rect的方法</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 定义矩形结构体type rect struct &#123;    width, height int&#125;&#x2F;&#x2F; 为 rect 结构体定义计算面积方法 area(), 参数为指针类型func (r *rect) area() int &#123;return r.width * r.height&#125;&#x2F;&#x2F; 为 rect 结构体定义计算周长的方法 perim(), 参数为值类型func (r rect) perim() int &#123;return 2 * (r.width + r.height)&#125;使用结构体方法&#x2F;&#x2F; 定义一个矩形结构体变量r :&#x3D; rect&#123;width: 10, height: 4&#125;&#x2F;&#x2F; 分别调用计算面积和周长的方法fmt.Println(&quot;area: &quot;, r.area())fmt.Println(&quot;perim:&quot;, r.perim())&#x2F;&#x2F; 指针方式调用rp :&#x3D; &amp;rfmt.Println(&quot;area: &quot;, rp.area())fmt.Println(&quot;perim:&quot;, rp.perim())</code></pre><p>Go接口使用</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 定义一个几何图形接口type geometry interface &#123;    area() float64    perim() float64&#125;&#x2F;&#x2F; 定义一个矩形结构体type rect struct &#123;    width, height float64&#125;&#x2F;&#x2F; 定义一个圆形结构体type circle struct &#123;    radius float64&#125;&#x2F;&#x2F; 矩形计算面积func (r rect) area() float64 &#123;    return r.width * r.height&#125;&#x2F;&#x2F; 矩形计算周长func (r rect) perim() float64 &#123;    return 2 * (r.width * r.height)&#125;&#x2F;&#x2F; 圆形计算面积func (c circle) area() float64 &#123;    return math.Pi * c.radius * c.radius&#125;&#x2F;&#x2F; 圆形计算周长func (c circle) perim() float64 &#123;    return 2 * math.Pi * c.radius&#125;&#x2F;&#x2F; 计算函数，参数为几何图形接口类型func measure(g geometry) &#123;    fmt.Println(reflect.TypeOf(g), g)    fmt.Println(g.area())    fmt.Println(g.perim())&#125;使用&#x2F;&#x2F; 声明一个矩形r :&#x3D; rect&#123;width: 4, height: 5&#125;&#x2F;&#x2F; 声明一个圆形c :&#x3D; circle&#123;radius: 10&#125;&#x2F;&#x2F; 用measure函数计算矩形面积和周长measure(r)&#x2F;&#x2F; 用measure函数计算圆形面积和周长measure(c)</code></pre><p>Go协程Goroutines的使用</p><pre class="language-none"><code class="language-none">func sayHelo(name string) &#123;for i :&#x3D; 1; i &lt;&#x3D; 5; i++ &#123;fmt.Println(&quot;Helo&quot;, name, &quot;:&quot;, i)&#125;&#125;cmd :&#x3D; exec.Command(&quot;clear&quot;)cmd.Stdout &#x3D; os.Stdoutcmd.Run()&#x2F;&#x2F; 同步执行函数sayHelo(&quot;world&quot;)&#x2F;&#x2F; 异步执行函数go sayHelo(&quot;iphone&quot;)go sayHelo(&quot;ipad&quot;)&#x2F;&#x2F; 匿名函数，异步执行go func(msg string) &#123;fmt.Println(&quot;this is a&quot;, msg)&#125;(&quot;lesson&quot;)&#x2F;&#x2F; 等待一秒time.Sleep(time.Second)</code></pre><p>Go channel通道的使用</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 定义一个字符型的通道message :&#x3D; make(chan string)go func() &#123;for i :&#x3D; 1; i &lt;&#x3D; 3; i++ &#123;message &lt;- (strconv.Itoa(i) + &quot;.helo channel.&quot;)&#125;&#125;()&#x2F;&#x2F; 接收通道发送的消息result_channel :&#x3D; &quot;&quot;result_channel &#x3D; &lt;-messagefmt.Println(result_channel)result_channel &#x3D; &lt;-messagefmt.Println(result_channel)result_channel &#x3D; &lt;-messagefmt.Println(result_channel)message_buff :&#x3D; make(chan string, 3) &#x2F;&#x2F; 如果是2的话，系统会报错，因为线程阻塞死锁&#x2F;&#x2F; 发送消息message_buff &lt;- &quot;消息1&quot;message_buff &lt;- &quot;消息2&quot;message_buff &lt;- &quot;消息3&quot;&#x2F;&#x2F; 接收消息fmt.Println(&lt;-message_buff)fmt.Println(&lt;-message_buff)fmt.Println(&lt;-message_buff)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Go基础用法&quot;&gt;&lt;a href=&quot;#Go基础用法&quot; class=&quot;headerlink&quot; title=&quot;Go基础用法&quot;&gt;&lt;/a&gt;Go基础用法&lt;/h4&gt;&lt;p&gt;Go指针&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;langu
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="Go" scheme="http://www.wiredtiger.org/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go环境搭建及VSCode配置</title>
    <link href="http://www.wiredtiger.org/2021/01/16/2021-01-16-go-env-base/"/>
    <id>http://www.wiredtiger.org/2021/01/16/2021-01-16-go-env-base/</id>
    <published>2021-01-15T16:00:00.000Z</published>
    <updated>2022-06-07T08:06:51.623Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Go开发环境搭建"><a href="#Go开发环境搭建" class="headerlink" title="Go开发环境搭建"></a>Go开发环境搭建</h4><pre class="language-none"><code class="language-none">mac升级go版本https:&#x2F;&#x2F;golang.org&#x2F;dl&#x2F;或者这个地址https:&#x2F;&#x2F;studygolang.com&#x2F;dl下载对应的版本设置环境变量即可export GOROOT&#x3D;~&#x2F;goexport PATH&#x3D;$PATH:$GOROOT&#x2F;binGOROOT表示Go语言的安装目录GOPATH用于指定我们的开发工作区(workspace),是存放源代码、测试文件、库静态文件、可执行文件等GOPATH目录下的每个工作一般分为三个子目录:src,pkg,binmkdir $GOPATH&#x2F;&#123;src,pkg,bin&#125;为啥我mac构建的bin部署到服务器上不能用？交叉编译,是指在一个平台上就能生成可以在另一个平台运行的代码。GOOS的默认值是我们当前的操作系统， 如果windows，linux,注意mac os操作的上的值是darwinGOARCH则表示CPU架构，如386，amd64,arm等举个例子GOOS&#x3D;linux GOARCH&#x3D;amd64 go build main.goGo涉及的主要环境变量就都在这里了。</code></pre><h4 id="解决Go各种失败肝疼问题"><a href="#解决Go各种失败肝疼问题" class="headerlink" title="解决Go各种失败肝疼问题"></a>解决Go各种失败肝疼问题</h4><pre class="language-none"><code class="language-none">Go 1.13 及以上（推荐）$ go env -w GO111MODULE&#x3D;on$ go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct如果提示冲突unset GOPROXY一把</code></pre><p>参考地址</p><p><a href="https://shockerli.net/post/go-get-golang-org-x-solution/">https://shockerli.net/post/go-get-golang-org-x-solution/</a></p><p><a href="https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md">https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md</a></p><h3 id="go-modules使用"><a href="#go-modules使用" class="headerlink" title="go modules使用"></a>go modules使用</h3><pre class="language-none"><code class="language-none">go mod initgo mod运行前执行go mod tidy即可，这个命令会自动下载依赖的库，也会删除多余的库go help mod 查看常用go.mod文件是记录我们依赖库以及版本号</code></pre><h3 id="govendor使用"><a href="#govendor使用" class="headerlink" title="govendor使用"></a>govendor使用</h3><pre class="language-none"><code class="language-none">go get github.com&#x2F;kardianos&#x2F;govendor用govendor初始化项目并拉取gingovendor initgovendor fetch github.com&#x2F;gin-gonic&#x2F;gin</code></pre><h4 id="VSCode-Go配置"><a href="#VSCode-Go配置" class="headerlink" title="VSCode Go配置"></a>VSCode Go配置</h4><p>settings-extensions-go</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;golang配置&quot;editor.wordWrap&quot;: &quot;on&quot;,&#x2F;&#x2F; 如果useLanguageServer设为true，那么在编写代码时引入本地没有的package时，会自动下载安装&#x2F;&#x2F; 就是有时候会非常卡，保存go的编码文件时偶尔会卡死。这点你们自己取舍吧&quot;go.useLanguageServer&quot;: false,&quot;editor.minimap.renderCharacters&quot;: false,&quot;editor.minimap.enabled&quot;: false,&quot;terminal.external.osxExec&quot;: &quot;iTerm.app&quot;,&quot;go.docsTool&quot;: &quot;gogetdoc&quot;,&quot;go.testFlags&quot;: [&quot;-v&quot;,&quot;-count&#x3D;1&quot;],&quot;go.buildTags&quot;: &quot;&quot;,&quot;go.buildFlags&quot;: [],&quot;go.lintFlags&quot;: [],&quot;go.vetFlags&quot;: [],&quot;go.coverOnSave&quot;: false,&quot;go.useCodeSnippetsOnFunctionSuggest&quot;: false,&quot;go.formatTool&quot;: &quot;goreturns&quot;,&quot;go.gocodeAutoBuild&quot;: false,&quot;go.goroot&quot;: &quot;填写GOROOT路径&quot;,&quot;go.gopath&quot;: &quot;填写GOPATH路径&quot;,&quot;go.autocompleteUnimportedPackages&quot;: true,&quot;go.formatOnSave&quot;: true,&quot;window.zoomLevel&quot;: 0,&quot;debug.console.fontSize&quot;: 16,&quot;debug.console.lineHeight&quot;: 30,</code></pre><h4 id="Go常用命令"><a href="#Go常用命令" class="headerlink" title="Go常用命令"></a>Go常用命令</h4><pre class="language-none"><code class="language-none">go build 编译所有的包和依赖go clean 清理执行其它命令时产生的一些文件和目录go install 编译并安装指定的代码包及它们的依赖包go run 编译并运行命令源码文件go mod init 初始化一个新模块go mod vendor 把所有依赖拷贝到vendor文件夹中go mod tidy 添加缺失的模块，移除无用的模块</code></pre><h3 id="Go类型转换"><a href="#Go类型转换" class="headerlink" title="Go类型转换"></a>Go类型转换</h3><pre class="language-none"><code class="language-none">The most common numeric conversions are Atoi (string to int) and Itoa (int to string).i, err :&#x3D; strconv.Atoi(&quot;-42&quot;)s :&#x3D; strconv.Itoa(-42)https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;strconv&#x2F;</code></pre><h3 id="Go语言解析json数据"><a href="#Go语言解析json数据" class="headerlink" title="Go语言解析json数据"></a>Go语言解析json数据</h3><pre class="language-none"><code class="language-none">package main import (&quot;fmt&quot;&quot;go-simplejson-master&quot;&#x2F;&#x2F;注意导入方式,网上常见的导入&quot;github.com&#x2F;bitly&#x2F;go-simplejson&quot;，&#x2F;&#x2F;应该是修改了文件夹的名字，本人修改名字后，试验成功) func main() &#123;js,err:&#x3D;simplejson.NewJson([]byte(&#96;&#123;&quot;test&quot;:&#123;&quot;array&quot;:[1,2,3],&quot;int&quot;:18,&quot;float&quot;:7.66,&quot;string&quot;:&quot;simplejson&quot;,&quot;bignum&quot;:7617690283790,&quot;bool&quot;:true   &#x2F;&#x2F;这里一定不要加逗号，否则会出错&#125;&#125;&#96;)) if err!&#x3D;nil&#123;panic(&quot;json format error&quot;)&#125;else &#123;        &#x2F;&#x2F;按照键值获取json中的数据arr,_:&#x3D;js.Get(&quot;test&quot;).Get(&quot;array&quot;).Array()i,_:&#x3D;js.Get(&quot;test&quot;).Get(&quot;int&quot;).Int()f,_:&#x3D;js.Get(&quot;test&quot;).Get(&quot;float&quot;).Float64()s:&#x3D;js.Get(&quot;test&quot;).Get(&quot;string&quot;).MustString()fmt.Println(arr,i,f,s) &#125; &#125;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Go开发环境搭建&quot;&gt;&lt;a href=&quot;#Go开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Go开发环境搭建&quot;&gt;&lt;/a&gt;Go开发环境搭建&lt;/h4&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="Go" scheme="http://www.wiredtiger.org/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>轻量日志系统Loki初试</title>
    <link href="http://www.wiredtiger.org/2020/12/20/2020-12-20-loki-install-manual/"/>
    <id>http://www.wiredtiger.org/2020/12/20/2020-12-20-loki-install-manual/</id>
    <published>2020-12-19T16:00:00.000Z</published>
    <updated>2020-12-23T06:27:03.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Loki架构"><a href="#Loki架构" class="headerlink" title="Loki架构"></a>Loki架构</h3><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/loki.jpg" alt="loki"></p><h3 id="Loki部署"><a href="#Loki部署" class="headerlink" title="Loki部署"></a>Loki部署</h3><pre class="language-none"><code class="language-none">$ curl -O -L &quot;wget https:&#x2F;&#x2F;github.91chifun.workers.dev&#x2F;&#x2F;https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;loki&#x2F;releases&#x2F;download&#x2F;v2.0.0&#x2F;loki-linux-amd64.zip&quot;# extract the binary$ unzip &quot;loki-linux-amd64.zip&quot;# make sure it is executable$ chmod a+x &quot;loki-linux-amd64&quot;loki-local-config.ymlauth_enabled: falseserver:  http_listen_port: 3100 # 监听端口ingester:  lifecycler:    address: 0.0.0.0 # 监听地址    ring:      kvstore:        store: inmemory      replication_factor: 1    final_sleep: 0s  chunk_idle_period: 5m  chunk_retain_period: 30s  max_transfer_retries: 0schema_config:  configs:    - from: 2018-04-15      store: boltdb      object_store: filesystem      schema: v11      index:        prefix: index_        period: 144h  #  每张表的时间范围 6天      chunks:        period: 144hstorage_config:#  流文件存储地址  boltdb:    directory: &#x2F;data&#x2F;apps&#x2F;opt&#x2F;loki&#x2F;index#  索引存储地址  filesystem:    directory: &#x2F;data&#x2F;apps&#x2F;opt&#x2F;loki&#x2F;chunkslimits_config:  enforce_metric_name: false  reject_old_samples: true  reject_old_samples_max_age: 144hchunk_store_config:  max_look_back_period: 2160h  # 最大可查询历史日期 90天table_manager:   # 表的保留期90天  retention_deletes_enabled: true  retention_period: 2160hnohup .&#x2F;loki-linux-amd64 -config.file&#x3D;.&#x2F;loki-local-config.yml &gt; loki.log 2&gt;&amp;1 &amp;</code></pre><h3 id="promtail部署"><a href="#promtail部署" class="headerlink" title="promtail部署"></a>promtail部署</h3><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.91chifun.workers.dev&#x2F;&#x2F;https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;loki&#x2F;releases&#x2F;download&#x2F;v2.0.0&#x2F;promtail-linux-amd64.zipunzip promtail-linux-amd64.zippromtail-local-config.yamlserver:  http_listen_port: 9080  grpc_listen_port: 0  positions:  filename: &#x2F;etc&#x2F;promtail&#x2F;positions.yaml   # 游标记录上一次同步位置  sync_period: 10s #10秒钟同步一次clients:  - url: http:&#x2F;&#x2F;localhost:3100&#x2F;loki&#x2F;api&#x2F;v1&#x2F;push # loki服务地址 scrape_configs:- job_name: system  static_configs:  - targets:      - localhost    labels:      job: nginx-logs # labels名称      __path__: &#x2F;data&#x2F;wwwlogs&#x2F;access.log # 采集日志的路径      启动   nohup .&#x2F;promtail-linux-amd64 -config.file promtail-local-config.yaml &gt; promtai.log 2&gt;&amp;1 &amp;   </code></pre><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/loki-nginx-log.jpg" alt="loki"></p><h3 id="LogQL语法（Loki）"><a href="#LogQL语法（Loki）" class="headerlink" title="LogQL语法（Loki）"></a>LogQL语法（Loki）</h3><p><strong>日志流选择器</strong>（log stream selector）</p><p>对于查询表达式的标签部分，将其包装在花括号中<code>&#123;&#125;</code></p><ul><li>=等于</li><li>!=不相等</li><li>=~正则表达式匹配</li><li>!~不匹配正则表达式</li></ul><pre class="language-none"><code class="language-none">&#123;job&#x3D;&quot;nginx-error-logs&quot;&#125; </code></pre><p><strong>过滤器表达式</strong>（filter expression）</p><p>编写日志流选择器后，您可以通过编写搜索表达式来进一步过滤结果。</p><pre class="language-none"><code class="language-none">&#123;job&#x3D;&quot;nginx-error-logs&quot;&#125; |&#x3D; &quot;ss.sohu.com&quot;</code></pre><p>已实现以下过滤器类型：</p><ul><li>|= 行包含字符串。</li><li>!= 行不包含字符串。</li><li>|~ 行匹配正则表达式。</li><li>!~ 行与正则表达式不匹配。</li></ul><p><strong>日志度量</strong></p><p>LogQL同样也支持有限的<code>区间向量</code>度量语句，使用方式也和PromQL类似，常用函数主要是如下4个：</p><ul><li>rate: 计算每秒的日志条目</li><li>count_over_time: 对指定范围内的每个日志流的条目进行计数</li><li>bytes_rate: 计算日志流每秒的字节数</li><li>bytes_over_time: 对指定范围内的每个日志流的使用的字节数</li></ul><p><strong>日志统计</strong></p><ul><li><p>rate: calculate the number of entries per second</p><pre class="language-none"><code class="language-none">rate((&#123;job&#x3D;&quot;nginx-error-logs&quot;&#125; |&#x3D; &quot;abc.com&quot;[60s]))</code></pre></li><li><p>Get the count of logs during the last five minutes, grouping by level:</p><pre class="language-none"><code class="language-none">sum(count_over_time(&#123;job&#x3D;&quot;mysql&quot;&#125;[5m])) by (level)</code></pre></li><li><p>Get the top 10 applications by the highest log throughput:</p><pre class="language-none"><code class="language-none">topk(10,sum(rate(&#123;region&#x3D;&quot;us-east1&quot;&#125;[5m])) by (name))</code></pre></li><li><p>Get the rate of HTTP GET requests from NGINX logs:</p><pre class="language-none"><code class="language-none">avg(rate((&#123;job&#x3D;&quot;nginx&quot;&#125; |&#x3D; &quot;GET&quot;)[10s])) by (region)</code></pre></li></ul><p><strong>聚合函数</strong></p><ul><li>sum: Calculate sum over labels</li><li>min: Select minimum over labels</li><li>max: Select maximum over labels</li><li>avg: Calculate the average over labels</li><li>stddev: Calculate the population standard deviation over labels</li><li>stdvar: Calculate the population standard variance over labels</li><li>count: Count number of elements in the vector</li><li>bottomk: Select smallest k elements by sample value</li><li>topk: Select largest k elements by sample value</li></ul><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><p>问题描述：</p><pre class="language-none"><code class="language-none">error&#x3D;&quot;server returned HTTP status 429 Too Many Requests (429): Ingestion rate limit exceeded (limit: 4194304 bytes&#x2F;sec) while attempting to ingest &#39;2494&#39; lines totaling &#39;1048456&#39; bytes, reduce log volume or contact your Loki administrator to see if the limit can be increased&quot;</code></pre><p>问题解决：</p><p>修改loki的配置文件,在limits_config中添加</p><pre class="language-none"><code class="language-none">limits_config:  enforce_metric_name: false  reject_old_samples: true  reject_old_samples_max_age: 168h  ingestion_rate_mb: 15 # 增加配置</code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://lian.st/4114.html">https://lian.st/4114.html</a></p><p><a href="https://happywzy.top/ri-zhi-ju-he-gong-ju-loki-shi-yong-logql/">https://happywzy.top/ri-zhi-ju-he-gong-ju-loki-shi-yong-logql/</a></p><p><a href="https://github.com/grafana/loki/blob/v1.5.0/docs/logql.md">https://github.com/grafana/loki/blob/v1.5.0/docs/logql.md</a></p><p><a href="https://grafana.com/docs/loki/latest/clients/promtail/pipelines/">https://grafana.com/docs/loki/latest/clients/promtail/pipelines/</a></p><p><a href="https://promcon.io/2019-munich/slides/lt1-08_logql-in-5-minutes.pdf">https://promcon.io/2019-munich/slides/lt1-08_logql-in-5-minutes.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Loki架构&quot;&gt;&lt;a href=&quot;#Loki架构&quot; class=&quot;headerlink&quot; title=&quot;Loki架构&quot;&gt;&lt;/a&gt;Loki架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://inshub.oss-cn-beijing.aliyuncs.com/b
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="Loki" scheme="http://www.wiredtiger.org/tags/Loki/"/>
    
  </entry>
  
  <entry>
    <title>etcd部署及数据迁移</title>
    <link href="http://www.wiredtiger.org/2020/11/21/2020-11-21-etcd-migrate-data/"/>
    <id>http://www.wiredtiger.org/2020/11/21/2020-11-21-etcd-migrate-data/</id>
    <published>2020-11-20T16:00:00.000Z</published>
    <updated>2021-02-20T02:37:29.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境概况"><a href="#环境概况" class="headerlink" title="环境概况"></a>环境概况</h3><pre class="language-none"><code class="language-none">etcdctl version 2.3.7</code></pre><p>最近迁移没人维护的老项目，涉及etcd2 服务的迁移，项目代码没人维护，所以只能平迁到etcd2版本。本来很简单的问题，结果快被整崩溃了。<br>遂记录下迁移过程。</p><p>问题：</p><pre class="language-none"><code class="language-none">etcd[7663]: request cluster ID mismatch (got 75dea77f7702 want bfa24343767ba2e5)</code></pre><p>迁移顺序不对就如上错误。</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/etcd_error.jpg" alt="etcd_error"></p><h3 id="部署etcd"><a href="#部署etcd" class="headerlink" title="部署etcd"></a>部署etcd</h3><p>部署使用原来k8s 安装etcd服务的ansible脚本，直接部署成功。<br>下面操作需要注意顺序～～～<br>停止集群所有节点etcd服务，清空data-dir目录数据待用。</p><h3 id="备份旧版本数据"><a href="#备份旧版本数据" class="headerlink" title="备份旧版本数据"></a>备份旧版本数据</h3><pre class="language-none"><code class="language-none">.&#x2F;etcdctl backup --data-dir &#x2F;data&#x2F;apps&#x2F;data&#x2F;etcd -backup-dir &#x2F;tmp&#x2F;etcd_backup</code></pre><p>备份成功的数据同步到新部署集群的etcd1节点data-dir数据目录</p><p>使用 -–force-new-cluster 参数启动Etcd服务。这个参数会重置集群ID和集群的所有成员信息。<br><pre class="language-none"><code class="language-none"># -initial-clusterINITIAL_CLUSTER&#x3D;&#39;-initial-cluster etcd1&#x3D;http:&#x2F;&#x2F;192.168.1.101:2380&#39;# -initial-cluster-stateINITIAL_CLUSTER_STATE&#x3D;&#39;-initial-cluster-state existing&#39;# -data-dirDATA_DIR&#x3D;&#39;-data-dir &#x2F;data&#x2F;apps&#x2F;data&#x2F;etcd&#39;# other parametersETCD_OPTS&#x3D;&#39;--force-new-cluster&#x3D;&#39;true&#39;&#39;#ETCD_OPTS&#x3D;&#39;&#39;</code></pre></p><p>由于etcdctl不具备修改成员节点参数的功能，使用API操作要来完成。<br><pre class="language-none"><code class="language-none">.&#x2F;bin&#x2F;etcdctl --endpoints http:&#x2F;&#x2F;localhost:2379 member listcurl http:&#x2F;&#x2F;127.0.0.1:2379&#x2F;v2&#x2F;members&#x2F;xxx_id -XPUT \ -H &quot;Content-Type:application&#x2F;json&quot; -d &#39;&#123;&quot;peerURLs&quot;:[&quot;http:&#x2F;&#x2F;192.168.1.101:2380&quot;]&#125;&#39;</code></pre><br>启动etcd1节点。</p><h3 id="etcd添加节点"><a href="#etcd添加节点" class="headerlink" title="etcd添加节点"></a>etcd添加节点</h3><p>etcd添加新节点顺序，首先添加etcd2节点到集群，然后再重启服务。<br><pre class="language-none"><code class="language-none">etcd1执行，添加新节点操作.&#x2F;bin&#x2F;etcdctl --endpoints http:&#x2F;&#x2F;localhost:2379 member add etcd2 http:&#x2F;&#x2F;192.168.1.102:2380</code></pre></p><p>修改etcd2配置<br><pre class="language-none"><code class="language-none"># -initial-clusterINITIAL_CLUSTER&#x3D;&#39;-initial-cluster etcd1&#x3D;192.168.1.101:2380,etcd2&#x3D;http:&#x2F;&#x2F;192.168.1.102:2380&#39;# -initial-cluster-stateINITIAL_CLUSTER_STATE&#x3D;&#39;-initial-cluster-state existing&#39;</code></pre><br>etcd2启动成功，etcd3同上，区别完善下INITIAL_CLUSTER 节点列表。</p><p>将各节点etcd.conf配置文件的变量ETCD_INITIAL_CLUSTER添加新节点信息，然后依次重启。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="language-none"><code class="language-none">.&#x2F;bin&#x2F;etcdctl --endpoints http:&#x2F;&#x2F;localhost:2379 cluster-health.&#x2F;bin&#x2F;etcdctl --endpoints http:&#x2F;&#x2F;localhost:2379 member list.&#x2F;bin&#x2F;etcdctl --endpoints http:&#x2F;&#x2F;localhost:2379 member add etcd2 http:&#x2F;&#x2F;192.168.1.102:2380.&#x2F;bin&#x2F;etcdctl --endpoints http:&#x2F;&#x2F;localhost:2379 member remove cluster_id</code></pre><p>参考地址：<br><a href="https://jusene.github.io/2017/11/12/etcd-cluster/">https://jusene.github.io/2017/11/12/etcd-cluster/</a><br><a href="https://www.cnblogs.com/ilifeilong/p/11625151.html">https://www.cnblogs.com/ilifeilong/p/11625151.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境概况&quot;&gt;&lt;a href=&quot;#环境概况&quot; class=&quot;headerlink&quot; title=&quot;环境概况&quot;&gt;&lt;/a&gt;环境概况&lt;/h3&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;etcdctl ve
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.wiredtiger.org/categories/Linux/"/>
    
    
      <category term="etcd" scheme="http://www.wiredtiger.org/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>Docker快速构建测试环境</title>
    <link href="http://www.wiredtiger.org/2020/10/21/2020-10-21-docker-install-develop/"/>
    <id>http://www.wiredtiger.org/2020/10/21/2020-10-21-docker-install-develop/</id>
    <published>2020-10-20T16:00:00.000Z</published>
    <updated>2022-11-10T09:16:13.456Z</updated>
    
    <content type="html"><![CDATA[<p><strong>快速构建各种开发测试环境汇总</strong></p><h4 id="MySQL5-7开发环境"><a href="#MySQL5-7开发环境" class="headerlink" title="MySQL5.7开发环境"></a>MySQL5.7开发环境</h4><pre class="language-shell" data-language="shell"><code class="language-shell">docker run --name&#x3D;my-db -p3306:3306 -d mysql&#x2F;mysql-server:5.7获取临时密码持久化数据库-v &#x2F;opt&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql 配置文件挂载-v &#x2F;opt&#x2F;data&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnfdocker logs mysql1 2&gt;&amp;1 | grep GENERATEDGENERATED ROOT PASSWORD: Axegh3kAJyDLaRuBemecis&amp;EShOsdocker exec -it my-db mysql -uroot -p&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;&gt; create user admin@&#39;%&#39; identified by &#39;admin&#39;;&gt; grant all privileges on *.* to admin@&#39;%’;查看创建用户&gt; select user,host,authentication_string from mysql.user;重置密码1.修改mysql skip-grant-tables2.重启docker restart my-db3.登陆修改 update mysql.user set authentication_string &#x3D; password(&quot;12121&quot;) where user&#x3D;&quot;root&quot;;</code></pre><p>参考地址：</p><p><a href="https://hub.docker.com/r/mysql/mysql-server/">https://hub.docker.com/r/mysql/mysql-server/</a></p><h4 id="PostgreSQL开发环境"><a href="#PostgreSQL开发环境" class="headerlink" title="PostgreSQL开发环境"></a>PostgreSQL开发环境</h4><pre class="language-none"><code class="language-none">docker run -d \--privileged \--name postgres \-e POSTGRES_USER&#x3D;&#39;postgres&#39; \-e POSTGRES_PASSWORD&#x3D;&#39;admin&#39; \-e PGDATA&#x3D;&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data&#x2F;pgdata \-v &#x2F;data&#x2F;apps&#x2F;postgresql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data \-p 5432:5432 \postgres:14#登录数据库psql -U postgres -Wselect version();</code></pre><p>参考地址：</p><p><a href="https://hub.docker.com/_/postgres">https://hub.docker.com/_/postgres</a></p><h4 id="RabbitMQ开发环境"><a href="#RabbitMQ开发环境" class="headerlink" title="RabbitMQ开发环境"></a>RabbitMQ开发环境</h4><pre class="language-none"><code class="language-none">注意：latest版本没有管理界面，需要管理界面请选择management版本。docker run -d \--name&#x3D;my-rabbitmq \-p 5672:5672 \-p 15672:15672  \-e RABBITMQ_DEFAULT_USER&#x3D;admin \-e RABBITMQ_DEFAULT_PASS&#x3D;pass  \-v &#x2F;data&#x2F;apps&#x2F;rabbitmq:&#x2F;var&#x2F;lib&#x2F;rabbitmq \rabbitmq:3.6.14-management说明：15672是管理界面端口，5672是服务端口。25672是集群端口</code></pre><p>参考地址：</p><p><a href="https://hub.docker.com/_/rabbitmq">https://hub.docker.com/_/rabbitmq</a></p><h4 id="Redis开发环境"><a href="#Redis开发环境" class="headerlink" title="Redis开发环境"></a>Redis开发环境</h4><pre class="language-shell" data-language="shell"><code class="language-shell">docker run --name my-redis -p6379:6379 -d redis--requirepass &#39;xxx&#39; </code></pre><p>参考地址：</p><p><a href="https://hub.docker.com/_/redis">https://hub.docker.com/_/redis</a></p><h4 id="Nacos开发环境"><a href="#Nacos开发环境" class="headerlink" title="Nacos开发环境"></a>Nacos开发环境</h4><pre class="language-shell" data-language="shell"><code class="language-shell">docker run -e MODE&#x3D;standalone -e PREFER_HOST_MODE&#x3D;hostname --name my-nacos -p 8848:8848 -d nacos&#x2F;nacos-server:1.2.1</code></pre><p>参考地址：</p><p><a href="https://github.com/nacos-group/nacos-docker">https://github.com/nacos-group/nacos-docker</a></p><h4 id="Nginx开发环境"><a href="#Nginx开发环境" class="headerlink" title="Nginx开发环境"></a>Nginx开发环境</h4><pre class="language-none"><code class="language-none">docker run --name my-nginx -d -p 9090:80 nginxnginx映射配置&#x2F;etc&#x2F;nginx&#x2F;conf.ddocker run --name my-nginx -v &#x2F;root&#x2F;confd_nginx:&#x2F;etc&#x2F;nginx&#x2F;conf.d -d -p 9090:80 nginx#开放映射ip段-p 8081-8091:8081-8091</code></pre><p>参考地址：</p><p><a href="https://hub.docker.com/_/nginx">https://hub.docker.com/_/nginx</a></p><h4 id="OpenResty开发环境"><a href="#OpenResty开发环境" class="headerlink" title="OpenResty开发环境"></a>OpenResty开发环境</h4><pre class="language-none"><code class="language-none">docker run -d --name my-openresty -v &#x2F;root&#x2F;nginx&#x2F;openresty:&#x2F;etc&#x2F;nginx&#x2F;conf.d -p 8092-8099:8092-8099 openresty&#x2F;openresty:1.21.4.1-centos7#开放映射ip段-p 8092-8099:8092-8099</code></pre><p>参考地址：</p><p><a href="https://hub.docker.com/r/openresty/openresty">https://hub.docker.com/r/openresty/openresty</a></p><h4 id="Grafana开发环境"><a href="#Grafana开发环境" class="headerlink" title="Grafana开发环境"></a>Grafana开发环境</h4><pre class="language-shell" data-language="shell"><code class="language-shell">docker run -d --name&#x3D;my-grafana -p 7000:3000 grafana&#x2F;grafana:7.3.4</code></pre><p>参考地址：</p><p><a href="https://hub.docker.com/r/grafana/grafana">https://hub.docker.com/r/grafana/grafana</a></p><h3 id="Prometheus开发环境"><a href="#Prometheus开发环境" class="headerlink" title="Prometheus开发环境"></a>Prometheus开发环境</h3><pre class="language-none"><code class="language-none">bind-mount the directory containing prometheus.yml onto &#x2F;etc&#x2F;prometheus by running:docker run -d --name&#x3D;my-prometheus \    -p 9090:9090 \    -v &#x2F;data&#x2F;apps&#x2F;opt&#x2F;prometheus:&#x2F;etc&#x2F;prometheus \    prom&#x2F;prometheus</code></pre><p>参考地址：</p><p><a href="https://prometheus.io/docs/prometheus/latest/installation/">https://prometheus.io/docs/prometheus/latest/installation/</a></p><h3 id="MinIO-对象存储服务"><a href="#MinIO-对象存储服务" class="headerlink" title="MinIO 对象存储服务"></a>MinIO 对象存储服务</h3><p>MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p><p>MinIO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p><pre class="language-none"><code class="language-none">docker run --name&#x3D;my-minio -d -p 9000:9000 \  -e &quot;MINIO_ACCESS_KEY&#x3D;admin&quot; \  -e &quot;MINIO_SECRET_KEY&#x3D;admin123&quot; \  -v &#x2F;data&#x2F;apps&#x2F;data&#x2F;:&#x2F;data \  minio&#x2F;minio server &#x2F;data </code></pre><p>参考地址：</p><p><a href="https://docs.min.io/cn/minio-quickstart-guide.html">https://docs.min.io/cn/minio-quickstart-guide.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;快速构建各种开发测试环境汇总&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;MySQL5-7开发环境&quot;&gt;&lt;a href=&quot;#MySQL5-7开发环境&quot; class=&quot;headerlink&quot; title=&quot;MySQL5.7开发环境&quot;&gt;&lt;/a&gt;MySQL5.7开发环
      
    
    </summary>
    
      <category term="Docker" scheme="http://www.wiredtiger.org/categories/Docker/"/>
    
    
      <category term="docker mysql redis" scheme="http://www.wiredtiger.org/tags/docker-mysql-redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用Nacos配置中心</title>
    <link href="http://www.wiredtiger.org/2020/09/27/2020-09-27-springboot-nacos-guide/"/>
    <id>http://www.wiredtiger.org/2020/09/27/2020-09-27-springboot-nacos-guide/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2021-02-23T11:27:20.114Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h4><p>Nacos 致力于帮助您发现、配置和管理微服务。</p><p>springboot 使用nacos配置中心及服务注册及服务消费的使用。</p><ul><li>通过 Nacos Server 和 nacos-config-spring-boot-starter 实现配置的动态变更；</li><li>通过 Nacos Server 和 nacos-discovery-spring-boot-starter 实现服务的注册与发现。</li></ul><h4 id="Nacos部署"><a href="#Nacos部署" class="headerlink" title="Nacos部署"></a>Nacos部署</h4><p>可以参见<a href="http://www.inshub.cn/2020/10/21/2020-10-21-docker-install-develop/">Docker快速构建测试环境</a></p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image2020-8-27_18-20-55.png" alt="img"></p><h4 id="SpringBoot使用Nacos"><a href="#SpringBoot使用Nacos" class="headerlink" title="SpringBoot使用Nacos"></a>SpringBoot使用Nacos</h4><p><strong>配置中心</strong></p><p>pom.xml添加依赖</p><pre class="language-none"><code class="language-none">&lt;properties&gt;&lt;latest.version&gt;0.2.7&lt;&#x2F;latest.version&gt;&lt;&#x2F;properties&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;nacos-config-spring-boot-starter&lt;&#x2F;artifactId&gt;&lt;version&gt;$&#123;latest.version&#125;&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><p>在 application.properties 中配置 Nacos server 的地址：</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image2020-8-27_18-27-49.png" alt="img"></p><pre class="language-none"><code class="language-none">notes: 1、0.2.7 支持密码配置2、命名空间dev</code></pre><p>使用 @NacosPropertySource 加载 dataId 为 example 的配置源，并开启自动更新：</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image2020-8-27_18-32-52.png" alt="img"></p><p>通过 Nacos 的 @NacosValue 注解设置属性值。</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image2020-8-27_18-34-12.png" alt="img"></p><p><a href="http://localhost:8880/config/get">http://localhost:8880/config/get</a><br>获取connectTimeoutInMills nacos配置结果：8000</p><p><strong>服务注册</strong></p><p>pom.xml增加依赖</p><pre class="language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;nacos-discovery-spring-boot-starter&lt;&#x2F;artifactId&gt;    &lt;version&gt;$&#123;latest.version&#125;&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><p>在 application.properties 中配置 增加注册到nacos的服务地址：</p><pre class="language-none"><code class="language-none">spring.application.name&#x3D;nacos.examplenacos.discovery.auto-register&#x3D;truenacos.discovery.register.ip&#x3D;192.168.1.101 --服务ipnacos.discovery.register.port&#x3D;8880  --服务portnacos.discovery.register.serviceName&#x3D;nacos.example.service  --注册的服务名</code></pre><p>服务启动后自动注册到nacos</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image2020-8-27_18-40-39.png" alt="img"></p><p><strong>服务发现</strong></p><p>nacos-spring-boot-discovery-example 服务获取注册的服务，同时消费服务。</p><p>pom.xml添加依赖</p><pre class="language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;nacos-discovery-spring-boot-starter&lt;&#x2F;artifactId&gt;    &lt;version&gt;$&#123;nacos-discovery-spring-boot.version&#125;&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><p>在 application.properties 中配置 Nacos server 的地址：</p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image2020-8-27_18-43-29.png" alt="img"></p><p>使用 <code>@NacosInjected</code> 注入 Nacos 的 <code>NamingService</code> 实例：</p><p>discovery/get 接口获取注册的服务列表。 <a href="http://localhost:8888/discovery/get?serviceName=nacos.example.service">http://localhost:8888/discovery/get?serviceName=nacos.example.service</a></p><p>discovery/client 通过服务名消费配置服务。 <a href="http://localhost:8888/discovery/client">http://localhost:8888/discovery/client</a></p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/image2020-8-27_18-44-42.png" alt="img"></p><p>参考地址：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-boot.html">https://nacos.io/zh-cn/docs/quick-start-spring-boot.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Nacos简介&quot;&gt;&lt;a href=&quot;#Nacos简介&quot; class=&quot;headerlink&quot; title=&quot;Nacos简介&quot;&gt;&lt;/a&gt;Nacos简介&lt;/h4&gt;&lt;p&gt;Nacos 致力于帮助您发现、配置和管理微服务。&lt;/p&gt;
&lt;p&gt;springboot 使用nacos
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.wiredtiger.org/categories/Nginx/"/>
    
    
      <category term="springboot nacos" scheme="http://www.wiredtiger.org/tags/springboot-nacos/"/>
    
  </entry>
  
  <entry>
    <title>KubeSphere3.0踩坑指南</title>
    <link href="http://www.wiredtiger.org/2020/09/10/2020-09-10-k8s-install-kubesphere3.0/"/>
    <id>http://www.wiredtiger.org/2020/09/10/2020-09-10-k8s-install-kubesphere3.0/</id>
    <published>2020-09-09T16:00:00.000Z</published>
    <updated>2020-11-20T10:45:28.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境概况"><a href="#环境概况" class="headerlink" title="环境概况"></a>环境概况</h3><pre class="language-none"><code class="language-none">ansible脚本部署k8s集群k8s版本v1.17.11helm版本v3.2.1默认的 storageclass</code></pre><h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><p>helm3安装<br><pre class="language-none"><code class="language-none">下载[helm3](https:&#x2F;&#x2F;get.helm.sh&#x2F;helm-v3.4.0-linux-amd64.tar.gz)tar -zxvf helm-v3.4.0-linux-amd64.tar.gzmv linux-amd64&#x2F;helm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;helm查看helm源helm repo listhelm repo add stable http:&#x2F;&#x2F;mirror.azure.cn&#x2F;kubernetes&#x2F;chartshelm repo add incubator http:&#x2F;&#x2F;mirror.azure.cn&#x2F;kubernetes&#x2F;charts-incubatorhelm inspect values harbor&#x2F;harbor &gt; values.yamlhelm install harbor harbor&#x2F;harbor -f values.yamlhelm uninstall harbor</code></pre><br><a id="more"></a></p><p>nfs文件共享<br><pre class="language-none"><code class="language-none">yum install nfs-utilscat &#x2F;etc&#x2F;exports&#x2F;data&#x2F;apps&#x2F;data&#x2F; *(rw,sync,no_root_squash)#配置生效exportfs -r#查看生效exportfsshowmount  -eservice nfs start</code></pre></p><h3 id="部署nfs默认存储"><a href="#部署nfs默认存储" class="headerlink" title="部署nfs默认存储"></a>部署nfs默认存储</h3><pre class="language-none"><code class="language-none">helm install my-nfs-provisioner --set nfs.server&#x3D;192.168.10.116 --set nfs.path&#x3D;&#x2F;data&#x2F;apps&#x2F;data stable&#x2F;nfs-client-provisioner -n kube-system改变默认 StorageClasskubectl patch storageclass nfs-client -p &#39;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io&#x2F;is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#39;</code></pre><h3 id="kubesphere3-0安装"><a href="#kubesphere3-0安装" class="headerlink" title="kubesphere3.0安装"></a>kubesphere3.0安装</h3><pre class="language-none"><code class="language-none">kubesphere-installer.yaml 安装3.0cluster-configuration.yaml 3.0组件配置文件kubesphere-delete.sh 删除卸载3.0&#x2F;data&#x2F;apps&#x2F;opt&#x2F;kubespherekubectl apply -f kubesphere-installer.yamlkubectl apply -f cluster-configuration.yaml重启安装ks-installerkubectl rollout restart deploy -n kubesphere-system ks-installer重新安装servicemesh重新安装把status里servicemesh的status删掉，然后重启下ks-installerkubectl edit cc -n kubesphere-system ks-installer</code></pre><p>查看所有pod正常运行后<br><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/kubesphere-login.png" alt="kubesphere-login"><br>默认用户/密码</p><pre class="language-none"><code class="language-none">admin&#x2F;P@88w0rd</code></pre><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/kubesphere3.0.png" alt="kubesphere3.0"></p><h3 id="强制删除"><a href="#强制删除" class="headerlink" title="强制删除"></a>强制删除</h3><pre class="language-none"><code class="language-none">强制删除namespaceskubectl  get ns kubesphere-system  -o json &gt; tmp.jsonkubectl proxy curl -k -H &quot;Content-Type:application&#x2F;json&quot; -X PUT --data-binary @tmp.json http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kubesphere-monitoring-system&#x2F;finalizekubectl get ns kubernetes-dashboard -o json | jq &#39;.spec.finalizers&#x3D;[]&#39; | curl -X PUT http:&#x2F;&#x2F;localhost:8001&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-node-lease&#x2F;finalize -H &quot;Content-Type: application&#x2F;json&quot; --data @-kubectl get namespace &quot;kube-node-lease&quot; -o json   | tr -d &quot;\n&quot; | sed &quot;s&#x2F;\&quot;finalizers\&quot;: \[[^]]\+\]&#x2F;\&quot;finalizers\&quot;: []&#x2F;&quot;   | kubectl replace --raw &#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-node-lease&#x2F;finalize -f -pv&#x2F;pvc强制删除kubectl patch pvc opspvc  -p &#39;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;:null&#125;&#125;&#39; -n kube-opskubectl patch pvc -n  kubesphere-monitoring-system prometheus-k8s-db-prometheus-k8s-0  -p &#39;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;:null&#125;&#125;&#39;强制删除crdskubectl get apiserviceskubectl get fluentbits.logging.kubesphere.io -n kubesphere-logging-system fluent-bit -o yaml &gt; b.yaml修改finalizers: nullkubectl apply -f b.yaml 即可强制删除。</code></pre><h3 id="helm安装gitlab"><a href="#helm安装gitlab" class="headerlink" title="helm安装gitlab"></a>helm安装gitlab</h3><pre class="language-none"><code class="language-none">helm pull gitlabhelm install gitlab gitlab-ce&#x2F; -f values.yamlkubectl apply -f my-gitlab-com.yaml卸载gitlabhelm delete gitlab</code></pre><h3 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h3><p>harbor安装使用docker-compose方式</p><p>docker添加私仓地址<br><pre class="language-none"><code class="language-none">DOCKER_OPTS&#x3D;&quot;--log-level&#x3D;warn --storage-driver&#x3D;overlay2 --userland-proxy&#x3D;false --log-opt max-size&#x3D;1g --log-opt max-file&#x3D;5 --insecure-registry&#x3D;my.harbor.io&quot;</code></pre></p><h3 id="source-to-images"><a href="#source-to-images" class="headerlink" title="source to images"></a>source to images</h3><p>测试从gitlab代码库构建镜像</p><p>目的镜像地址<br><pre class="language-none"><code class="language-none">my.harbor.io&#x2F;s2i&#x2F;s2i-test</code></pre></p><p>参考地址：<a href="https://v2-1.docs.kubesphere.io/docs/zh-CN/quick-start/source-to-image/">https://v2-1.docs.kubesphere.io/docs/zh-CN/quick-start/source-to-image/</a></p><h3 id="构建流水线"><a href="#构建流水线" class="headerlink" title="构建流水线"></a>构建流水线</h3><p>kubesphere测试使用流水线构建流程<br>参考地址: <a href="https://v2-1.docs.kubesphere.io/docs/zh-CN/quick-start/devops-online/">https://v2-1.docs.kubesphere.io/docs/zh-CN/quick-start/devops-online/</a></p><p><img src="https://inshub.oss-cn-beijing.aliyuncs.com/blog/devops-online.jpg" alt="devops-online"></p><h3 id="目前问题"><a href="#目前问题" class="headerlink" title="目前问题"></a>目前问题</h3><p>服务治理，流量数据展示有问题，还没有解决。<br>istio版本是1.4.8，其他同学说是可以，可以一起探讨下。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境概况&quot;&gt;&lt;a href=&quot;#环境概况&quot; class=&quot;headerlink&quot; title=&quot;环境概况&quot;&gt;&lt;/a&gt;环境概况&lt;/h3&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;ansible脚本部署k8s集群
k8s版本v1.17.11
helm版本v3.2.1
默认的 storageclass
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;部署准备&quot;&gt;&lt;a href=&quot;#部署准备&quot; class=&quot;headerlink&quot; title=&quot;部署准备&quot;&gt;&lt;/a&gt;部署准备&lt;/h3&gt;&lt;p&gt;helm3安装&lt;br&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;下载[helm3](https:&amp;#x2F;&amp;#x2F;get.helm.sh&amp;#x2F;helm-v3.4.0-linux-amd64.tar.gz)
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
mv linux-amd64&amp;#x2F;helm &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;helm

查看helm源
helm repo list
helm repo add stable http:&amp;#x2F;&amp;#x2F;mirror.azure.cn&amp;#x2F;kubernetes&amp;#x2F;charts
helm repo add incubator http:&amp;#x2F;&amp;#x2F;mirror.azure.cn&amp;#x2F;kubernetes&amp;#x2F;charts-incubator


helm inspect values harbor&amp;#x2F;harbor &amp;gt; values.yaml

helm install harbor harbor&amp;#x2F;harbor -f values.yaml

helm uninstall harbor&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;
    
    </summary>
    
      <category term="K8S" scheme="http://www.wiredtiger.org/categories/K8S/"/>
    
    
      <category term="kubesphere" scheme="http://www.wiredtiger.org/tags/kubesphere/"/>
    
  </entry>
  
  <entry>
    <title>天津海河英才落户指南及注意事项</title>
    <link href="http://www.wiredtiger.org/2020/05/10/2020-05-10-tianjinluohu-guide/"/>
    <id>http://www.wiredtiger.org/2020/05/10/2020-05-10-tianjinluohu-guide/</id>
    <published>2020-05-09T16:00:00.000Z</published>
    <updated>2020-11-07T09:54:05.814Z</updated>
    
    <content type="html"><![CDATA[<p>落户群聊天记录词云展示<br><img src="https://pic3.zhimg.com/80/v2-cb6d7af83845a67bfd679b9f03782f86_720w.jpg" alt="天津落户沟通交流群词云"></p><p>从新系统（6月8号起）上线到现在（2020年8月10号），已经有不少同学拿到准迁，根据群友反馈的不同时间点，小结一下最近的情况。</p><p>新系统从线上申请到拿到准迁证，大概就2个月左右，其实我感觉速度还不错。只是有些环节可能等待的有些长。</p><p><img src="https://pic4.zhimg.com/80/v2-567a25fd3b079a85c81e6a076d0aecc3_720w.jpg" alt="落户过程时间点"></p><a id="more"></a><p>在疫情期间，海河计划网上办理不见面，全程线上邮寄办理，不用去一次天津。</p><p>当时听说可能会查异地社保，好多人推荐找中介，自己想反正全程线上，先自己试一试，实在不行再中介。一定要先自己弄，因为多数靠忽悠。</p><p>从申请到拿到准迁证，整个过程还是很顺利的。</p><p>本人记录下详细的操作过程，有些需要的细节，可能帮你躲避一下坑，希望能帮助更多想要或者计划落户的人。</p><p>落户主体流程：<br><pre class="language-none"><code class="language-none">1.天津公安app申报人才落户2.准备所需的资料邮件获取商调函3.用商调函从档案所在地调取档案4.天津收到档案后下准迁证5.拿到准迁去户籍所在地办理迁出6.邮寄迁出资料到天津海河人才，拿到户籍页7.借户口页换取身份证</code></pre><br>总共7步大体流程，下面详细记录下过程。</p><h3 id="天津公安app申报人才落户"><a href="#天津公安app申报人才落户" class="headerlink" title="天津公安app申报人才落户"></a>天津公安app申报人才落户</h3><p><code>【天津公安】APP，依次【引进人才落户】-【用户注册】-【信息填写】-【选择区域】</code></p><p>需要注意2点：</p><ul><li>区域的选择，因为各个区查社保的程度不同，时松时紧。</li><li>信息能写无尽量写无</li></ul><p>申报完成过几分钟就能收到审核通过的短信。</p><p><strong>区域选择很重要，区域选择很重要，区域选择很重要，重要的事情说三遍，不清楚的可以私信我。</strong></p><p>实际操作记录：</p><p>3月11日 天津公安app提交申请<br><img src="https://pic3.zhimg.com/80/v2-170b4695cb1d0f6227835762c1455142_720w.jpg" alt="提交申请"></p><p>短信内容如下：<br><code>【天津公安民生服务】您提交的引进人才落户业务，已通过公安机关户籍审核。请您于90日内，到天津市河西区行政服务中心（地址：天津市河西区洞庭路20号，电话：59586020/59586021）引进人才联审窗口办理材料申报、档案接转等手续。您需要携带以下材料【身份证、学历证、学位证原件及复印件，教育部学历证书电子注册备案表（或学历认证报告原件及复印件）、学位证书查询结果打印件（或学位认证报告原件及复印件）。如果您以劳务派遣的方式在天津注册企业工作，除提供上述相关材料之外，还需提供在津社保缴费凭证原件及复印件。】</code></p><h3 id="准备所需的资料邮件获取商调函"><a href="#准备所需的资料邮件获取商调函" class="headerlink" title="准备所需的资料邮件获取商调函"></a>准备所需的资料邮件获取商调函</h3><p>申报通过后，准备所需要的资料，邮寄获取商调函。<br>具体需要资料参见 新落户人员细则.doc 附件。</p><p>基本所需资料整理罗列下：</p><ul><li style="list-style: none"><input type="checkbox"></input> 1、身份证（正反面）</li><li style="list-style: none"><input type="checkbox"></input> 2、学历证</li><li style="list-style: none"><input type="checkbox"></input> 3、学位证</li><li style="list-style: none"><input type="checkbox"></input> 4、学历认证报告</li><li style="list-style: none"><input type="checkbox"></input> 5、学位认证报告</li><li style="list-style: none"><input type="checkbox"></input> 6、学位证书查询结果打印件</li><li style="list-style: none"><input type="checkbox"></input> 7、个人落户承诺书</li><li style="list-style: none"><input type="checkbox"></input> 8、手持身份证照片</li><li style="list-style: none"><input type="checkbox"></input> 9、手持个人承诺书照片</li></ul><p>以上资料均提供复印件<br>准备学历及学位的网站地址，获取电子版并打印<br><a href="https://my.chsi.com.cn/archive/index.jsp">https://my.chsi.com.cn/archive/index.jsp</a></p><p>实际操作记录：<br>准备好资料邮寄基本下一个星期就可以处理。<br><code>邮寄地址：地址：天津市河西区澧水道14号，电话：022-59586021  59586020在邮件封面明显位置写明“海河英才”字样。</code><br><strong>3月23日 补了下资料，收到审核通过，确认商调函获取方式</strong><br>审核通过后会收到如下短信<br><code>【天津公安民生服务】您提交的编号xxxx的业务引进人才落户，状态为已经通过线下审核。请您到“天津公安”APP或“天津公安民生服务平台”微信公众号中的【人才引进落户申请-业务办理进度查询】确认《委托存档商调函》的获取方式。</code></p><h3 id="用商调函从档案所在地调取档案"><a href="#用商调函从档案所在地调取档案" class="headerlink" title="用商调函从档案所在地调取档案"></a>用商调函从档案所在地调取档案</h3><p>上一步确认商调函获取方式其实只要选择邮寄就行，过三天后，会有专门的ems人微信联系你填写调档函的邮寄地址。<br>这个邮件地址是你档案所在地址，你可以委托家人去调档。</p><p>实际操作记录：<br><strong>3月26日 海河收到ems电话 填写收件人地址，发送。</strong></p><p>家人收到调档函去人才调取档案，我家里选择的机要方式。机要方式相对较慢，大概半月左右。</p><p>实际操作记录：<br>4月1日 档案机要邮寄</p><p>机要查询地址<br><a href="http://hhycjh.tjrc.com.cn/jyyz.jsp">http://hhycjh.tjrc.com.cn/jyyz.jsp</a></p><p>4月16日天津收到档案。<br><code>通过行政服务中心取得商调函并办理档案调转的英才请注意： 1、存档编号以WT开头的为问题档案，请注意接听北方人才的电话反馈，或主动电话联系北方人才咨询相关问题，联系方式022-24237206。 2、存档编号以HHYC开头的为正式存档，您可凭行政服务中心的短信通知或直接到之前办理联审的行政服务中心申领《准予迁入证明》。 温馨提示：其他形式存档和落户人员获取《准予迁入证明》的方式请详询其所对应的申报机构。</code></p><p>4月21日 档案问题处理</p><p>4月22日 收到已存档<br><code>【天津公安民生服务】您提交的编号xxx的业务引进人才落户，状态为档案已存档。请您到“天津公安”APP或“天津公安民生服务平台”微信公众号中的【人才引进落户申请-业务办理进度查询】确认《准予迁入证明》的获取方式。</code></p><h3 id="天津收到档案后下准迁证"><a href="#天津收到档案后下准迁证" class="headerlink" title="天津收到档案后下准迁证"></a>天津收到档案后下准迁证</h3><p>查询档案存档后，就可以拿到准迁证。你收到准迁的短信后，还是原来的ems人员会联系你将你准迁邮件到那里。这个有ems人微信联系你填写邮寄地址。</p><p><strong>5月1日拿到准迁证。</strong></p><p>拿到准迁基本就没啥问题了，如果你找中介，也是拿到准迁后再给钱。记住，不然你可能会被社会毒打教训，后悔莫及。</p><h3 id="拿到准迁去户籍所在地办理迁出"><a href="#拿到准迁去户籍所在地办理迁出" class="headerlink" title="拿到准迁去户籍所在地办理迁出"></a>拿到准迁去户籍所在地办理迁出</h3><p>五一放假回家刚好去户籍派出所办理下迁出，办理迁出，拿着准迁及原来的户籍卡，很快就办完迁出。</p><h3 id="邮寄迁出到天津海河人才拿到户籍页"><a href="#邮寄迁出到天津海河人才拿到户籍页" class="headerlink" title="邮寄迁出到天津海河人才拿到户籍页"></a>邮寄迁出到天津海河人才拿到户籍页</h3><p>有个纸条会写明你办完迁出所需的资料需，按要求邮寄回海河人才。</p><p>存档上报地址及常住人口登记表下载地址<br><a href="http://hhycjh.tjrc.com.cn/cddy.jsp">http://hhycjh.tjrc.com.cn/cddy.jsp</a><br>具体要求如图<br><img src="https://pic3.zhimg.com/80/v2-636b306eb83954b61303a4200f9bebda_720w.jpg" alt="准迁"><br>注意事项：<br><img src="https://pic4.zhimg.com/80/v2-f817d7eb84d74861a4f59a919edccd87_720w.jpg" alt="notes"></p><p>群友反馈最新收到这纸条，这个可能是划掉的。因为本来邮寄就没有，但是之前区域工作人员问题，可能没有划这条线导致仔细的同学就会发现少东西而担心。</p><p>那真正的存档人员证明信长什么样呢？如下。<br><img src="https://pic2.zhimg.com/80/v2-812bc9e460c8dcd27c65d18901131b35_720w.jpg" alt="存档证明信"></p><p>ps:有些区是有这个证明信的，有些区是没有的。</p><p>实际操作记录：</p><p><strong>5月10日 邮寄迁出到海河人才</strong></p><h3 id="借户口页换取身份证"><a href="#借户口页换取身份证" class="headerlink" title="借户口页换取身份证"></a>借户口页换取身份证</h3><p>公众号查询户籍是否开通，如果已经开通，就可以去北方人才去取户口页和换取身份证了</p><p>5月19日户籍状态已开通，具体流程如下：<br><a href="https://zhuanlan.zhihu.com/p/143233125">https://zhuanlan.zhihu.com/p/143233125</a></p><p>最新（2020年9月15日）群友反馈，目前河西户口页也支持邮寄。真正做到了拿到天津户口，不用去一次天津。<br><img src="https://pic3.zhimg.com/80/v2-199735768099163dab8953c82bc76bb6_720w.jpg" alt="户口页"><br>ps: 如果你不买房或者其他不用到身份证的话，拿到户口页办理户口的整个过程已经完成。</p><h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p><a href="https://zhuanlan.zhihu.com/p/143207251">https://zhuanlan.zhihu.com/p/143207251</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;落户群聊天记录词云展示&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-cb6d7af83845a67bfd679b9f03782f86_720w.jpg&quot; alt=&quot;天津落户沟通交流群词云&quot;&gt;&lt;/p&gt;
&lt;p&gt;从新系统（6月8号起）上线到现在（2020年8月10号），已经有不少同学拿到准迁，根据群友反馈的不同时间点，小结一下最近的情况。&lt;/p&gt;
&lt;p&gt;新系统从线上申请到拿到准迁证，大概就2个月左右，其实我感觉速度还不错。只是有些环节可能等待的有些长。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-567a25fd3b079a85c81e6a076d0aecc3_720w.jpg&quot; alt=&quot;落户过程时间点&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.wiredtiger.org/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="落户" scheme="http://www.wiredtiger.org/tags/%E8%90%BD%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用confd+nacos以无侵入方式管理nginx</title>
    <link href="http://www.wiredtiger.org/2020/04/19/2020-04-19-confd-nacos-notes/"/>
    <id>http://www.wiredtiger.org/2020/04/19/2020-04-19-confd-nacos-notes/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-11-19T08:46:11.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="confd部署"><a href="#confd部署" class="headerlink" title="confd部署"></a>confd部署</h3><pre class="language-none"><code class="language-none">mkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;kelseyhightowerwget https:&#x2F;&#x2F;github.com&#x2F;nacos-group&#x2F;nacos-confd&#x2F;archive&#x2F;v0.19.2.tar.gztar -xvf v0.19.2.tar.gz -C $GOPATH&#x2F;src&#x2F;github.com&#x2F;kelseyhightowercd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kelseyhightower&#x2F;nacos-confd-0.19.1makesudo cp bin&#x2F;confd &#x2F;usr&#x2F;local&#x2F;bin.&#x2F;confd -versionconfd 0.17.0-dev (Git SHA: , Go Version: go1.14.2)</code></pre><a id="more"></a><h3 id="confd的配置"><a href="#confd的配置" class="headerlink" title="confd的配置"></a>confd的配置</h3><p>confd.toml为confd服务本身的配置文件，主要记录了使用的存储后端、协议、confdir等参数。<br>/etc/confd/confd.toml by default<br>存储后端nacos配置：<br><pre class="language-none"><code class="language-none">backend &#x3D; &quot;nacos&quot;confdir &#x3D; &quot;&#x2F;etc&#x2F;confd&quot;#log-level &#x3D; &quot;debug&quot;interval &#x3D; 5nodes &#x3D; [  &quot;http:&#x2F;&#x2F;192.168.1.101:8848&quot;,]scheme &#x3D; &quot;http&quot;watch &#x3D; true</code></pre></p><h3 id="创建confdir"><a href="#创建confdir" class="headerlink" title="创建confdir"></a>创建confdir</h3><p>confdir底下包含两个目录:</p><p>conf.d:confd的配置文件，主要包含配置的生成逻辑，例如模板源，后端存储对应的keys，命令执行等。<br>templates:配置模板Template，即基于不同组件的配置，修改为符合 Golang text templates的模板文件。</p><p>参数说明：</p><p>必要参数<br>dest (string) - The target file.<br>keys (array of strings) - An array of keys.<br>src (string) - The relative path of a configuration template.</p><p>可选参数<br>gid (int) - The gid that should own the file. Defaults to the effective gid.<br>mode (string) - The permission mode of the file.<br>uid (int) - The uid that should own the file. Defaults to the effective uid.<br>reload_cmd (string) - The command to reload config.<br>check_cmd (string) - The command to check config. Use `` to reference the rendered source template.<br>prefix (string) - The string to prefix to keys.<br><pre class="language-none"><code class="language-none">mkdir -p &#x2F;etc&#x2F;confd&#x2F;&#123;conf.d,templates&#125;cd conf.d ---newsinfo.toml[template]src &#x3D; &quot;newsinfo.conf.tmpl&quot;dest &#x3D; &quot;&#x2F;tmp&#x2F;newsinfo.conf&quot;#prefix &#x3D; &quot;&#x2F;nginx&#x2F;newsinfo&quot;keys &#x3D; [    &quot;&#x2F;nginx&#x2F;newsinfo&#x2F;dev&#x2F;newsinfo&#x2F;conf&quot;,]#check_cmd &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t -c &#123;&#123;.src&#125;&#125;&quot;#reload_cmd &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload&quot;---newsinfo.conf.tmpl&#123;&#123;$data :&#x3D; json (getv &quot;&#x2F;nginx&#x2F;newsinfo&#x2F;dev&#x2F;newsinfo&#x2F;conf&quot;)&#125;&#125;&#123;&#123;$locations :&#x3D; $data.location&#125;&#125;&#123;&#123;range $locations &#125;&#125;upstream &#123;&#123; $data.usage_prefix &#125;&#125;&#123;&#123; .interface &#125;&#125; &#123;     &#123;&#123; range .upstream.backend &#125;&#125;     server &#123;&#123; .&#125;&#125;; &#123;&#123;end&#125;&#125;&#125;&#123;&#123; end &#125;&#125;server &#123;    listen       80;    server_name  &#123;&#123; $data.server_name &#125;&#125;    location &#x2F; &#123;        root   html;        index  index.html index.htm;        proxy_connect_timeout    30s;        proxy_set_header Host $host:$server_port;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_pass     http:&#x2F;&#x2F;debug_ready_sohuzixun;    &#125;    &#123;&#123;range $locations &#125;&#125;    location ^~ &#x2F;&#123;&#123; .interface &#125;&#125; &#123;        proxy_pass  http:&#x2F;&#x2F;&#123;&#123; $data.usage_prefix &#125;&#125;&#123;&#123; .interface &#125;&#125;;        proxy_connect_timeout   30s;        proxy_set_header Host $host:$server_port;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    &#125;    &#123;&#123; end &#125;&#125;&#125;</code></pre></p><h3 id="confd启动"><a href="#confd启动" class="headerlink" title="confd启动"></a>confd启动</h3><p>confd支持以daemon或者onetime两种模式运行<br><pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;confd -config-file &#x2F;etc&#x2F;confd&#x2F;conf&#x2F;confd.tomlnohup &#x2F;usr&#x2F;local&#x2F;bin&#x2F;confd -config-file &#x2F;etc&#x2F;confd&#x2F;conf&#x2F;confd.toml &gt; confd.log 2&gt;&amp;1 &amp;</code></pre></p><h3 id="nacos部署"><a href="#nacos部署" class="headerlink" title="nacos部署"></a>nacos部署</h3><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><p>问题描述：<br> -bash: .confd/: 无法执行二进制文件<br>问题解决：<br>同步到服务器上，make</p><p>links:<br><a href="https://github.com/kelseyhightower/confd/tree/master/docs">https://github.com/kelseyhightower/confd/tree/master/docs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;confd部署&quot;&gt;&lt;a href=&quot;#confd部署&quot; class=&quot;headerlink&quot; title=&quot;confd部署&quot;&gt;&lt;/a&gt;confd部署&lt;/h3&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;mkdir -p $GOPATH&amp;#x2F;src&amp;#x2F;github.com&amp;#x2F;kelseyhightower
wget https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;nacos-group&amp;#x2F;nacos-confd&amp;#x2F;archive&amp;#x2F;v0.19.2.tar.gz
tar -xvf v0.19.2.tar.gz -C $GOPATH&amp;#x2F;src&amp;#x2F;github.com&amp;#x2F;kelseyhightower

cd $GOPATH&amp;#x2F;src&amp;#x2F;github.com&amp;#x2F;kelseyhightower&amp;#x2F;nacos-confd-0.19.1
make
sudo cp bin&amp;#x2F;confd &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin

.&amp;#x2F;confd -version
confd 0.17.0-dev (Git SHA: , Go Version: go1.14.2)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.wiredtiger.org/categories/Nginx/"/>
    
    
      <category term="confd nacos" scheme="http://www.wiredtiger.org/tags/confd-nacos/"/>
    
  </entry>
  
</feed>
