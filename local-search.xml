<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>KubeSphere3.0踩坑指南</title>
    <link href="/2020/09/10/2020-09-10-k8s-install-kubesphere3.0/"/>
    <url>/2020/09/10/2020-09-10-k8s-install-kubesphere3.0/</url>
    
    <content type="html"><![CDATA[<h3 id="环境概况"><a href="#环境概况" class="headerlink" title="环境概况"></a>环境概况</h3><pre class="language-none"><code class="language-none">ansible脚本部署k8s集群k8s版本v1.17.11helm版本v3.2.1默认的 storageclass</code></pre><h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><p>helm3安装<br><pre class="language-none"><code class="language-none">下载[helm3](https:&#x2F;&#x2F;get.helm.sh&#x2F;helm-v3.4.0-linux-amd64.tar.gz)tar -zxvf helm-v3.4.0-linux-amd64.tar.gzmv linux-amd64&#x2F;helm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;helm查看helm源helm repo listhelm repo add stable http:&#x2F;&#x2F;mirror.azure.cn&#x2F;kubernetes&#x2F;chartshelm repo add incubator http:&#x2F;&#x2F;mirror.azure.cn&#x2F;kubernetes&#x2F;charts-incubatorhelm inspect values harbor&#x2F;harbor &gt; values.yamlhelm install harbor harbor&#x2F;harbor -f values.yamlhelm uninstall harbor</code></pre><br><a id="more"></a></p><p>nfs文件共享<br><pre class="language-none"><code class="language-none">yum install nfs-utilscat &#x2F;etc&#x2F;exports&#x2F;data&#x2F;apps&#x2F;data&#x2F; *(rw,sync,no_root_squash)#配置生效exportfs -r#查看生效exportfsshowmount  -eservice nfs start</code></pre></p><h3 id="部署nfs默认存储"><a href="#部署nfs默认存储" class="headerlink" title="部署nfs默认存储"></a>部署nfs默认存储</h3><pre class="language-none"><code class="language-none">helm install my-nfs-provisioner --set nfs.server&#x3D;192.168.10.116 --set nfs.path&#x3D;&#x2F;data&#x2F;apps&#x2F;data stable&#x2F;nfs-client-provisioner -n kube-system改变默认 StorageClasskubectl patch storageclass nfs-client -p &#39;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io&#x2F;is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#39;</code></pre><h3 id="kubesphere3-0安装"><a href="#kubesphere3-0安装" class="headerlink" title="kubesphere3.0安装"></a>kubesphere3.0安装</h3><pre class="language-none"><code class="language-none">kubesphere-installer.yaml 安装3.0cluster-configuration.yaml 3.0组件配置文件kubesphere-delete.sh 删除卸载3.0&#x2F;data&#x2F;apps&#x2F;opt&#x2F;kubespherekubectl apply -f kubesphere-installer.yamlkubectl apply -f cluster-configuration.yaml重启安装ks-installerkubectl rollout restart deploy -n kubesphere-system ks-installer重新安装servicemesh重新安装把status里servicemesh的status删掉，然后重启下ks-installerkubectl edit cc -n kubesphere-system ks-installer</code></pre><p>查看所有pod正常运行后<br><img src="https://wx4.sinaimg.cn/mw690/005yWAylly1gkfbaoia8dj319o0jv75b.jpg" alt="kubesphere登陆界面"><br>默认用户/密码<br><pre class="language-none"><code class="language-none">admin&#x2F;P@88w0rd</code></pre><br><img src="https://wx1.sinaimg.cn/mw690/005yWAylly1gkfakr3ca0j31ez0ksgqe.jpg" alt="kubesphere3.0"></p><h3 id="强制删除"><a href="#强制删除" class="headerlink" title="强制删除"></a>强制删除</h3><pre class="language-none"><code class="language-none">强制删除namespaceskubectl  get ns kubesphere-system  -o json &gt; tmp.jsonkubectl proxy curl -k -H &quot;Content-Type:application&#x2F;json&quot; -X PUT --data-binary @tmp.json http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kubesphere-monitoring-system&#x2F;finalizekubectl get ns kubernetes-dashboard -o json | jq &#39;.spec.finalizers&#x3D;[]&#39; | curl -X PUT http:&#x2F;&#x2F;localhost:8001&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-node-lease&#x2F;finalize -H &quot;Content-Type: application&#x2F;json&quot; --data @-kubectl get namespace &quot;kube-node-lease&quot; -o json   | tr -d &quot;\n&quot; | sed &quot;s&#x2F;\&quot;finalizers\&quot;: \[[^]]\+\]&#x2F;\&quot;finalizers\&quot;: []&#x2F;&quot;   | kubectl replace --raw &#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-node-lease&#x2F;finalize -f -pv&#x2F;pvc强制删除kubectl patch pvc opspvc  -p &#39;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;:null&#125;&#125;&#39; -n kube-opskubectl patch pvc -n  kubesphere-monitoring-system prometheus-k8s-db-prometheus-k8s-0  -p &#39;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;:null&#125;&#125;&#39;强制删除crdskubectl get apiserviceskubectl get fluentbits.logging.kubesphere.io -n kubesphere-logging-system fluent-bit -o yaml &gt; b.yaml修改finalizers: nullkubectl apply -f b.yaml 即可强制删除。</code></pre><h3 id="helm安装gitlab"><a href="#helm安装gitlab" class="headerlink" title="helm安装gitlab"></a>helm安装gitlab</h3><pre class="language-none"><code class="language-none">helm pull gitlabhelm install gitlab gitlab-ce&#x2F; -f values.yamlkubectl apply -f my-gitlab-com.yaml卸载gitlabhelm delete gitlab</code></pre><h3 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h3><p>harbor安装使用docker-compose方式</p><p>docker添加私仓地址<br><pre class="language-none"><code class="language-none">DOCKER_OPTS&#x3D;&quot;--log-level&#x3D;warn --storage-driver&#x3D;overlay2 --userland-proxy&#x3D;false --log-opt max-size&#x3D;1g --log-opt max-file&#x3D;5 --insecure-registry&#x3D;my.harbor.io&quot;</code></pre></p><h3 id="source-to-images"><a href="#source-to-images" class="headerlink" title="source to images"></a>source to images</h3><p>测试从gitlab代码库构建镜像</p><p>目的镜像地址<br><pre class="language-none"><code class="language-none">my.harbor.io&#x2F;s2i&#x2F;s2i-test</code></pre></p><p>参考地址：<a href="https://v2-1.docs.kubesphere.io/docs/zh-CN/quick-start/source-to-image/">https://v2-1.docs.kubesphere.io/docs/zh-CN/quick-start/source-to-image/</a></p><h3 id="构建流水线"><a href="#构建流水线" class="headerlink" title="构建流水线"></a>构建流水线</h3><p>kubesphere测试使用流水线构建流程<br>参考地址: <a href="https://v2-1.docs.kubesphere.io/docs/zh-CN/quick-start/devops-online/">https://v2-1.docs.kubesphere.io/docs/zh-CN/quick-start/devops-online/</a></p><p><img src="https://wx1.sinaimg.cn/mw690/005yWAylly1gkfmhaqyt1j315l0lbtdd.jpg" alt="kubesphere构建流水线"></p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubesphere</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天津海河英才落户指南及注意事项</title>
    <link href="/2020/05/10/2020-05-10-tianjinluohu-guide/"/>
    <url>/2020/05/10/2020-05-10-tianjinluohu-guide/</url>
    
    <content type="html"><![CDATA[<p>落户群聊天记录词云展示<br><img src="https://pic3.zhimg.com/80/v2-cb6d7af83845a67bfd679b9f03782f86_720w.jpg" alt="天津落户沟通交流群词云"></p><p>从新系统（6月8号起）上线到现在（2020年8月10号），已经有不少同学拿到准迁，根据群友反馈的不同时间点，小结一下最近的情况。</p><p>新系统从线上申请到拿到准迁证，大概就2个月左右，其实我感觉速度还不错。只是有些环节可能等待的有些长。</p><p><img src="https://pic4.zhimg.com/80/v2-567a25fd3b079a85c81e6a076d0aecc3_720w.jpg" alt="落户过程时间点"></p><a id="more"></a><p>在疫情期间，海河计划网上办理不见面，全程线上邮寄办理，不用去一次天津。</p><p>当时听说可能会查异地社保，好多人推荐找中介，自己想反正全程线上，先自己试一试，实在不行再中介。一定要先自己弄，因为多数靠忽悠。</p><p>从申请到拿到准迁证，整个过程还是很顺利的。</p><p>本人记录下详细的操作过程，有些需要的细节，可能帮你躲避一下坑，希望能帮助更多想要或者计划落户的人。</p><p>落户主体流程：<br><pre class="language-none"><code class="language-none">1.天津公安app申报人才落户2.准备所需的资料邮件获取商调函3.用商调函从档案所在地调取档案4.天津收到档案后下准迁证5.拿到准迁去户籍所在地办理迁出6.邮寄迁出资料到天津海河人才，拿到户籍页7.借户口页换取身份证</code></pre><br>总共7步大体流程，下面详细记录下过程。</p><h3 id="天津公安app申报人才落户"><a href="#天津公安app申报人才落户" class="headerlink" title="天津公安app申报人才落户"></a>天津公安app申报人才落户</h3><p><code>【天津公安】APP，依次【引进人才落户】-【用户注册】-【信息填写】-【选择区域】</code></p><p>需要注意2点：</p><ul><li>区域的选择，因为各个区查社保的程度不同，时松时紧。</li><li>信息能写无尽量写无</li></ul><p>申报完成过几分钟就能收到审核通过的短信。</p><p><strong>区域选择很重要，区域选择很重要，区域选择很重要，重要的事情说三遍，不清楚的可以私信我。</strong></p><p>实际操作记录：</p><p>3月11日 天津公安app提交申请<br><img src="https://pic3.zhimg.com/80/v2-170b4695cb1d0f6227835762c1455142_720w.jpg" alt="提交申请"></p><p>短信内容如下：<br><code>【天津公安民生服务】您提交的引进人才落户业务，已通过公安机关户籍审核。请您于90日内，到天津市河西区行政服务中心（地址：天津市河西区洞庭路20号，电话：59586020/59586021）引进人才联审窗口办理材料申报、档案接转等手续。您需要携带以下材料【身份证、学历证、学位证原件及复印件，教育部学历证书电子注册备案表（或学历认证报告原件及复印件）、学位证书查询结果打印件（或学位认证报告原件及复印件）。如果您以劳务派遣的方式在天津注册企业工作，除提供上述相关材料之外，还需提供在津社保缴费凭证原件及复印件。】</code></p><h3 id="准备所需的资料邮件获取商调函"><a href="#准备所需的资料邮件获取商调函" class="headerlink" title="准备所需的资料邮件获取商调函"></a>准备所需的资料邮件获取商调函</h3><p>申报通过后，准备所需要的资料，邮寄获取商调函。<br>具体需要资料参见 新落户人员细则.doc 附件。</p><p>基本所需资料整理罗列下：</p><ul><li style="list-style: none"><input type="checkbox"></input> 1、身份证（正反面）</li><li style="list-style: none"><input type="checkbox"></input> 2、学历证</li><li style="list-style: none"><input type="checkbox"></input> 3、学位证</li><li style="list-style: none"><input type="checkbox"></input> 4、学历认证报告</li><li style="list-style: none"><input type="checkbox"></input> 5、学位认证报告</li><li style="list-style: none"><input type="checkbox"></input> 6、学位证书查询结果打印件</li><li style="list-style: none"><input type="checkbox"></input> 7、个人落户承诺书</li><li style="list-style: none"><input type="checkbox"></input> 8、手持身份证照片</li><li style="list-style: none"><input type="checkbox"></input> 9、手持个人承诺书照片</li></ul><p>以上资料均提供复印件<br>准备学历及学位的网站地址，获取电子版并打印<br><a href="https://my.chsi.com.cn/archive/index.jsp">https://my.chsi.com.cn/archive/index.jsp</a></p><p>实际操作记录：<br>准备好资料邮寄基本下一个星期就可以处理。<br><code>邮寄地址：地址：天津市河西区澧水道14号，电话：022-59586021  59586020在邮件封面明显位置写明“海河英才”字样。</code><br><strong>3月23日 补了下资料，收到审核通过，确认商调函获取方式</strong><br>审核通过后会收到如下短信<br><code>【天津公安民生服务】您提交的编号xxxx的业务引进人才落户，状态为已经通过线下审核。请您到“天津公安”APP或“天津公安民生服务平台”微信公众号中的【人才引进落户申请-业务办理进度查询】确认《委托存档商调函》的获取方式。</code></p><h3 id="用商调函从档案所在地调取档案"><a href="#用商调函从档案所在地调取档案" class="headerlink" title="用商调函从档案所在地调取档案"></a>用商调函从档案所在地调取档案</h3><p>上一步确认商调函获取方式其实只要选择邮寄就行，过三天后，会有专门的ems人微信联系你填写调档函的邮寄地址。<br>这个邮件地址是你档案所在地址，你可以委托家人去调档。</p><p>实际操作记录：<br><strong>3月26日 海河收到ems电话 填写收件人地址，发送。</strong></p><p>家人收到调档函去人才调取档案，我家里选择的机要方式。机要方式相对较慢，大概半月左右。</p><p>实际操作记录：<br>4月1日 档案机要邮寄</p><p>机要查询地址<br><a href="http://hhycjh.tjrc.com.cn/jyyz.jsp">http://hhycjh.tjrc.com.cn/jyyz.jsp</a></p><p>4月16日天津收到档案。<br><code>通过行政服务中心取得商调函并办理档案调转的英才请注意： 1、存档编号以WT开头的为问题档案，请注意接听北方人才的电话反馈，或主动电话联系北方人才咨询相关问题，联系方式022-24237206。 2、存档编号以HHYC开头的为正式存档，您可凭行政服务中心的短信通知或直接到之前办理联审的行政服务中心申领《准予迁入证明》。 温馨提示：其他形式存档和落户人员获取《准予迁入证明》的方式请详询其所对应的申报机构。</code></p><p>4月21日 档案问题处理</p><p>4月22日 收到已存档<br><code>【天津公安民生服务】您提交的编号xxx的业务引进人才落户，状态为档案已存档。请您到“天津公安”APP或“天津公安民生服务平台”微信公众号中的【人才引进落户申请-业务办理进度查询】确认《准予迁入证明》的获取方式。</code></p><h3 id="天津收到档案后下准迁证"><a href="#天津收到档案后下准迁证" class="headerlink" title="天津收到档案后下准迁证"></a>天津收到档案后下准迁证</h3><p>查询档案存档后，就可以拿到准迁证。你收到准迁的短信后，还是原来的ems人员会联系你将你准迁邮件到那里。这个有ems人微信联系你填写邮寄地址。</p><p><strong>5月1日拿到准迁证。</strong></p><p>拿到准迁基本就没啥问题了，如果你找中介，也是拿到准迁后再给钱。记住，不然你可能会被社会毒打教训，后悔莫及。</p><h3 id="拿到准迁去户籍所在地办理迁出"><a href="#拿到准迁去户籍所在地办理迁出" class="headerlink" title="拿到准迁去户籍所在地办理迁出"></a>拿到准迁去户籍所在地办理迁出</h3><p>五一放假回家刚好去户籍派出所办理下迁出，办理迁出，拿着准迁及原来的户籍卡，很快就办完迁出。</p><h3 id="邮寄迁出到天津海河人才拿到户籍页"><a href="#邮寄迁出到天津海河人才拿到户籍页" class="headerlink" title="邮寄迁出到天津海河人才拿到户籍页"></a>邮寄迁出到天津海河人才拿到户籍页</h3><p>有个纸条会写明你办完迁出所需的资料需，按要求邮寄回海河人才。</p><p>存档上报地址及常住人口登记表下载地址<br><a href="http://hhycjh.tjrc.com.cn/cddy.jsp">http://hhycjh.tjrc.com.cn/cddy.jsp</a><br>具体要求如图<br><img src="https://pic3.zhimg.com/80/v2-636b306eb83954b61303a4200f9bebda_720w.jpg" alt="准迁"><br>注意事项：<br><img src="https://pic4.zhimg.com/80/v2-f817d7eb84d74861a4f59a919edccd87_720w.jpg" alt="notes"></p><p>群友反馈最新收到这纸条，这个可能是划掉的。因为本来邮寄就没有，但是之前区域工作人员问题，可能没有划这条线导致仔细的同学就会发现少东西而担心。</p><p>那真正的存档人员证明信长什么样呢？如下。<br><img src="https://pic2.zhimg.com/80/v2-812bc9e460c8dcd27c65d18901131b35_720w.jpg" alt="存档证明信"></p><p>ps:有些区是有这个证明信的，有些区是没有的。</p><p>实际操作记录：</p><p><strong>5月10日 邮寄迁出到海河人才</strong></p><h3 id="借户口页换取身份证"><a href="#借户口页换取身份证" class="headerlink" title="借户口页换取身份证"></a>借户口页换取身份证</h3><p>公众号查询户籍是否开通，如果已经开通，就可以去北方人才去取户口页和换取身份证了</p><p>5月19日户籍状态已开通，具体流程如下：<br><a href="https://zhuanlan.zhihu.com/p/143233125">https://zhuanlan.zhihu.com/p/143233125</a></p><p>最新（2020年9月15日）群友反馈，目前河西户口页也支持邮寄。真正做到了拿到天津户口，不用去一次天津。<br><img src="https://pic3.zhimg.com/80/v2-199735768099163dab8953c82bc76bb6_720w.jpg" alt="户口页"><br>ps: 如果你不买房或者其他不用到身份证的话，拿到户口页办理户口的整个过程已经完成。</p><h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p><a href="https://zhuanlan.zhihu.com/p/143207251">https://zhuanlan.zhihu.com/p/143207251</a></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>落户</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用confd+nacos以无侵入方式管理nginx</title>
    <link href="/2020/04/19/2020-04-19-confd-nacos-notes/"/>
    <url>/2020/04/19/2020-04-19-confd-nacos-notes/</url>
    
    <content type="html"><![CDATA[<h3 id="confd部署"><a href="#confd部署" class="headerlink" title="confd部署"></a>confd部署</h3><pre class="language-none"><code class="language-none">mkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;kelseyhightowerwget https:&#x2F;&#x2F;github.com&#x2F;nacos-group&#x2F;nacos-confd&#x2F;archive&#x2F;v0.19.2.tar.gztar -xvf v0.19.2.tar.gz -C $GOPATH&#x2F;src&#x2F;github.com&#x2F;kelseyhightowercd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kelseyhightower&#x2F;nacos-confd-0.19.1makesudo cp bin&#x2F;confd &#x2F;usr&#x2F;local&#x2F;bin.&#x2F;confd -versionconfd 0.17.0-dev (Git SHA: , Go Version: go1.14.2)</code></pre><a id="more"></a><h3 id="confd的配置"><a href="#confd的配置" class="headerlink" title="confd的配置"></a>confd的配置</h3><p>confd.toml为confd服务本身的配置文件，主要记录了使用的存储后端、协议、confdir等参数。<br>/etc/confd/confd.toml by default<br>存储后端nacos配置：<br><pre class="language-none"><code class="language-none">backend &#x3D; &quot;nacos&quot;confdir &#x3D; &quot;&#x2F;etc&#x2F;confd&quot;#log-level &#x3D; &quot;debug&quot;interval &#x3D; 5nodes &#x3D; [  &quot;http:&#x2F;&#x2F;192.168.1.101:8848&quot;,]scheme &#x3D; &quot;http&quot;watch &#x3D; true</code></pre></p><h3 id="创建confdir"><a href="#创建confdir" class="headerlink" title="创建confdir"></a>创建confdir</h3><p>confdir底下包含两个目录:</p><p>conf.d:confd的配置文件，主要包含配置的生成逻辑，例如模板源，后端存储对应的keys，命令执行等。<br>templates:配置模板Template，即基于不同组件的配置，修改为符合 Golang text templates的模板文件。</p><p>参数说明：</p><p>必要参数<br>dest (string) - The target file.<br>keys (array of strings) - An array of keys.<br>src (string) - The relative path of a configuration template.</p><p>可选参数<br>gid (int) - The gid that should own the file. Defaults to the effective gid.<br>mode (string) - The permission mode of the file.<br>uid (int) - The uid that should own the file. Defaults to the effective uid.<br>reload_cmd (string) - The command to reload config.<br>check_cmd (string) - The command to check config. Use `` to reference the rendered source template.<br>prefix (string) - The string to prefix to keys.<br><pre class="language-none"><code class="language-none">mkdir -p &#x2F;etc&#x2F;confd&#x2F;&#123;conf.d,templates&#125;cd conf.d ---newsinfo.toml[template]src &#x3D; &quot;newsinfo.conf.tmpl&quot;dest &#x3D; &quot;&#x2F;tmp&#x2F;newsinfo.conf&quot;#prefix &#x3D; &quot;&#x2F;nginx&#x2F;newsinfo&quot;keys &#x3D; [    &quot;&#x2F;nginx&#x2F;newsinfo&#x2F;dev&#x2F;newsinfo&#x2F;conf&quot;,]#check_cmd &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t -c &#123;&#123;.src&#125;&#125;&quot;#reload_cmd &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload&quot;---newsinfo.conf.tmpl&#123;&#123;$data :&#x3D; json (getv &quot;&#x2F;nginx&#x2F;newsinfo&#x2F;dev&#x2F;newsinfo&#x2F;conf&quot;)&#125;&#125;&#123;&#123;$locations :&#x3D; $data.location&#125;&#125;&#123;&#123;range $locations &#125;&#125;upstream &#123;&#123; $data.usage_prefix &#125;&#125;&#123;&#123; .interface &#125;&#125; &#123;     &#123;&#123; range .upstream.backend &#125;&#125;     server &#123;&#123; .&#125;&#125;; &#123;&#123;end&#125;&#125;&#125;&#123;&#123; end &#125;&#125;server &#123;    listen       80;    server_name  &#123;&#123; $data.server_name &#125;&#125;    location &#x2F; &#123;        root   html;        index  index.html index.htm;        proxy_connect_timeout    30s;        proxy_set_header Host $host:$server_port;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_pass     http:&#x2F;&#x2F;debug_ready_sohuzixun;    &#125;    &#123;&#123;range $locations &#125;&#125;    location ^~ &#x2F;&#123;&#123; .interface &#125;&#125; &#123;        proxy_pass  http:&#x2F;&#x2F;&#123;&#123; $data.usage_prefix &#125;&#125;&#123;&#123; .interface &#125;&#125;;        proxy_connect_timeout   30s;        proxy_set_header Host $host:$server_port;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    &#125;    &#123;&#123; end &#125;&#125;&#125;</code></pre></p><h3 id="confd启动"><a href="#confd启动" class="headerlink" title="confd启动"></a>confd启动</h3><p>confd支持以daemon或者onetime两种模式运行<br><pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;confd -config-file &#x2F;etc&#x2F;confd&#x2F;conf&#x2F;confd.tomlnohup &#x2F;usr&#x2F;local&#x2F;bin&#x2F;confd -config-file &#x2F;etc&#x2F;confd&#x2F;conf&#x2F;confd.toml &gt; confd.log 2&gt;&amp;1 &amp;</code></pre></p><h3 id="nacos部署"><a href="#nacos部署" class="headerlink" title="nacos部署"></a>nacos部署</h3><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><p>问题描述：<br> -bash: .confd/: 无法执行二进制文件<br>问题解决：<br>同步到服务器上，make</p><p>links:<br><a href="https://github.com/kelseyhightower/confd/tree/master/docs">https://github.com/kelseyhightower/confd/tree/master/docs</a></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>confd nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Grafana的版本升级和数据迁移</title>
    <link href="/2020/03/16/2020-03-16-grafana-update/"/>
    <url>/2020/03/16/2020-03-16-grafana-update/</url>
    
    <content type="html"><![CDATA[<p>下载最新的grafana版本<br><a href="https://grafana.com/grafana/download">官网下载地址</a></p><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.grafana.com&#x2F;oss&#x2F;release&#x2F;grafana-6.7.4.linux-amd64.tar.gztar -zxvf grafana-6.7.4.linux-amd64.tar.gz</code></pre><a id="more"></a><p>修改<br>/etc/systemd/system/grafana-server.service<br><pre class="language-none"><code class="language-none">[Unit]Description&#x3D;Grafana 6.7Documentation&#x3D;http:&#x2F;&#x2F;docs.grafana.orgWants&#x3D;network-online.targetAfter&#x3D;network-online.target[Service]Type&#x3D;notifyRestart&#x3D;on-failureWorkingDirectory&#x3D;&#x2F;data&#x2F;apps&#x2F;opt&#x2F;grafanaRuntimeDirectory&#x3D;grafanaRuntimeDirectoryMode&#x3D;0750ExecStart&#x3D;&#x2F;data&#x2F;apps&#x2F;opt&#x2F;grafana&#x2F;bin&#x2F;grafana-server --config&#x3D;&#x2F;data&#x2F;apps&#x2F;opt&#x2F;grafana&#x2F;conf&#x2F;defaults.iniLimitNOFILE&#x3D;10000TimeoutStopSec&#x3D;20[Install]WantedBy&#x3D;multi-user.target</code></pre></p><p>迁移之前grafana下的数据到data目录下，完成数据迁移。</p><p>配置文件<br><pre class="language-none"><code class="language-none">域名转发根目录跳转# The full public facing url#root_url &#x3D; %(protocol)s:&#x2F;&#x2F;%(domain)s:%(http_port)s&#x2F;root_url &#x3D; http:&#x2F;&#x2F;xxx.&#x2F;grafana开启匿名登陆#################################### Anonymous Auth ######################[auth.anonymous]# enable anonymous accessenabled &#x3D; true</code></pre></p><p>部署好新的grafna后，修改nginx代理解析即可。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx实现四层代理</title>
    <link href="/2020/03/14/2020-03-14-nginx-tcp-proxy-stream/"/>
    <url>/2020/03/14/2020-03-14-nginx-tcp-proxy-stream/</url>
    
    <content type="html"><![CDATA[<p>Nginx 从1.9.0开始发布ngx_stream_core_module模块，该模块支持tcp代理及负载均衡。</p><p>在编译时通过指定–with-stream参数来激活这个模块。</p><p>Nginx编译后参数如下<br><pre class="language-none"><code class="language-none">-prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-pcre --with-stream --with-http_perl_module --with-http_secure_link_module --with-http_auth_request_module --with-http_sub_module --with-http_gzip_static_module --add-module&#x3D;..&#x2F;nginx-module-vts --add-module&#x3D;..&#x2F;nginx-upsync-module</code></pre><br><a id="more"></a></p><h3 id="实现SSH转发"><a href="#实现SSH转发" class="headerlink" title="实现SSH转发"></a>实现SSH转发</h3><p>stream代码块与http代码块同级别<br><pre class="language-none"><code class="language-none">stream &#123;      upstream ssh_proxy &#123;        hash $remote_addr consistent;        server 10.16.76.116:22;        server 10.16.76.119:22;    &#125;    server &#123;        listen 2222;        proxy_connect_timeout 1s;        proxy_timeout 300s;        proxy_pass ssh_proxy;            &#125;&#125;</code></pre></p><h3 id="MYSQL负载均衡"><a href="#MYSQL负载均衡" class="headerlink" title="MYSQL负载均衡"></a>MYSQL负载均衡</h3><pre class="language-none"><code class="language-none">stream &#123;    upstream mysql_proxy &#123;#hash $remote_addr consistent;        server 10.18.70.70:3307;    &#125;    server &#123;        listen 3333;        proxy_connect_timeout 1s;        proxy_timeout 300s;        proxy_pass mysql_proxy;    &#125;&#125;</code></pre><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><pre class="language-none"><code class="language-none">ssh -p 2222  root@nginx_ipmysql -P 3333  -h nginx_ip -u mysql_user -p</code></pre><h3 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h3><p>stream日志模块 nginx 1.11.4之后版本才支持。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus Grafana学习笔记</title>
    <link href="/2020/03/13/2020-03-14-grafana-prometheus-notes-md/"/>
    <url>/2020/03/13/2020-03-14-grafana-prometheus-notes-md/</url>
    
    <content type="html"><![CDATA[<h3 id="prometheus-大内存问题"><a href="#prometheus-大内存问题" class="headerlink" title="prometheus 大内存问题"></a>prometheus 大内存问题</h3><p>随着规模变大，prometheus需要的cpu和内存都会升高，内存一般先达到瓶颈，这个时候要么加内存，要么集群分片减少单机指标。<br>原因：<br>1、prometheus 的内存消耗主要是因为每隔2小时做一个 block 数据落盘，落盘之前所有数据都在内存里面，因此和采集量有关。<br>2、加载历史数据时，是从磁盘到内存的，查询范围越大，内存越大。这里面有一定的优化空间<br>3、一些不合理的查询条件也会加大内存，如 group、大范围rate</p><p>sample 数量超过了 200 万，就不要单实例了，做下分片，<br>然后通过victoriametrics，thanos，trickster等方案合并数据</p><p>使用了thanos方案</p><a id="more"></a><p>磁盘预估方法</p><p>Bytes per Sample<br>rate(prometheus_tsdb_compaction_chunk_size_bytes_sum[1d])/rate(prometheus_tsdb_compaction_chunk_samples_sum[1d])</p><p>每秒获取的样本数<br>rate(prometheus_tsdb_head_samples_appended_total[1h])</p><p>磁盘容量预估<br>磁盘大小 = 保留时间 <em> 每秒获取样本数 </em> 样本大小</p><p>2h <em> 51935.72524407252 </em> 1.5 Bytes</p><p>2<em>60</em>60<em>1.6</em>51935=570M</p><h3 id="prometheus-内存-磁盘预估"><a href="#prometheus-内存-磁盘预估" class="headerlink" title="prometheus 内存 磁盘预估"></a>prometheus 内存 磁盘预估</h3><p>查看多少台node_exporter<br>count(node_exporter_build_info)</p><p>908 台机器 - 180 视频商业</p><p>node<em>export<br>curl -s <a href="http://localhost:9100/metrics">http://localhost:9100/metrics</a> | grep -v “#”|grep “node</em>“ |wc -l<br>2448</p><p>测量点(即样本数量)</p><p>指标统计</p><p>Promethues 压缩样本使用磁盘大小公式为 :<br>compact_data_disk_usage = (romethues 压缩样本使用磁盘大小公式为 :<br>compact_data_disk_usage = 2448/prometheus.node.exporter.scrape_interval <em> nodeNum </em> prometheus.storage.retention.time (in seconds) * 单个样本平均大小(1-2 bytes)</p><p>2448/15<em>908</em>(24<em>60</em>60)*2=23.84789G</p><p>WAL 文件大小取决于Prometheus 留存于内存的活跃样本的大小. 而留存于内存的活跃样本的大小又取决于每秒获取样本数和活跃样本留存内存时间.<br>记录活跃样本信息的 WAL 文件都是 raw data, 故大小比经过编码之后的样本大得多.<br>Prometheus 官方文档中说明至少会保存3个 write-ahead log files(每一个最大为128M), 如果实际使用中留存内存的样本数量非常大,<br>那么用来记录样本的 WAL 文件可能需要不止三个</p><p>计算 wal file 之前需要计算留存于内存的活跃样本占用内存大小<br>active_data_mem_uage = (534 / prometheus.node.exporter.scrape_interval + 481 / prometheus.tdh.exporter.scrape_interval) <em> nodeNum </em> prometheus.max-block-duration(in seconds) * 单个样本平均大小(1-2 bytes)</p><p>active_data_mem_uage = 2448/15 <em> 908 </em> (24 <em> 60 </em> 60) <em> 2 = 25606471680 bytes = 23.84789G<br>Prometheus 编码之后的样本平均大小为1~2 bytes, 而未编码的 double类型数据为 8 bytes, 故raw data最大可为编码之后的样本数据的八倍. 可以粗略的认为 WAL file 大小和 样本 raw data近似相等, 故可以得出公式:<br>wal_file_disk_usage = active_data_mem_uage </em> (8 / 1) = 190G</p><p>综上所述, total_disk_usage = compact_data_disk_usage + wal_file_disk_usage, 考虑集群的扩展性，建议预留磁盘空间为 total_disk_usage * 5.</p><h3 id="thanos部署"><a href="#thanos部署" class="headerlink" title="thanos部署"></a>thanos部署</h3><p>thanos version 2.13.0 版本</p><p>prometheus部署<br>/etc/systemd/system/prometheus.service<br><pre class="language-none"><code class="language-none">[Unit]Description&#x3D;prometheus_mediaAfter&#x3D;network.target[Service]Type&#x3D;simpleUser&#x3D;rootExecStart&#x3D;&#x2F;data&#x2F;apps&#x2F;prometheus&#x2F;prometheus --config.file&#x3D;&#x2F;data&#x2F;apps&#x2F;prometheus&#x2F;prometheus.yml --storage.tsdb.path&#x3D;&#x2F;data&#x2F;apps&#x2F;prometheus&#x2F;data --storage.tsdb.retention.time&#x3D;1d --web.enable-admin-api --web.enable-lifecycleRestart&#x3D;on-failure[Install]WantedBy&#x3D;multi-user.target####prometheus.service#prometheus_media.service#prometheus_shipin#prometheus_zixun</code></pre></p><p>thanos启动<br><pre class="language-none"><code class="language-none">sidecar启动命令：nohup .&#x2F;thanos sidecar --tsdb.path &#x2F;data&#x2F;apps&#x2F;prometheus&#x2F;media --prometheus.url http:&#x2F;&#x2F;localhost:9090 --http-address 0.0.0.0:19191 --grpc-address 0.0.0.0:19091 &gt; sd_media.log 2&gt;&amp;1 &amp;nohup .&#x2F;thanos sidecar --tsdb.path &#x2F;data&#x2F;apps&#x2F;prometheus&#x2F;shipin --prometheus.url http:&#x2F;&#x2F;localhost:9092 --http-address 0.0.0.0:19192 --grpc-address 0.0.0.0:19092 &gt; sd_shipin.log 2&gt;&amp;1 &amp;nohup .&#x2F;thanos sidecar --tsdb.path &#x2F;data&#x2F;apps&#x2F;prometheus&#x2F;zixun --prometheus.url http:&#x2F;&#x2F;localhost:9095 --http-address 0.0.0.0:19193 --grpc-address 0.0.0.0:19093 &gt; sd_zixun.log 2&gt;&amp;1 &amp;query启动命令：nohup .&#x2F;thanos query --http-address 0.0.0.0:29090 --grpc-address 0.0.0.0:29091 --query.replica-label monitor --store 10.16.12.54:19091 --store 10.16.12.54:19092 --store 10.18.94.40:19093 &gt; qu_media.log 2&gt;&amp;1 &amp;nohup .&#x2F;thanos query --http-address 0.0.0.0:29092 --grpc-address 0.0.0.0:29093 --query.replica-label monitor --store 10.16.12.54:19091 --store 10.16.12.54:19092 --store 10.18.94.40:19093 &gt; qu_shipin.log 2&gt;&amp;1 &amp;nohup .&#x2F;thanos query --http-address 0.0.0.0:29094 --grpc-address 0.0.0.0:29095 --query.replica-label monitor --store 10.16.12.54:19091 --store 10.16.12.54:19092 --store 10.18.94.40:19093 &gt; qu_zixun.log 2&gt;&amp;1 &amp;</code></pre><br>nginx负载均衡查询端<br><pre class="language-none"><code class="language-none">upstream thanos &#123;    server 192.168.1.111:29094 max_fails&#x3D;2 fail_timeout&#x3D;15s;    server 192.168.1.112:29090 max_fails&#x3D;2 fail_timeout&#x3D;15s;    server 192.168.1.113:29092 max_fails&#x3D;2 fail_timeout&#x3D;15s;&#125;server &#123;    listen       80;    server_name  xxx;    #charset koi8-r;    access_log  &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;thanos.log;    location &#x2F; &#123;        proxy_connect_timeout    30s;        proxy_set_header Host $host:$server_port;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        access_log    &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;thanso.log;        proxy_pass http:&#x2F;&#x2F;thanos;    &#125;&#125;</code></pre></p><h3 id="Grafana设置免密登录"><a href="#Grafana设置免密登录" class="headerlink" title="Grafana设置免密登录"></a>Grafana设置免密登录</h3><pre class="language-none"><code class="language-none">[auth.anonymous]enabled &#x3D; trueorg_name &#x3D; Main Org.org_role &#x3D; Viewer</code></pre><h3 id="Grafana设置"><a href="#Grafana设置" class="headerlink" title="Grafana设置"></a>Grafana设置</h3><p>label_values(node_uname_info, job)</p><p>instance=~”$node”,mode=”system”</p><h3 id="Grafana添加告警"><a href="#Grafana添加告警" class="headerlink" title="Grafana添加告警"></a>Grafana添加告警</h3><p>开启anonymous后，ui Server Admin设置orgs 设置Main Org. 与org_name一致。</p><p>PromQL<br>{} 过滤时间序列数据<br>[] 范围样本区间</p><h3 id="常用运维命令"><a href="#常用运维命令" class="headerlink" title="常用运维命令"></a>常用运维命令</h3><pre class="language-none"><code class="language-none">.&#x2F;tsdb ls custom_allBLOCK ULID                  MIN TIME       MAX TIME       NUM SAMPLES  NUM CHUNKS  NUM SERIES01E4JAJCEZZRTTQ56CM1C1VKW1  1585447200000  1585454400000  373837607    3112298     78308501E4JHE3EKB5252S5060RS88GF  1585454400000  1585461600000  373910606    3114077     783026</code></pre><h3 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h3><p><a href="https://prometheus.io/docs/guides/node-exporter/">https://prometheus.io/docs/guides/node-exporter/</a><br><a href="http://support.transwarp.cn/t/topic/3226">http://support.transwarp.cn/t/topic/3226</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Cluster搭建、扩容、缩容</title>
    <link href="/2019/10/27/2019-10-27-redis-cluster-install-manual/"/>
    <url>/2019/10/27/2019-10-27-redis-cluster-install-manual/</url>
    
    <content type="html"><![CDATA[<h4 id="集群机器列表"><a href="#集群机器列表" class="headerlink" title="集群机器列表"></a>集群机器列表</h4><p>redis版本 redis-cli 3.2.11<br><pre class="language-none"><code class="language-none">10.16.76.11610.16.76.11710.16.76.119集群安装跑ansible脚本master 10.16.76.116:6000  10.16.76.117:6000  10.16.76.119:6000    slave10.16.76.116:700010.16.76.117:700010.16.76.119:7000</code></pre><br><a id="more"></a></p><h4 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h4><p>配置主节点</p><p>方法1:<br>redis-trib.rb 直接初始化机器。</p><p>方法2:</p><p>a. 添加节点： cluster meet ip port<br>CLUSTER nodes<br>CLUSTER info</p><p>b. 分配槽点 16384<br>5462+5461+5461</p><p>sh addslots.sh分配槽点</p><p>cluster addslots {0…5461}<br>cluster addslots {5462…10922}<br>cluster addslots {10923…16384}</p><p>以上cluste就完成了，是单点的。<br>c.保证各个节点的高可用，给每个主节点添加一个从节点。<br>cluster meet ip port</p><p>slave节点上关联,必须在对应的从节点上执行<br>cluster replicate node_id </p><pre class="language-none"><code class="language-none">3d401353114a1fd6359e51859f022dfdc5861bc9 10.16.76.116:6000 myself,master - 0 0 1 connected 0-5461ec1e5df312f947c540cc64fac3cfe3aa8df1799a 10.16.76.117:6000 master - 0 1571987989678 0 connected 5462-109220af9d4868039dfe5c9dd212d75695a2607ada12f 10.16.76.119:6000 master - 0 1571987994688 2 connected 10923-16383</code></pre><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><p>set a,b,c分别hash到不同节点<br><pre class="language-none"><code class="language-none">get a-&gt; Redirected to slot [15495] located at 10.16.76.119:6000&quot;1&quot;10.16.76.119:6000&gt; get b-&gt; Redirected to slot [3300] located at 10.16.76.116:6000&quot;2&quot;10.16.76.116:6000&gt; get c-&gt; Redirected to slot [7365] located at 10.16.76.117:6000&quot;3&quot;</code></pre></p><h3 id="Redis-Cluster常用命令"><a href="#Redis-Cluster常用命令" class="headerlink" title="Redis Cluster常用命令"></a>Redis Cluster常用命令</h3><pre class="language-none"><code class="language-none">CLUSTER info：打印集群的信息。CLUSTER nodes：列出集群当前已知的所有节点（node）的相关信息。CLUSTER meet &lt;ip&gt; &lt;port&gt;：将ip和port所指定的节点添加到集群当中。CLUSTER replicate &lt;node_id&gt;：将当前节点设置为指定节点的从节点。CLUSTER saveconfig：手动执行命令保存保存集群的配置文件，集群默认在配置修改的时候会自动保存配置文件。CLUSTER failover：手动进行故障转移，在slave上执行。CLUSTER keyslot &lt;key&gt;：列出key被放置在哪个槽上。CLUSTER countkeysinslot &lt;slot&gt;：返回槽目前包含的键值对数量。CLUSTER getkeysinslot &lt;slot&gt; &lt;count&gt;：返回count个槽中的键。迁移槽和数据相关命令CLUSTER setslot &lt;slot&gt; importing &lt;node_id&gt; 从 node_id (sourceNodeId)指定的节点中导入槽 slot 到本节点CLUSTER setslot &lt;slot&gt; migrating &lt;node_id&gt; 将本节点的槽迁移到指定的节点node_id (targetNodeId)中。CLUSTER getkeysinslot &lt;slot&gt; &lt;count&gt;：源节点循环执行，获取count个属于槽&#123;slot&#125;的键。在源节点迁移槽位中的key到目标节点：MIGRATE host port key destination-db timeout [COPY] [REPLACE]逐个迁移：migrate 10.16.76.116 8000 key:test:x1 0 5000 replace批量迁移：migrate 10.16.76.116 8000 &quot;&quot; 0 5000 keys key:test:x1 key:test:x2 key:test:x3CLUSTER setslot &lt;slot&gt; node &lt;node_id&gt; :通知槽分配给目标节点，node_id (targetNodeId)cluster setslot &lt;slot&gt; stable取消 slot 的导入（import）或者迁移（migrate）。</code></pre><h3 id="集群扩容"><a href="#集群扩容" class="headerlink" title="集群扩容"></a>集群扩容</h3><pre class="language-none"><code class="language-none">10.16.76.116:800010.16.76.117:800010.16.76.119:8000原集群槽点5461-5460-54604096-4096-4096-40963d401353114a1fd6359e51859f022dfdc5861bc9 10.16.76.116:6000 master - 0 1572246866662 8 connected 0-5461f9fb5268c416b82dc4ea7d4948895454be4186a0 10.16.76.116:8000 master - 0 1572246863153 0 connected0af9d4868039dfe5c9dd212d75695a2607ada12f 10.16.76.119:6000 master - 0 1572246869667 2 connected 10923-16383ec1e5df312f947c540cc64fac3cfe3aa8df1799a 10.16.76.117:6000 master - 0 1572246864657 9 connected 5462-10922</code></pre><h3 id="迁移数据流程"><a href="#迁移数据流程" class="headerlink" title="迁移数据流程"></a>迁移数据流程</h3><pre class="language-none"><code class="language-none">目的节点：CLUSTER setslot 4096 importing 3d401353114a1fd6359e51859f022dfdc5861bc9源节点：CLUSTER setslot 4096 migrating f9fb5268c416b82dc4ea7d4948895454be4186a0获取count属于槽slot的键:CLUSTER getkeysinslot 4096 100迁移数据到目的节点：migrate 10.16.76.116 8000 key:test:5028 0 5000 replacemigrate 10.16.76.116 8000 &quot;&quot; 0 5000 keys key:test:68253 key:test:79212 遍历所有主节点执行：CLUSTER setslot 4096 node f9fb5268c416b82dc4ea7d4948895454be4186a0</code></pre><h3 id="集群收缩"><a href="#集群收缩" class="headerlink" title="集群收缩"></a>集群收缩</h3><pre class="language-none"><code class="language-none">redis-trib.rb reshard 10.16.76.116:6000下线节点槽点迁出完成后，剩剩下的步骤需要让集群忘记该节点。线上操场不建议直接使用cluster forget下线节点建议使用redis-trib.rb del-node &#123;host:port&#125; &#123;downNodeId&#125;从节点redis-trib.rb del-node 10.16.76.117:8000 75202671eb18e504357ea8761ab6dc729b8526a2主节点redis-trib.rb del-node 10.16.76.116:8000 f9fb5268c416b82dc4ea7d4948895454be4186a0</code></pre><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>主观下线： 指某个节点认为另一个节点不可用，即下线状态。</p><p>客观下线： 集群内多个节点都认为该节点不可用。</p><h3 id="集群倾斜"><a href="#集群倾斜" class="headerlink" title="集群倾斜"></a>集群倾斜</h3><p>数据倾斜</p><p>redis-trib.rb info 查看节点槽点不均的情况。<br>hash数据分别，导致集群qps差距很大。</p><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><p>问题描述：<br>Moving slot 4096 from 10.16.76.116:8000 to 10.16.76.116:6000:<br>[ERR] Calling MIGRATE: ERR Syntax error, try CLIENT (LIST | KILL | GETNAME | SETNAME | PAUSE | REPLY)</p><p>问题解决：<br>1、ruby gem安装的redis库，版本不能使用最新的4.0，否则redis-trib.rb reshard 127.0.0.1:7000 重新分片时会报语法错误。<br>   卸载最新redis库，gem uninstall redis<br>   安装3.x版本，gem install redis -v 3.3.5 测试3.2.1到3.3.5都可以，4.x以上的分片报错<br>2、使用fix来进行修复，具体命令如下：<br>   redis-trib.rb fix 10.16.76.116:6000</p><h3 id="redis参数"><a href="#redis参数" class="headerlink" title="redis参数"></a>redis参数</h3><p>//connectionTimeout 连接超时（默认2000ms）<br>//soTimeout 响应超时（默认2000ms）</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis-migrate-tool使用详解</title>
    <link href="/2019/08/25/2019-08-25-redis-migrate-tool/"/>
    <url>/2019/08/25/2019-08-25-redis-migrate-tool/</url>
    
    <content type="html"><![CDATA[<h3 id="rmt介绍"><a href="#rmt介绍" class="headerlink" title="rmt介绍"></a>rmt介绍</h3><p>redis-migrate-tool 是维品会开源的一款redis数据迁移工具，基于redis复制，快速，稳定，github地址为：<a href="https://github.com/vipshop/redis-migrate-tool">https://github.com/vipshop/redis-migrate-tool</a> 。</p><ul><li>快速。</li><li>多线程。</li><li>基于redis复制。</li><li>实时迁移。</li><li>迁移过程中，源集群不影响对外提供服务。</li><li>异构迁移。</li><li>支持Twemproxy集群，redis cluster集群，rdb文件 和 aof文件。</li><li>过滤功能。</li><li>当目标集群是Twemproxy，数据会跳过Twemproxy直接导入到后端的redis。</li><li>迁移状态显示。</li><li>完善的数据抽样校验(-C redis_check)。</li></ul><p>划重点 实时迁移 迁移过程中，源集群不影响对外提供服务<br><a id="more"></a></p><h3 id="安装redis-migrate-tool"><a href="#安装redis-migrate-tool" class="headerlink" title="安装redis-migrate-tool"></a>安装redis-migrate-tool</h3><p>依赖</p><pre class="language-none"><code class="language-none">yum -y install automake libtool autoconf bzip2 git</code></pre><p>构建<br><pre class="language-none"><code class="language-none">$ cd redis-migrate-tool$ autoreconf -fvi$ .&#x2F;configure$ make$ src&#x2F;redis-migrate-tool -h</code></pre></p><p>警告</p><p>在运行工具之前，确保源redis所在的机器有足够的内存可以允许至少一个redis生成.rdb文件，如果源机器有大量足够的内存允许所有的redis生成.rdb，可以在配置文件rmt.conf设置source_safe: false。</p><p>下列命令不支持传播给target redis组，因为这些命令下的keys可能交叉了不同的目标redis节点。<br><pre class="language-none"><code class="language-none">RENAME,RENAMENX,RPOPLPUSH,BRPOPLPUSH,FLUSHALL,FLUSHDB,BITOP,MOVE,GEORADIUS,GEORADIUSBYMEMBE</code></pre></p><h3 id="redis-migrate-tool-命令详解"><a href="#redis-migrate-tool-命令详解" class="headerlink" title="redis-migrate-tool 命令详解"></a>redis-migrate-tool 命令详解</h3><p>出现下列帮助说明表示安装成功<br><pre class="language-none"><code class="language-none">This is redis-migrate-tool-0.1.0Usage: redis-migrate-tool [-?hVdIn] [-v verbosity level] [-o output file]                  [-c conf file] [-C command]                  [-f source address] [-t target address]                  [-p pid file] [-m mbuf size] [-r target role]                  [-T thread number] [-b buffer size]Options:  -h, --help             : this help  -V, --version          : show version and exit  -d, --daemonize        : run as a daemon  -I, --information      : print some useful information  -n, --noreply          : don&#39;t receive the target redis reply  -v, --verbosity&#x3D;N      : set logging level (default: 5, min: 0, max: 11)  -o, --output&#x3D;S         : set logging file (default: stderr)  -c, --conf-file&#x3D;S      : set configuration file (default: rmt.conf)  -p, --pid-file&#x3D;S       : set pid file (default: off)  -m, --mbuf-size&#x3D;N      : set mbuf size (default: 512)  -C, --command&#x3D;S        : set command to execute (default: redis_migrate)  -r, --source-role&#x3D;S    : set the source role (default: single, you can input: single, twemproxy or redis_cluster)  -R, --target-role&#x3D;S    : set the target role (default: single, you can input: single, twemproxy or redis_cluster)  -T, --thread&#x3D;N         : set how many threads to run the job(default: 4)  -b, --buffer&#x3D;S         : set buffer size to run the job (default: 140720309534720 byte, unit:G&#x2F;M&#x2F;K)  -f, --from&#x3D;S           : set source redis address (default: 127.0.0.1:6379)  -t, --to&#x3D;S             : set target redis group address (default: 127.0.0.1:6380)  -s, --step&#x3D;N           : set step (default: 1)Commands:    redis_migrate        : Migrate data from source group to target group.    redis_check          : Compare data between source group and target group. Default compare 1000 keys. You can set a key count behind.    redis_testinsert     : Just for test! Insert some string, list, set, zset and hash keys into the source redis group. Default 1000 keys. You can set key type and key count behind.</code></pre><br>部分指令解析：</p><p>-h, –help：帮助<br>-V, –version：显示版本<br>-d, –daemonize：后台进程运行<br>-I, –information：打印一些有用的信息，包括可以解析的指令（126个），不支持的指令（14个）等等<br>-v, –verbosity=N：设置日志等级。(默认: 5, 最低: 0, 最高: 11)<br>-o, –output=S：设置输出的日志文件<br>-c, –conf-file=S：设置配置文件。(默认: rmt.conf)<br>-C, –command=S：设置运行的指令(默认: redis_migrate ，迁移)。redis_check 比较源和目的，默认1000个样本key。redis_testinsert测试插入Keys，默认所有类型总共1000个。<br>-T, –thread=N：设置多少个线程用来运行工具。(默认: 4)</p><ol><li>运行迁移<pre class="language-none"><code class="language-none">$ src&#x2F;redis-migrate-tool -c rmt.conf -o log -d</code></pre>注意：-d指定为后台运行，如果再次运行可能需要杀死占用当前端口的进程。netstat -tnulp查看找到redis-migrate-tool的端口号，kill -9 [端口号]杀死再运行。</li></ol><p>指定输出日志文件为log，可通过tail -200 log等查看日志。</p><ol><li>抽样检查<pre class="language-none"><code class="language-none">$ src&#x2F;redis-migrate-tool -c rmt.conf -o log -C redis_checkCheck job is running...Checked keys: 1000Inconsistent value keys: 0Inconsistent expire keys : 0Other check error keys: 0Checked OK keys: 1000All keys checked OK!Check job finished, used 1.041s</code></pre>抽样检查源组和目标组的数据，默认为1000个。如果需要检查更多的数据，<pre class="language-none"><code class="language-none">$ src&#x2F;redis-migrate-tool -c rmt.conf -o log -C &quot;redis_check 200000&quot;Check job is running...Checked keys: 200000Inconsistent value keys: 0Inconsistent expire keys : 0Other check error keys: 0Checked OK keys: 200000All keys checked OK!Check job finished, used 11.962s</code></pre></li></ol><h3 id="rmt-conf配置文件"><a href="#rmt-conf配置文件" class="headerlink" title="rmt.conf配置文件"></a>rmt.conf配置文件</h3><p>配置文件包含三部分：[source], [target] 和 [common]</p><p>迁移工具的来源（source）可以是：单独的redis实例，twemproxy集群，redis cluster，rdb文件，aof文件。<br>迁移工具的目标（target）可以是：单独的redis实例，twemproxy集群，redis cluster，rdb文件。<br><pre class="language-none"><code class="language-none">[source]&#x2F;[target]：type：single：单独的redis实例twemproxy：twemproxy集群redis cluster：redis集群rdb file：.rdb文件aof file：.aof文件servers：redis地址组，如果type:twemproxy，则为twemproxy配置文件，如果type:rdb file，则为rdb文件名。redis_auth：连接redis服务的认证auth。timeout：读写redis服务的超时时间(ms)，默认为120000mshash：哈希方法名。仅当type:twemproxy有效。可以为one_at_a_time、md5、crc16、crc32、crc32a、fnv1_64、fnv1a_64、fnv1_32、fnv1a_32、hsieh、murmur、jenkins。hash_tag：用来哈希的关键key的两个字符，例如&quot;&#123;&#125;&quot; 或 &quot;$$&quot;。仅当type:twemproxy有效。只要标签内的关键key是相同的，能够将不同的键映射到同一服务器。distribution：键的分布模式。仅当type:twemproxy有效。可以为 ketama、modula、random。[common]：listen：监听的地址和端口。默认为127.0.0.1:8888max_clients：可监听端口的最大连接数。默认为100threads：工具可用的最多线程数。默认为cpu内核数。step：解析请求的步数。默认为1，数字越大，迁移越快，需要越多的内存。mbuf_size：请求的缓存大小（M），默认为512Mnoreply：是否检查目标组的回复，默认为falsesource_safe：是否保护源组机器的内存安全。默认为true，工具将允许在源组的同一台机器同时只有一个redis生成.rdb。dir：工作目录。用来存储文件，例如rdb文件，默认为当前目录。filter：过滤不符合表达式的Key，默认为NULL，支持通配符为glob-style风格? ：1个任意字符。例如 h?llo 匹配 hello, hallo , hxllo* ：0个或多个任意字符。例如 h*llo 匹配 hllo ， heeeello[characters]：匹配任意一个方括号内的字符，比如[abc]，要么匹配a，要么匹配b，要么匹配c。例如 h[ae]llo 匹配 hello ， hallo, 但不匹配 hillo。[^character]：排除方括号内的字符。例如h[^e]llo 匹配 hallo, hbllo, ... 但不匹配 hello。[character-character]：表示2个字符范围内的都可以匹配，如[a-z]，[0-9]。例如h[a-b]llo 匹配 hallo 和 hbllo。\用来转移特殊字符。</code></pre><br>更多例子见<br><a href="https://github.com/vipshop/redis-migrate-tool">https://github.com/vipshop/redis-migrate-tool</a></p><h3 id="监听redis-migrate-tool"><a href="#监听redis-migrate-tool" class="headerlink" title="监听redis-migrate-tool"></a>监听redis-migrate-tool</h3><p>可以使用redis-cli连接工具，监听地址和端口设置在配置文件的[common]下的listen，默认为127.0.0.1:8888</p><ol><li><p>info指令</p><pre class="language-none"><code class="language-none">$redis-cli -h 127.0.0.1 -p 8888127.0.0.1:8888&gt; info# Serverversion:0.1.0                                   # 工具的版本号os:Linux 2.6.32-573.12.1.el6.x86_64 x86_64      # 操作系统信息multiplexing_api:epoll                          # 多路复用接口gcc_version:4.4.7                               # gcc版本process_id:9199                                 # 工具的进程idtcp_port:8888                                   # 工具监听的tcp端口号uptime_in_seconds:1662                          # 工具运行的时间（秒）uptime_in_days:0                                # 工具运行的时间（天）config_file:&#x2F;ect&#x2F;rmt.conf                       # 工具运行的配置文件名称# Clientsconnected_clients:1                             # 当前连接的客户端数max_clients_limit:100                           # 客户端同时连接最大限制total_connections_received:3                    # 至今总共连接# Memorymem_allocator:jemalloc-4.0.4# Groupsource_nodes_count:32                          # 源redis组的节点数target_nodes_count:48                          # 目的redis组的节点数# Statsall_rdb_received:1                             # 是否已接收源redis组节点的所有.rdb文件all_rdb_parsed:1                               # 是否已解析源redis组节点的所有.rdb文件all_aof_loaded:0                               # 是否已加载源redis组节点的所有.aof文件rdb_received_count:32                          # 已接收的源redis组节点.rdb文件数rdb_parsed_count:32                            # 已解析的源redis组节点.rdb文件数aof_loaded_count:0                             # 已加载的源redis组节点.aof文件数total_msgs_recv:7753587                        # 从源组节点接收的所有消息数total_msgs_sent:7753587                        # 所有已发送目标节点并且收到的响应的消息数total_net_input_bytes:234636318                # 从源组接收的输入字节的总数total_net_output_bytes:255384129               # 已发送到目标组的输出字节的总数total_net_input_bytes_human:223.77M            # 同total_net_input_bytes，而是转换成人类可读的。total_net_output_bytes_human:243.55M           # 同total_net_output_bytes，而是转换成人类可读的。total_mbufs_inqueue:0                          # 来自源组的mbufs输入缓存的命令数据(不包括rdb数据)total_msgs_outqueue:0                          # 将被发送到目标组，和已被发送到目标，但正在等待响应的消息数</code></pre></li><li><p>shutdown [seconds|asap]</p></li></ol><p>执行指令后的行为：</p><p>停止从源redis复制<br>尝试将工具中的缓存数据发送到目标redis<br>Redis-migrate-tool 停止，退出<br>参数：</p><p>seconds：工具用于在退出之前将缓存的数据发送到目标redis的大多数时间。默认为10秒。<br>asap：不关心缓存的数据，立即退出。<br>例如，<br><pre class="language-none"><code class="language-none">$ redis-cli -h 127.0.0.1 -p 8888127.0.0.1:8888&gt; shutdown 5OK(5.00s)</code></pre></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不适用redis4.0.x及以上版本<br>当源中存在多库时，避免发生键值覆盖，最好换别的方式迁移<br>多源要不都不带密码，要不源是同一个密码，否则无法启动，在线变更密码可以通过config set requirepass [密码]</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis性能分析工具redis-faina</title>
    <link href="/2019/07/07/2019-07-07-redis-faina/"/>
    <url>/2019/07/07/2019-07-07-redis-faina/</url>
    
    <content type="html"><![CDATA[<p>redis-faina是一个通过解析redis的MONITOR命令，从而对redis实例进行性能诊断的工具。<br>该工具使用虽然简单，但是功能还是很不错，对于定位线上redis性能问题，确实是一把利器。</p><h3 id="通过redis-MONITOR命令保存文件用于分析"><a href="#通过redis-MONITOR命令保存文件用于分析" class="headerlink" title="通过redis MONITOR命令保存文件用于分析"></a>通过redis MONITOR命令保存文件用于分析</h3><pre class="language-none"><code class="language-none">redis-cli -h 192.168.1.110 -p 6700 monitor |head -n 5000 &gt; redis-6700.txtredis-cli -h 192.168.1.111 -p 6701 monitor |head -n 5000 &gt; redis-6701.txt</code></pre><a id="more"></a><h3 id="redis-faina读取MONITOR日志进行分析："><a href="#redis-faina读取MONITOR日志进行分析：" class="headerlink" title="redis-faina读取MONITOR日志进行分析："></a>redis-faina读取MONITOR日志进行分析：</h3><pre class="language-none"><code class="language-none">.&#x2F;redis-faina.py ..&#x2F;redis_monitor_cmd&#x2F;redis-6701.txtOverall Stats&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Lines Processed  5000   --- 总命令数Commands&#x2F;Sec     16348.00 --- QPSTop Prefixes  ---前缀最多的数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;dailyreward      873(17.46%)EXPEND_COIN_KEY  483(9.66%)exclusivereward  474(9.48%)user             465(9.30%)u                217(4.34%)redPackFeed      206(4.12%)vouchers         131(2.62%)newhandtask      122(2.44%)Top Keys ---使用最多的key&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;welfareRead                                    1566(31.32%)dailyreward:xx:xx  72  (1.44%)dailyreward:xx:xx  72  (1.44%)dailyreward:xx:xx  72  (1.44%)dailyreward:xx:xx  64  (1.28%)dailyreward:xx:xx   62  (1.24%)dailyreward:xx:xx  60  (1.20%)dailyreward:xx:xx   59  (1.18%)Top Commands ---使用的最多的命令&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;HGET      4035(80.70%)EXPIREAT  416 (8.32%)PING      137 (2.74%)HMGET     115 (2.30%)HINCRBY   61  (1.22%)LRANGE    39  (0.78%)EXPIRE    35  (0.70%)HSET      30  (0.60%)Command Time (microsecs) ---请求的响应时间分布&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Median  39.075%     77.090%     136.2599%     326.0Heaviest Commands (microsecs) ---总体耗时最多的命令&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;HGET      245469.75EXPIREAT  25063.5PING      9035.25HMGET     8282.0HINCRBY   4135.25EXPIRE    2172.75LRANGE    2000.75HSET      1749.5Slowest Calls  --- 慢请求列表&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;620.0   &quot;HGET&quot; &quot;welfareRead&quot; &quot;3&quot;571.75  &quot;HGET&quot; &quot;welfareRead&quot; &quot;3&quot;531.5   &quot;HGET&quot; &quot;x&quot;494.75  &quot;HGET&quot; &quot;x&quot;489.0   &quot;EXPIREAT&quot; &quot;x&quot;477.0   &quot;HGET&quot; &quot;x&quot;471.0   &quot;HGET&quot; &quot;x&quot;470.25  &quot;HMGET&quot; &quot;x&quot;</code></pre><h3 id="notes"><a href="#notes" class="headerlink" title="notes:"></a>notes:</h3><p>大概能看出key的分布<br>由于redis MONITOR输出的只有请求开始的时间，所以在一个非常繁忙的redis实例中，根据该请求的开始时间以及下一个请求的开始时间，可以大概估算出一个请求的执行时间。由此可以看出，redis-faina统计的时间并不是十分精确的，尤其在分析一个非常闲的redis实例时，分析的结果可能差的很多。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis key分布</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAT集群部署</title>
    <link href="/2019/05/15/2019-05-15-dianping-cat-install/"/>
    <url>/2019/05/15/2019-05-15-dianping-cat-install/</url>
    
    <content type="html"><![CDATA[<h3 id="cat集群机器列表"><a href="#cat集群机器列表" class="headerlink" title="cat集群机器列表"></a>cat集群机器列表</h3><p>cat1<br>192.168.1.110 8080<br>cat2<br>192.168.1.111 8080<br>cat3<br>192.168.1.112 8080</p><h3 id="部署tomcat"><a href="#部署tomcat" class="headerlink" title="部署tomcat"></a>部署tomcat</h3><p>新建setenv.sh然后添加环境变量<br><pre class="language-none"><code class="language-none">bin&#x2F;setenv.shexport CAT_HOME&#x3D;&#x2F;data&#x2F;apps&#x2F;data&#x2F;cat&#x2F;export JAVA_OPTS&#x3D;&quot;-server -Xms10g -Xmx10g -Xmn8g -XX:PermSize&#x3D;256m -XX:MaxPermSize&#x3D;512m -Dfile.encoding&#x3D;UTF-8 -verbose:gc -Xloggc:$&#123;CATALINA_HOME&#125;&#x2F;logs&#x2F;gc.log&#96;date +%Y-%m-%d-%H-%M&#96; -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -noclassgc&quot;server.xml&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;           URIEncoding&#x3D;&quot;utf-8&quot;    connectionTimeout&#x3D;&quot;20000&quot;               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;  &lt;!-- 增加  URIEncoding&#x3D;&quot;utf-8&quot;  --&gt;  CAT_HOME目录权限chmod -R 777 $CAT_HOME</code></pre><br><a id="more"></a></p><h3 id="配置-data-appdatas-cat-client-xml-CAT-HOME-client-xml"><a href="#配置-data-appdatas-cat-client-xml-CAT-HOME-client-xml" class="headerlink" title="配置/data/appdatas/cat/client.xml ($CAT_HOME/client.xml)"></a>配置/data/appdatas/cat/client.xml ($CAT_HOME/client.xml)</h3><pre class="language-none"><code class="language-none">client.xml&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;config mode&#x3D;&quot;client&quot;&gt;    &lt;servers&gt;        &lt;server ip&#x3D;&quot;192.168.1.110&quot; port&#x3D;&quot;2280&quot; http-port&#x3D;&quot;8080&quot;&#x2F;&gt;        &lt;server ip&#x3D;&quot;192.168.1.111&quot; port&#x3D;&quot;2280&quot; http-port&#x3D;&quot;8080&quot;&#x2F;&gt;        &lt;server ip&#x3D;&quot;192.168.1.112&quot; port&#x3D;&quot;2280&quot; http-port&#x3D;&quot;8080&quot;&#x2F;&gt;    &lt;&#x2F;servers&gt;&lt;&#x2F;config&gt;</code></pre><h3 id="安装CAT数据库"><a href="#安装CAT数据库" class="headerlink" title="安装CAT数据库"></a>安装CAT数据库</h3><p>安装数据库并导入数据<br><pre class="language-none"><code class="language-none">mysql -uroot -Dcat &lt; CatApplication.sql</code></pre></p><h3 id="配置-data-appdatas-cat-datasources-xml-CAT-HOME-datasources-xml"><a href="#配置-data-appdatas-cat-datasources-xml-CAT-HOME-datasources-xml" class="headerlink" title="配置/data/appdatas/cat/datasources.xml($CAT_HOME/datasources.xml)"></a>配置/data/appdatas/cat/datasources.xml($CAT_HOME/datasources.xml)</h3><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;data-sources&gt;&lt;data-source id&#x3D;&quot;cat&quot;&gt;&lt;maximum-pool-size&gt;3&lt;&#x2F;maximum-pool-size&gt;&lt;connection-timeout&gt;1s&lt;&#x2F;connection-timeout&gt;&lt;idle-timeout&gt;10m&lt;&#x2F;idle-timeout&gt;&lt;statement-cache-size&gt;1000&lt;&#x2F;statement-cache-size&gt;&lt;properties&gt;&lt;driver&gt;com.mysql.jdbc.Driver&lt;&#x2F;driver&gt;&lt;url&gt;&lt;![CDATA[jdbc:mysql:&#x2F;&#x2F;192.168.1.110:3306&#x2F;newsapp_cat]]&gt;&lt;&#x2F;url&gt;  &lt;!-- 请替换为真实数据库URL及Port  --&gt;&lt;user&gt;newsapp_cat&lt;&#x2F;user&gt;  &lt;!-- 请替换为真实数据库用户名  --&gt;&lt;password&gt;newsapp_cat_monitor&lt;&#x2F;password&gt;  &lt;!-- 请替换为真实数据库密码  --&gt;&lt;connectionProperties&gt;&lt;![CDATA[useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;autoReconnect&#x3D;true&amp;socketTimeout&#x3D;120000]]&gt;&lt;&#x2F;connectionProperties&gt;&lt;&#x2F;properties&gt;&lt;&#x2F;data-source&gt;&lt;&#x2F;data-sources&gt;</code></pre><h3 id="war打包"><a href="#war打包" class="headerlink" title="war打包"></a>war打包</h3><p><a href="http://unidal.org/nexus/service/local/repositories/releases/content/com/dianping/cat/cat-home/3.0.0/cat-home-3.0.0.war">官方下载</a></p><h3 id="war部署"><a href="#war部署" class="headerlink" title="war部署"></a>war部署</h3><p>cat.war部署到webapps目录下。<br>默认用户名：admin 默认密码：admin。</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;router-config backup-server&#x3D;&quot;192.168.1.110&quot; backup-server-port&#x3D;&quot;2280&quot;&gt;   &lt;default-server id&#x3D;&quot;192.168.1.110&quot; weight&#x3D;&quot;1.0&quot; port&#x3D;&quot;2280&quot; enable&#x3D;&quot;false&quot;&#x2F;&gt;   &lt;default-server id&#x3D;&quot;192.168.1.111&quot; weight&#x3D;&quot;1.0&quot; port&#x3D;&quot;2280&quot; enable&#x3D;&quot;true&quot;&#x2F;&gt;   &lt;default-server id&#x3D;&quot;192.168.1.112&quot; weight&#x3D;&quot;1.0&quot; port&#x3D;&quot;2280&quot; enable&#x3D;&quot;true&quot;&#x2F;&gt;   &lt;network-policy id&#x3D;&quot;default&quot; title&#x3D;&quot;default&quot; block&#x3D;&quot;false&quot; server-group&#x3D;&quot;default_group&quot;&gt;   &lt;&#x2F;network-policy&gt;   &lt;server-group id&#x3D;&quot;default_group&quot; title&#x3D;&quot;default-group&quot;&gt;      &lt;group-server id&#x3D;&quot;192.168.1.111&quot;&#x2F;&gt;      &lt;group-server id&#x3D;&quot;192.168.1.112&quot;&#x2F;&gt;   &lt;&#x2F;server-group&gt;   &lt;domain id&#x3D;&quot;cat&quot;&gt;      &lt;group id&#x3D;&quot;default&quot;&gt;         &lt;server id&#x3D;&quot;192.168.1.111&quot; port&#x3D;&quot;2280&quot; weight&#x3D;&quot;1.0&quot;&#x2F;&gt;         &lt;server id&#x3D;&quot;192.168.1.112&quot; port&#x3D;&quot;2280&quot; weight&#x3D;&quot;1.0&quot;&#x2F;&gt;      &lt;&#x2F;group&gt;   &lt;&#x2F;domain&gt;&lt;&#x2F;router-config&gt;</code></pre><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>配置链接：<a href="http://{ip:port}/cat/s/config?op=serverConfigUpdate">http://{ip:port}/cat/s/config?op=serverConfigUpdate</a><br><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;server-config&gt;   &lt;server id&#x3D;&quot;default&quot;&gt;      &lt;properties&gt;         &lt;property name&#x3D;&quot;local-mode&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;         &lt;property name&#x3D;&quot;job-machine&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;         &lt;property name&#x3D;&quot;send-machine&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;         &lt;property name&#x3D;&quot;alarm-machine&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;         &lt;property name&#x3D;&quot;hdfs-enabled&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;         &lt;property name&#x3D;&quot;remote-servers&quot; value&#x3D;&quot;192.168.1.110:8080,192.168.1.111:8080,192.168.1.112:8080&quot;&#x2F;&gt;      &lt;&#x2F;properties&gt;      &lt;storage local-base-dir&#x3D;&quot;&#x2F;data&#x2F;apps&#x2F;data&#x2F;cat&#x2F;bucket&#x2F;&quot; max-hdfs-storage-time&#x3D;&quot;15&quot; local-report-storage-time&#x3D;&quot;7&quot; local-logivew-storage-time&#x3D;&quot;7&quot; har-mode&#x3D;&quot;true&quot; upload-thread&#x3D;&quot;5&quot;&gt;         &lt;hdfs id&#x3D;&quot;logview&quot; max-size&#x3D;&quot;128M&quot; server-uri&#x3D;&quot;hdfs:&#x2F;&#x2F;10.1.77.86&#x2F;&quot; base-dir&#x3D;&quot;user&#x2F;cat&#x2F;logview&quot;&#x2F;&gt;         &lt;hdfs id&#x3D;&quot;dump&quot; max-size&#x3D;&quot;128M&quot; server-uri&#x3D;&quot;hdfs:&#x2F;&#x2F;10.1.77.86&#x2F;&quot; base-dir&#x3D;&quot;user&#x2F;cat&#x2F;dump&quot;&#x2F;&gt;         &lt;hdfs id&#x3D;&quot;remote&quot; max-size&#x3D;&quot;128M&quot; server-uri&#x3D;&quot;hdfs:&#x2F;&#x2F;10.1.77.86&#x2F;&quot; base-dir&#x3D;&quot;user&#x2F;cat&#x2F;remote&quot;&#x2F;&gt;      &lt;&#x2F;storage&gt;      &lt;consumer&gt;         &lt;long-config default-url-threshold&#x3D;&quot;1000&quot; default-sql-threshold&#x3D;&quot;100&quot; default-service-threshold&#x3D;&quot;50&quot;&gt;            &lt;domain name&#x3D;&quot;cat&quot; url-threshold&#x3D;&quot;500&quot; sql-threshold&#x3D;&quot;500&quot;&#x2F;&gt;            &lt;domain name&#x3D;&quot;OpenPlatformWeb&quot; url-threshold&#x3D;&quot;100&quot; sql-threshold&#x3D;&quot;500&quot;&#x2F;&gt;         &lt;&#x2F;long-config&gt;      &lt;&#x2F;consumer&gt;   &lt;&#x2F;server&gt;   &lt;server id&#x3D;&quot;192.168.1.110&quot;&gt;      &lt;properties&gt;         &lt;property name&#x3D;&quot;job-machine&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;         &lt;property name&#x3D;&quot;alarm-machine&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;         &lt;property name&#x3D;&quot;send-machine&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;      &lt;&#x2F;properties&gt;   &lt;&#x2F;server&gt;&lt;&#x2F;server-config&gt;</code></pre></p><h3 id="notes"><a href="#notes" class="headerlink" title="notes:"></a>notes:</h3><p><a href="https://github.com/dianping/cat/wiki/readme_server">https://github.com/dianping/cat/wiki/readme_server</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>elastic 迁移</title>
    <link href="/2019/04/22/2019-04-22-elasticsearch-migration-notes/"/>
    <url>/2019/04/22/2019-04-22-elasticsearch-migration-notes/</url>
    
    <content type="html"><![CDATA[<h3 id="es迁移测试工具对比"><a href="#es迁移测试工具对比" class="headerlink" title="es迁移测试工具对比"></a>es迁移测试工具对比</h3><table><thead><tr><th>测试工具</th><th>是否成功</th><th>环境搭建</th><th>迁移版本是否支持</th><th>工具地址</th></tr></thead><tbody><tr><td>Elasticsearch Migration</td><td>是</td><td>简单，二进制下载即可用</td><td>5.0-&gt;5.0</td><td><a href="https://github.com/medcl/esm-abandoned">https://github.com/medcl/esm-abandoned</a></td></tr><tr><td>logstash迁移</td><td>是</td><td>更新和es对应版本</td><td>支持跨版本,logstash5.0</td><td></td></tr><tr><td>Elasticsearch-Exporter</td><td>否</td><td>node环境依赖，复杂</td><td><a href="https://github.com/mallocator/Elasticsearch-Exporter">https://github.com/mallocator/Elasticsearch-Exporter</a></td></tr></tbody></table><p>小结：对比选择使用esm，logstash辅助。</p><a id="more"></a><p>esm迁移脚本<br><pre class="language-none"><code class="language-none">#!&#x2F;bin&#x2F;sh dir&#x3D;&quot;&#x2F;data&#x2F;apps&#x2F;opt&quot;cd $diresindex&#x3D;&#96;curl -s &#39;http:&#x2F;&#x2F;127.0.0.1:9200&#x2F;_cat&#x2F;indices&#39; | grep -e logstash-09* | awk &#39;&#123;print $3&#125;&#39;&#96;#echo $esindex for i in $esindex;do.&#x2F;esm  -s http:&#x2F;&#x2F;127.0.0.1:9200 -x $i  -d http:&#x2F;&#x2F;192.168.1.100:9200 -x $i  -w&#x3D;5 -b&#x3D;10 -c 10000done</code></pre></p><p>es保留30的数据<br><pre class="language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashDATE&#x3D;&#96;date +%Y.%m.%d.%I&#96;DATA1&#x3D;&#96;date +%Y.%m.%d -d&#39;-30 day&#39;&#96;DATA2&#x3D;&#96;date +%Y.%m.%d -d&#39;-30 day&#39;&#96;#关闭索引curl -XPOST &quot;http:&#x2F;&#x2F;localhost:9200&#x2F;logstash*$&#123;DATA1&#125;*&#x2F;_close?pretty&quot;#删除索引curl -XDELETE &quot;http:&#x2F;&#x2F;localhost:9200&#x2F;logstash*$&#123;DATA2&#125;*?pretty</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>elastic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 迁移工具</title>
    <link href="/2019/03/21/2019-03-21-redis-migrate-tool/"/>
    <url>/2019/03/21/2019-03-21-redis-migrate-tool/</url>
    
    <content type="html"><![CDATA[<h3 id="rmt安装"><a href="#rmt安装" class="headerlink" title="rmt安装"></a>rmt安装</h3><p>Redis-Migrate-Tool集群迁移工具，基于redis复制，快速，稳定。</p><p><a href="https://github.com/vipshop/redis-migrate-tool">github地址</a></p><pre class="language-none"><code class="language-none">cd redis-migrate-toolautoreconf -fvi.&#x2F;configuremakesrc&#x2F;redis-migrate-tool -h</code></pre><a id="more"></a><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><p>单实例迁移到单实例<br><pre class="language-none"><code class="language-none">执行迁移src&#x2F;redis-migrate-tool -c single2single.conf -o single2single.log -dsingle2single.conf[source]type: singleservers: - 192.168.1.100:6379redis_auth: 123456[target]type: singleservers: - 192.168.1.111:6379redis_auth: abcdef[common]listen: 0.0.0.0:8888threads: 4step: 2mbuf_size: 1024source_safe: true</code></pre></p><p>单实例迁移到集群<br><pre class="language-none"><code class="language-none">执行迁移src&#x2F;redis-migrate-tool -c single2cluster.conf -o single2cluster.log -dsingle2cluster.conf[source]type: singleservers: - 192.168.1.100:6379redis_auth: 123456[target]type: redis clusterservers: - 192.168.1.111:6379redis_auth: abcdef[common]listen: 0.0.0.0:9999threads: 4step: 2mbuf_size: 1024source_safe: true</code></pre></p><h3 id="RedisShake"><a href="#RedisShake" class="headerlink" title="RedisShake"></a>RedisShake</h3><p>redis-shake是阿里云Redis&amp;MongoDB团队开源的用于redis数据同步的工具。<a href="https://github.com/alibaba/RedisShake/releases">RedisShake地址</a></p><p>下载解压即可食用</p><p>集群版cluster到集群版cluster配置举例<br><pre class="language-none"><code class="language-none">source.type: clustersource.address: 10.1.1.1:20441;10.1.1.1:20443;10.1.1.1:20445source.password_raw: 12345target.type: clustertarget.address: 10.1.1.1:20551;10.1.1.1:20553;10.1.1.1:20555target.password_raw: 12345</code></pre></p><p>对于source.address或者target.address，需要配置源端的所有集群中db节点列表以及目的端集群所有db节点列表，用户也可以启用自动发现机制，地址以’@’开头，redis-shake将会根据cluster nodes命令自动去探测有几个节点。对于source.address，用户可以在’@’前面配置master（默认）或者slave表示分表从master或者slave进行拉取；对于target.address，只能是master或者不配置：<br><pre class="language-none"><code class="language-none">source.address: master@10.1.1.1:20441 # 将会自动探测到10.1.1.1:20441集群下的所有节点，并从所有master进行拉取。target.address: @10.1.1.1:20551 # 将会自动探测到10.1.1.1:20551集群下的所有节点，并写入所有master。</code></pre><br>可以手动写所有节点，也可以@写一个自动探测。</p><h3 id="启动停止"><a href="#启动停止" class="headerlink" title="启动停止"></a>启动停止</h3><pre class="language-none"><code class="language-none">&#x2F;data&#x2F;apps&#x2F;opt&#x2F;redis-shake&#x2F;start.sh redis-shake.conf rsync&#x2F;stop.sh redis-shake.pid</code></pre><h3 id="redis-shake-迁移监控"><a href="#redis-shake-迁移监控" class="headerlink" title="redis-shake 迁移监控"></a>redis-shake 迁移监控</h3><p>用户可以通过我们提供的restful拉取metric来对redis-shake进行实时监控：curl 127.0.0.1:9320/metric</p><p>校验使用redis-migrate-tool 随机校验或者使用show_redis_map.sh脚本看下大概key总量。</p><h3 id="迁移校验"><a href="#迁移校验" class="headerlink" title="迁移校验"></a>迁移校验</h3><p>src/redis-migrate-tool -c single2single.conf -o log -C redis_check<br>src/redis-migrate-tool -c single2single.conf -o log -C “redis_check 200000”</p><h3 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h3><p><a href="https://github.com/vipshop/redis-migrate-tool">https://github.com/vipshop/redis-migrate-tool</a><br><a href="https://github.com/alibaba/RedisShake">https://github.com/alibaba/RedisShake</a></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rmt RedisShake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Cluster集群搭建</title>
    <link href="/2019/01/15/2019-01-15-redis-cluster-install/"/>
    <url>/2019/01/15/2019-01-15-redis-cluster-install/</url>
    
    <content type="html"><![CDATA[<h3 id="redis-cluster集群构建"><a href="#redis-cluster集群构建" class="headerlink" title="redis cluster集群构建"></a>redis cluster集群构建</h3><p>10.16.76.144 6000<br>10.16.76.144 6001<br>10.16.76.144 6002</p><p>集群密码：abcdefg</p><h3 id="配置主节点"><a href="#配置主节点" class="headerlink" title="配置主节点"></a>配置主节点</h3><pre class="language-none"><code class="language-none">10.16.76.144 6000cluster meet 10.16.76.144 6001cluster meet 10.16.76.144 6002cluster nodescluster info</code></pre><h3 id="分配槽位"><a href="#分配槽位" class="headerlink" title="分配槽位"></a>分配槽位</h3><p>node1分配：0~5461<br>node2分配：5462~10922<br>node3分配：10923~16383</p><a id="more"></a><p>分配脚本addslots.sh<br><pre class="language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashREDIS_CLI&#x3D;&#96;which redis-cli&#96;REDIS_PASS&#x3D;&#39;&#39;#node1n&#x3D;0for ((i&#x3D;n;i&lt;&#x3D;5461;i++))do   $REDIS-CLI -h 10.16.76.144 -p 6000 -a $REDIS_PASS CLUSTER ADDSLOTS $idone#node2n&#x3D;5462for ((i&#x3D;n;i&lt;&#x3D;10922;i++))do   $REDIS-CLI -h 10.16.76.144 -p 6001 -a $REDIS_PASS CLUSTER ADDSLOTS $idone#node3#!&#x2F;bin&#x2F;bashn&#x3D;10923for ((i&#x3D;n;i&lt;&#x3D;16383;i++))do   $REDIS-CLI -h 10.16.76.144 -p 6002 -a $REDIS_PASS CLUSTER ADDSLOTS $idone</code></pre></p><h3 id="redis集群动态添加密码"><a href="#redis集群动态添加密码" class="headerlink" title="redis集群动态添加密码"></a>redis集群动态添加密码</h3><pre class="language-none"><code class="language-none">config rewrite 写入配置for i in &#123;6000..6002&#125;; do echo $i;donefor i in &#123;6000..6002&#125;;  do echo $i; redis-cli -c -h 10.16.76.144 -p $i config set requirepass abcdefg ;done</code></pre><h3 id="redis-cluster常用命令"><a href="#redis-cluster常用命令" class="headerlink" title="redis cluster常用命令"></a>redis cluster常用命令</h3><pre class="language-none"><code class="language-none">查看key所在slotcluster keyslot key_name</code></pre>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S常用命令</title>
    <link href="/2018/12/08/2018-08-15-k8s-common-use/"/>
    <url>/2018/12/08/2018-08-15-k8s-common-use/</url>
    
    <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">获取集群状态kubectl get componentstatus kubectl get cs获取node节点kubectl get nodes获取node节点ipkubectl get node -o json |grep  &quot;address&quot; |grep -v &#39;addresses&#39; |awk  &#39;&#123; print $2&#125;&#39; |sort -nr |uniq |cut -d&#39;&quot;&#39; -f2kubectl scale sts myapp --replication&#x3D;5kubectl patch sts myapp --repli更新指定容器镜像版本kubectl set image deployment&#x2F;myapp busybox&#x3D;busybox:v2回滚kubectl rollout undo deployment&#x2F;myapp扩容kubectl scale --replicas&#x3D;3 deployment myapp缩容kubectl scale --replicas&#x3D;3 deployment myapp观察更新状态kubectl rollout status deployment myapp查看历史版本kubectl rollout history deployment myapp查看节点的 label。kubectl get nodes --show-labels增加labelkubectl label node k8s-node1 app&#x3D;zkkubectl label pod myapp-01 app&#x3D;myappkubectl get pod -Lapp删除 label app，执行如下命令：kubectl label node k8s-node1 app-- 即删除。根据标签查询节点kubectl get node -a -l &quot;node&#x3D;kube-node&quot;kubectl label nodes 10.126.72.31 points&#x3D;test会给10.126.72.31这个节点添加一个标签：points&#x3D;test</code></pre>]]></content>
    
    
    <categories>
      
      <category>K8S</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nexus OSS私服的安装和迁移</title>
    <link href="/2018/10/18/2018-10-18-nexus-oss-install/"/>
    <url>/2018/10/18/2018-10-18-nexus-oss-install/</url>
    
    <content type="html"><![CDATA[<h3 id="Nexus私服"><a href="#Nexus私服" class="headerlink" title="Nexus私服"></a>Nexus私服</h3><p>Nexus常用功能就是：指定私服的中央地址、将自己的Maven项目指定到私服地址、从私服下载中央库的项目索引、从私服仓库下载依赖组件、将第三方项目jar上传到私服供其他项目组使用。</p><p>一般用到的仓库种类是hosted、proxy。 </p><ol><li>Hosted代表宿主仓库，用来发布一些第三方不允许的组件，比如Oracle驱动、比如商业软件jar包。</li><li>Proxy代表代理远程的仓库，最典型的就是Maven官方中央仓库、JBoss仓库等等。如果构建的Maven项目本地仓库没有依赖包，<br>那么就会去这个代理站点去下载，那么如果代理站点也没有此依赖包，就回去远程中央仓库下载依赖，这些中央仓库就是proxy。代理站点下载成功后再下载至本机。</li></ol><a id="more"></a><h3 id="下载解压nexus"><a href="#下载解压nexus" class="headerlink" title="下载解压nexus"></a>下载解压nexus</h3><p>Nexus Repository Manager OSS ,之前叫做 Nexus OS，是开源免费的。【OSS = Open Source Software，开源软件——免费】</p><p>Nexus Repository Manager，之前叫做 Nexus Professional。只有拥有一个有效的许可证才可以使用所有功能【专业版本——收费</p><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;download.sonatype.com&#x2F;nexus&#x2F;oss&#x2F;nexus-latest-bundle.tar.gztar zxvf nexus-latest-bundle.tar.gz  -C &#x2F;data&#x2F;app&#x2F;optcp bin&#x2F;nexus &#x2F;etc&#x2F;init.d&#x2F;nexus2 设置nexus服务开机自启动chkconfig --add nexus2chkconfig nexus2 on &#x2F;etc&#x2F;init.d&#x2F;nexus2 start默认admin&#x2F;admin123</code></pre><h3 id="Nexus2配置文件"><a href="#Nexus2配置文件" class="headerlink" title="Nexus2配置文件"></a>Nexus2配置文件</h3><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;init.d&#x2F;nexus2 修改NEXUS_HOME修改为Nexus的解压目录 &#x2F;data&#x2F;apps&#x2F;opt&#x2F;nexus-2.14.11-01RUN_AS_USER修改为 rootcd &#x2F;data&#x2F;apps&#x2F;opt&#x2F;nexus-2.14.11-01bin&#x2F;jsw&#x2F;conf&#x2F;wrapper.conf 修改#设置好Java执行文件所处的位置wrapper.java.command&#x3D;&#x2F;usr&#x2F;java&#x2F;bin&#x2F;javaNexus2监听的端口以及仓库存储位置conf&#x2F;nexus.properties# Jetty sectionapplication-port&#x3D;8081  #端口application-host&#x3D;0.0.0.0nexus-webapp&#x3D;$&#123;bundleBasedir&#125;&#x2F;nexusnexus-webapp-context-path&#x3D;&#x2F;nexus# Nexus section#nexus-work&#x3D;$&#123;bundleBasedir&#125;&#x2F;..&#x2F;sonatype-work&#x2F;nexusnexus-work&#x3D;&#x2F;data&#x2F;apps&#x2F;data&#x2F;sonatype-work&#x2F;nexus #仓库存储位置runtime&#x3D;$&#123;bundleBasedir&#125;&#x2F;nexus&#x2F;WEB-INF# orientdb buffer size in megabytesstorage.diskCache.bufferSize&#x3D;4096</code></pre><h3 id="仓库的备份与迁移"><a href="#仓库的备份与迁移" class="headerlink" title="仓库的备份与迁移"></a>仓库的备份与迁移</h3><p>登陆旧的Nexus OSS私服仓库，查看conf/nexus.properties 配置，找到仓库存储位置<br>同步数据目录到新的Nexus OSS私服仓库<br>重启nexus即可</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YUM源制作</title>
    <link href="/2018/07/09/2018-07-09-yum-repo-make/"/>
    <url>/2018/07/09/2018-07-09-yum-repo-make/</url>
    
    <content type="html"><![CDATA[<h3 id="安装createrepo"><a href="#安装createrepo" class="headerlink" title="安装createrepo"></a>安装createrepo</h3><pre class="language-none"><code class="language-none">yum install createrepo创建本地仓库createrepo &#x2F;data&#x2F;repo&#x2F;RPMS添加rpm包，更新本地仓库createrepo --update &#x2F;data&#x2F;repo&#x2F;RPMS此命令只能下载主机未安装的包yum install 包名 --downloadonly --downloaddir&#x3D;&#x2F;data&#x2F;repo如果本机器已经安装，下载相关包yum reinstall 包名 --downloadonly --downloaddir&#x3D;&#x2F;data&#x2F;repo指定仓库安装yum  --disablerepo&#x3D;openstack-kilo,openstack-liberty,openstack-mitaka,7ASU3-updates  --enablerepo&#x3D;appserver  localinstall -y —nogpgcheck monit </code></pre><a id="more"></a><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><pre class="language-none"><code class="language-none">cat repo.confserver &#123;    listen       8080;    server_name  0.0.0.0;    access_log  logs&#x2F;repo.access.log  main;    root &#x2F;data&#x2F;repo&#x2F;RPMS;    autoindex on;    location &#x2F; &#123;    &#125;    error_page   500 502 503 504  &#x2F;50x.html;    location &#x3D; &#x2F;50x.html &#123;        root   html;    &#125;&#125;</code></pre><h3 id="使用自建repo源"><a href="#使用自建repo源" class="headerlink" title="使用自建repo源"></a>使用自建repo源</h3><pre class="language-none"><code class="language-none"> cat &#x2F;etc&#x2F;yum.repos.d&#x2F;appserver.repo[appserver]name&#x3D;Extra Packages for appserver - $basearchbaseurl&#x3D;http:&#x2F;&#x2F;10.16.76.135:8080gpgcheck&#x3D;0enabled&#x3D;1</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL笔记之版本升级和权限管理</title>
    <link href="/2017/08/03/2017-08-03-mysql-notes-update-privileges/"/>
    <url>/2017/08/03/2017-08-03-mysql-notes-update-privileges/</url>
    
    <content type="html"><![CDATA[<h3 id="数据库升级"><a href="#数据库升级" class="headerlink" title="数据库升级"></a>数据库升级</h3><h4 id="1-环境说明："><a href="#1-环境说明：" class="headerlink" title="1. 环境说明："></a>1. <strong>环境说明：</strong></h4><p>一般说来，MySQL数据库的二进制数据文件，也就是<code>my.cnf</code>中的配置项<code>datadir</code>所在的位置，和我们MySQL应用程序安装的位置，是分开的，仅仅通过配置项告诉MySQL，数据库的数据存在<code>datadir</code>这个目录下。当程序和数据分离以后，方便我们对数据库应用程序做版本的升级或者回退。</p><h4 id="环境举例："><a href="#环境举例：" class="headerlink" title="环境举例："></a><strong>环境举例：</strong></h4><ul><li><p><em>MySQL安装目录：</em></p><ul><li><strong>MySQL 5.6.27:</strong> /usr/local/mysql-5.6.27-linux-glibc2.5-x86_64</li><li><strong>MySQL 5.7.9 :</strong> /usr/local/mysql-5.7.9-linux-glibc2.5-x86_64</li></ul></li><li><p><em>datadir目录：</em></p><ul><li>/data/mysq_data/</li></ul></li><li><p><em>初始环境：</em></p>  <pre class="language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">></span> ll <span class="token operator">|</span> <span class="token function">grep</span> mysqllrwxrwxrwx   <span class="token number">1</span> root root    <span class="token number">34</span> Nov <span class="token number">16</span> <span class="token number">13</span>:40 mysql -<span class="token operator">></span> mysql-5.6.27-linux-glibc2.5-x86_64drwxr-xr-x  <span class="token number">13</span> root mysql  <span class="token number">4096</span> Nov <span class="token number">16</span> <span class="token number">13</span>:37 mysql-5.6.27-linux-glibc2.5-x86_64drwxr-xr-x   <span class="token number">9</span> <span class="token number">7161</span> wheel <span class="token number">4096</span> Oct <span class="token number">12</span> 00:29 mysql-5.7.9-linux-glibc2.5-x86_64shell<span class="token operator">></span> ll /data/mysql_data/total <span class="token number">13540</span>-rw-rw---- <span class="token number">1</span> mysql mysql    <span class="token number">65468</span> Nov <span class="token number">16</span> <span class="token number">13</span>:50 bin.000001-rw-rw---- <span class="token number">1</span> mysql mysql  <span class="token number">1176237</span> Nov <span class="token number">16</span> <span class="token number">13</span>:50 bin.000002-rw-rw---- <span class="token number">1</span> mysql mysql       <span class="token number">26</span> Nov <span class="token number">16</span> <span class="token number">13</span>:50 bin.index-rw-rw---- <span class="token number">1</span> mysql mysql     <span class="token number">6882</span> Nov <span class="token number">16</span> <span class="token number">13</span>:50 error.log-rw-rw---- <span class="token number">1</span> mysql mysql      <span class="token number">865</span> Nov <span class="token number">16</span> <span class="token number">13</span>:50 ib_buffer_pool-rw-rw---- <span class="token number">1</span> mysql mysql <span class="token number">12582912</span> Nov <span class="token number">16</span> <span class="token number">13</span>:50 ibdata1drwx------ <span class="token number">2</span> mysql mysql     <span class="token number">4096</span> Nov <span class="token number">16</span> <span class="token number">13</span>:50 mysqldrwx------ <span class="token number">2</span> mysql mysql     <span class="token number">4096</span> Nov <span class="token number">16</span> <span class="token number">13</span>:50 performance_schemadrwx------ <span class="token number">2</span> mysql mysql     <span class="token number">4096</span> Nov <span class="token number">16</span> <span class="token number">13</span>:49 <span class="token builtin class-name">test</span></code></pre><a id="more"></a><h4 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h4><pre class="language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">></span> /etc/init.d/mysqld stop  <span class="token comment">#安全的停止数据库的运行</span>shell<span class="token operator">></span> <span class="token builtin class-name">cd</span> /usr/local/shell<span class="token operator">></span> unlink mysqlshell<span class="token operator">></span> <span class="token function">ln</span> -s mysql-5.7.9-linux-glibc2.5-x86_64 mysql         <span class="token comment">#此时，MySQL的应用程序版本已经升级完成</span>        <span class="token comment">#/etc/init.d/mysqld</span>        <span class="token comment">#/etc/profile中PATH增加的/usr/local/mysql/bin</span>        <span class="token comment">#都不需要做任何的改变，即可将当前系统的mysql版本升级完成</span>        <span class="token comment">#注意：此时只是应用程序升级完成，系统表仍然还是5.6的版本</span>        shell<span class="token operator">></span> <span class="token builtin class-name">cd</span> /usr/local/mysqlshell<span class="token operator">></span> <span class="token function">chown</span> root.mysql <span class="token builtin class-name">.</span> -Rshell<span class="token operator">></span> <span class="token function">cp</span> /data/mysql_data/mysql /你的备份路径/mysql_5_6_27.backup -r       <span class="token comment">#该步骤将mysql5.6.27版本的系统表进行了备份，以便将来可以回退</span>       shell<span class="token operator">></span> /etc/init.d/mysqld start <span class="token comment">#此时 /etc/init.d/mysqld start  # 可以启动</span><span class="token comment">#     且可以使用 mysql -u root -p （原密码） 进入数据库</span><span class="token comment">#     show databases;存在test表，而没有sys表（数据的二进制文件兼容）</span><span class="token comment">#     但是如果去看error.log会发现好多的WARNNING</span><span class="token comment">#     所以，这个时候我们要去 upgrade 去升级</span>       shell<span class="token operator">></span> mysql_upgrade -p -s          <span class="token comment">#参数 -s 一定要加,表示只更新系统表，-s: upgrade-system-tables</span>        <span class="token comment">#如果不加-s,则会把所有库的表以5.7.9的方式重建，线上千万别这样操作</span>        <span class="token comment">#因为数据库二进制文件是兼容的，无需升级</span>        <span class="token comment">#什么时候不需要-s ? 当一些老的版本的存储格式需要新的特性，</span>        <span class="token comment">#                 来提升性能时，不加-s</span>        <span class="token comment">#即使通过slave进行升级，也推荐使用该方式升级，速度比较快</span>   Enter password: The --upgrade-system-tables option was used, databases wont be touched.Checking <span class="token keyword">if</span> update is needed.Checking server version.Running queries to upgrade MySQL server.Upgrading the sys schema.Upgrade process completed successfully.Checking <span class="token keyword">if</span> update is needed.    shell<span class="token operator">></span> mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">4</span>Server version: <span class="token number">5.7</span>.9-log MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2015</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'<span class="token entity" title="\c">\c</span>'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span>  <span class="token comment"># 这个就是升级后的系统库，如果回退，将备份的拷贝回来覆盖即可</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span>  <span class="token comment"># 5.7 新的sys库</span><span class="token operator">|</span> <span class="token builtin class-name">test</span>               <span class="token operator">|</span>  <span class="token comment"># 5.6 中的test库</span>+--------------------+<span class="token number">5</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><p><code>5.1.X</code>、<code>5.5.X</code> 、<code>5.6.X</code> 是可以直接通过该方式升级到<code>5.7.X</code>。<code>5.0.X</code>未知，需要测试</p></li></ul><p><strong>注意：</strong><br>如果原来数据二进制文件保存在<strong>/usr/local/<code>mysql-5.6.27</code>-linux-glibc2.5-x86_64/data</strong>目录下,在升级之前，要么将该目录的数据拷贝到新的你指定的data目录（比如<strong>/usr/local/<code>mysql-5.7.9</code>-linux-glibc2.5-x86_64/data</strong> ），要么修改<code>my.cnf</code>，将<code>datadir</code>指向<code>/usr/local/mysql-5.6.27-linux-glibc2.5-x86_64/data</code>，总之一定要确保<code>my.cnf</code>中的数据位置和你实际的数据位置是一致的，不管是默认的也好，还是你<code>datadir</code>指定的也好</p><h3 id="MySQL的连接登录"><a href="#MySQL的连接登录" class="headerlink" title="MySQL的连接登录"></a>MySQL的连接登录</h3><h4 id="1-几种登录方式"><a href="#1-几种登录方式" class="headerlink" title="1. 几种登录方式"></a>1. 几种登录方式</h4><pre><code>* 方式一 `mysql -p`    - 该方法默认使用root用户, 可使用`select user();`查看当前用户* 方式二 `mysql -S /tmp/mysql.sock -u root -p`  *密码A*    - 该方法适用于在安装MySQL主机上进行本地登录* 方式三 `mysql -h 127.0.0.1 -u root -p` *密码B*    - 使用`&#39;root&#39;@&#39;127.0.0.1&#39;`这个用户登录* 方式四 `mysql -h localhost -u root -p` *密码A*    - 该方式等价与【方式二】，且和【方式三】属于两个不同的“用户”</code></pre><h4 id="2-免密码登录"><a href="#2-免密码登录" class="headerlink" title="2. 免密码登录"></a>2. 免密码登录</h4><pre><code>* 方式一 `my.cnf`增加`[client]`标签       <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>   <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">"root"</span>  <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"你的密码"</span>  </code></pre>    <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#单对定义不同的客户端</span><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span> <span class="token comment"># 这个是给/usr/loca/mysql/bin/mysql 使用的</span><span class="token assign-left variable">username</span><span class="token operator">=</span>root<span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"你的密码"</span><span class="token punctuation">[</span>mysqladmin<span class="token punctuation">]</span> <span class="token comment"># 这个是给/usr/local/mysql/bin/mysqladmin使用的</span><span class="token assign-left variable">username</span><span class="token operator">=</span>root<span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"你的密码"</span></code></pre>    **每个不同的客户端需要定义不同的标签，使用`[client]`可以统一*** 方式二  login-path    <pre class="language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">></span> mysql_config_editor <span class="token builtin class-name">set</span> -G vm1 -S /tmp/mysql.sock -u root -pEnter password <span class="token punctuation">[</span>输入root的密码<span class="token punctuation">]</span>shell<span class="token operator">></span> mysql_config_editor print --all<span class="token punctuation">[</span>vm1<span class="token punctuation">]</span><span class="token assign-left variable">user</span><span class="token operator">=</span>root<span class="token assign-left variable">password</span><span class="token operator">=</span>*****<span class="token assign-left variable">socket</span><span class="token operator">=</span>/tmp/mysql.sock<span class="token comment">#login</span>shell<span class="token operator">></span> mysql --login-path<span class="token operator">=</span>vm1 <span class="token comment"># 这样登录就不需要密码，且文件二进制存储 ,位置是 ~/.mylogin.cnf</span></code></pre>    **该方式相对安全。如果server被黑了，该二进制文件还是会被破解*** 方式三 `~/.my.cnf`, 自己当前家目录的下    <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Filename: ~/.my.cnf</span><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"你的密码"</span></code></pre></code></pre><h3 id="MySQL-参数介绍和设置"><a href="#MySQL-参数介绍和设置" class="headerlink" title="MySQL 参数介绍和设置"></a>MySQL 参数介绍和设置</h3><h4 id="1-参数的分类"><a href="#1-参数的分类" class="headerlink" title="1. 参数的分类"></a>1. 参数的分类</h4><pre><code>* 全局参数：GLOBAL    - 可修改参数    - 不可修改参数* 会话参数：SESSION    - 可修改参数    - 不可修改参数</code></pre><p>1: 用户可在线修改<code>非只读参数</code>，<code>只读参数</code>只能预先在配置文件中进行设置，通过重启数据库实例,方可生效。  </p><p>2: 所有的在线修改过的参数(GLOBAL/SESSION)，在重启后，都会丢失，不会写如<code>my.cnf</code>，无法将修改进行持久化</p><p>3: 有些参数，即存在于<code>GLOBAL</code>又存在于<code>SESSION</code>, 比如<code>autocommit</code> (PS：MySQL默认是提交的)</p><h4 id="2-查看参数"><a href="#2-查看参数" class="headerlink" title="2. 查看参数"></a>2. 查看参数</h4><pre><code><pre class="language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> show variables<span class="token punctuation">;</span> <span class="token comment"># 显示当前mysql的所有参数，且无隐藏参数</span>mysql<span class="token operator">></span> show variables like <span class="token string">"max_%"</span><span class="token punctuation">;</span> <span class="token comment">#查以max_开头的变量</span></code></pre></code></pre><h4 id="3-设置参数"><a href="#3-设置参数" class="headerlink" title="3. 设置参数"></a>3. 设置参数</h4><pre><code>* 设置全局(GLOBAL)参数    <pre class="language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global slow_query_log <span class="token operator">=</span> off<span class="token punctuation">;</span> <span class="token comment">#不加global，会提示错误</span>                                       <span class="token comment">#slow_query_log是全局参数</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> slow_query_log <span class="token operator">=</span> off<span class="token punctuation">;</span>  <span class="token comment"># 下面就报错了，默认是会话参数</span>ERROR <span class="token number">1229</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Variable <span class="token string">'slow_query_log'</span> is a GLOBAL variable and should be <span class="token builtin class-name">set</span> with SET GLOBAL</code></pre>* 设置会话(SESSION)参数      <pre class="language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment"># 当前会话生效</span><span class="token comment"># 或者</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> session autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment"># 当前会话生效</span></code></pre>    `autocommit`同样在`GLOBAL`中, 也有同样的参数    <pre class="language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global autocommit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">#当前实例，全局生效</span></code></pre>    **注意：如果这个时候/etc/init.d/mysqld restart, 则全局的autocommit的值会变成默认值，或者依赖于my.cnf的设置值。**    执行的效果如下：    <pre class="language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> show variables like <span class="token string">"slow%"</span><span class="token punctuation">;</span> <span class="token comment"># 原值为ON</span>+---------------------+----------+<span class="token operator">|</span> Variable_name       <span class="token operator">|</span> Value    <span class="token operator">|</span>+---------------------+----------+<span class="token operator">|</span> slow_launch_time    <span class="token operator">|</span> <span class="token number">2</span>        <span class="token operator">|</span><span class="token operator">|</span> slow_query_log      <span class="token operator">|</span> OFF      <span class="token operator">|</span><span class="token operator">|</span> slow_query_log_file <span class="token operator">|</span> slow.log <span class="token operator">|</span>+---------------------+----------+<span class="token number">3</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> @@session.autocommit<span class="token punctuation">;</span> <span class="token comment"># 等价于 slect @@autocomit;</span>+----------------------+<span class="token operator">|</span> @@session.autocommit <span class="token operator">|</span>+----------------------+<span class="token operator">|</span>                    <span class="token number">0</span> <span class="token operator">|</span>+----------------------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> @@global.autocommit<span class="token punctuation">;</span>       +---------------------+<span class="token operator">|</span> @@global.autocommit <span class="token operator">|</span>+---------------------+<span class="token operator">|</span>                   <span class="token number">1</span> <span class="token operator">|</span>+---------------------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre></code></pre><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><h4 id="1-“用户-IP”的概念"><a href="#1-“用户-IP”的概念" class="headerlink" title="1. “用户 + IP”的概念"></a>1. “用户 + IP”的概念</h4><p>MySQL中同一个用户名，比如Bob,能否登录，以及用什么密码登录，可以访问什么库等等，都需要加上IP，才可以表示一个完整的用户标识</p><p><code>bob@127.0.0.1</code> 和 <code>bob@loalhost</code> 以及 <code>bob@192.168.1.100</code> 这三个其实是<code>不同</code>的 <strong>用户标识</strong> </p><h4 id="2-用户权限管理"><a href="#2-用户权限管理" class="headerlink" title="2. 用户权限管理"></a>2. 用户权限管理</h4><ul><li><p><strong>系统表权限信息:</strong></p><ul><li><strong>a) 用户名和IP是否允许</strong></li><li><strong>b) 查看mysql.user表</strong>  <code>// 查看全局所有库的权限</code></li><li><strong>c) 查看mysql.db表</strong>  <code>// 查看指定库的权限</code></li><li><strong>d) 查看mysql.table_priv表</strong> <code>// 查看指定表的权限</code></li><li><p><strong>e) 查看mysql.column_priv表</strong> <code>// 查看指定列的权限</code></p><p><strong>*tips</strong>: mysql&gt; desc [tablename]; 可以查看表的结构信息；*</p></li></ul></li><li><p><strong>常用权限：</strong></p><ul><li>SQL语句：SELECT、INSERT、UPDATE、DELETE、INDEX</li><li>存储过程：CREATE ROUTINE、ALTER ROUTINE、EXECUTE、TRIGGER</li><li><p>管理权限：SUPER、RELOAD、SHOW DATABASE、SHUTDOWN、</p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/privileges-provided.html">MySQL5.6权限</a></p></li></ul></li></ul><ul><li><p><strong>可选资源:</strong></p><ul><li>MAX_QUERIES_PER_HOUR <em>count</em></li><li>MAX_UPDATES_PER_HOUR <em>count</em></li><li>MAX_CONNECTIONS_PER_HOUR <em>count</em></li><li><p>MAX_USER_CONNECTIONS <em>count</em></p><p><strong>*tips:</strong>只能精确到小时，对于部分场景不适用，可以考虑中间件方式*</p></li></ul></li></ul><ul><li><strong>显示当前用户的权限</strong>  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#这三个是同一个意思</span>mysql<span class="token operator">></span> show grants<span class="token punctuation">;</span>mysql<span class="token operator">></span> show grants <span class="token keyword">for</span> current_user<span class="token punctuation">;</span>mysql<span class="token operator">></span> show grants <span class="token keyword">for</span> current_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> create user <span class="token string">'bob'</span>@<span class="token string">'127.0.0.1'</span> identified by <span class="token string">'123'</span><span class="token punctuation">;</span>        <span class="token comment">#创建一个认证用户为'bob'@'127.0.0.1',密码是123</span>mysql<span class="token operator">></span> grant all on NWDB.* to <span class="token string">'bob'</span>@<span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span>       <span class="token comment">#授予他NWDB库下面所有表的所有访问权限; *.*表示所有库的所有表</span>mysql<span class="token operator">></span> grant all on NWDB.* to <span class="token string">'alice'</span>@<span class="token string">'127.0.0.1'</span> identified by <span class="token string">'123'</span><span class="token punctuation">;</span>       <span class="token comment">#这个grant语句会搜索用户，如果用户不存在，则自动创建用户，</span>       <span class="token comment">#如果不带identified by, 则该用户名密码为空</span>mysql<span class="token operator">></span> grant all on *.* to <span class="token string">'tom'</span>@<span class="token string">'192.168.10.%'</span> identified by <span class="token string">'123'</span> with grant option<span class="token punctuation">;</span>       <span class="token comment">#表示这个用户'tom'@'127.0.0.1'可以访问所有库的所有表，</span>       <span class="token comment">#同时，他还可以给其他用户授予权限(with grant option)，</span>       <span class="token comment">#注意如果，*.*改成了某一个指定的非USER库，</span>       <span class="token comment">#则tom没法去新建其他用户了，因为User库没有权限了</span>       <span class="token comment">#192.168.10.% 表示属于192.168.10.0/24网段的用户可以访问</span></code></pre><h3 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h3><ul><li><code>revoke</code> 关键字，该关键字只删除用户权限，不删除用户</li><li><code>revoke</code> 语法同<code>grant</code>一致, 从<code>grant ... to</code> 变为<code>revoke ... from</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL笔记之介绍和安装</title>
    <link href="/2017/08/02/2017-08-02-mysql-notes-install/"/>
    <url>/2017/08/02/2017-08-02-mysql-notes-install/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL版本选择"><a href="#MySQL版本选择" class="headerlink" title="MySQL版本选择"></a>MySQL版本选择</h3><ol><li>MySQL5.6以后的版本，推荐使用官方版本。</li><li>Percona：在5.6版本以后，MySQL将Percon之前优化集成到官方版本中;</li><li>MariaDB：无INNODB;且核心代码较老</li><li>MySQL在5.6以后不断重构源码，安装包越来越大，功能和性能在持续改进</li></ol><h3 id="MySQL官方网站介绍"><a href="#MySQL官方网站介绍" class="headerlink" title="MySQL官方网站介绍"></a>MySQL官方网站介绍</h3><p>官方网站：<a href="http://www.mysql.com">http://www.mysql.com</a></p><ol><li><p><strong>Developer Zone</strong>： MySQL开发工程师板块</p><ul><li>Articles： Oracle工程师自己的博客</li><li>Plant MySQL： 和MySQL相关从业人员的博客</li><li>Bugs：MySQL BugList</li><li>Worklog：开发记录</li><li>Labs：MySQL实验性项目</li></ul></li><li><p><strong>Downloads</strong>：MySQL下载</p><ul><li>Enterprise：MySQL企业版本相关，略过</li><li>Community：社区版，我们下载和使用社区版<ul><li>MySQL Community Server：MySQL Server</li><li>MySQL Fabric : 和管理相关的工具</li><li>MySQL Router：路由中间件</li><li>MySQL Utilities：MySQL应用程序包</li><li>MySQL Workbench：官方图型化管理界面</li><li>MySQL Proxy：MySQL代理。Alpha版本，不推荐</li></ul></li></ul></li><li><p><strong>Documentation</strong>：MySQL文档</p><ul><li>官方文档 版面更改，下载离线文档在左侧Menu的下面<ul><li><a href="http://downloads.mysql.com/docs/refman-5.7-en.a4.pdf">PDF A4</a></li><li><a href="http://downloads.mysql.com/docs/refman-5.7-en.epub">EPUB</a></li><li><a href="http://downloads.mysql.com/docs/refman-5.7-en.html-chapter.zip">HTML</a></li></ul></li></ul></li></ol><a id="more"></a><h3 id="MySQL下载"><a href="#MySQL下载" class="headerlink" title="MySQL下载"></a>MySQL下载</h3><ol><li>推荐下载<code>Linux-Generic</code>版本</li><li><code>Source Code</code>版本主要作用是为了让开发人员研究源码使用，自己编译对性能提升不明显</li><li>不推荐<code>Version 5.5.X</code>，有部分bug</li><li>推荐使用<code>Version 5.6.X</code>和<code>Version 5.7.X</code></li></ol><p><em>下载地址：</em><br><a href="http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.9-linux-glibc2.5-x86_64.tar.gz">MySQL Community Server 5.7.9 Linux Generic x86-64bit</a><br><a href="http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.27-linux-glibc2.5-x86_64.tar.gz">MySQL Community Server 5.6.27 Linux Generic x86-64bit</a></p><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><ol><li><p>安装通用步骤：</p><ul><li>解压缩<code>mysql-VERSION-linux-glibc2.5-x86_64.tar.gz</code></li><li>打开<code>INSTALL_BINARY</code> 文件，按照<code>shell&gt;</code>开头的步骤进行操作</li><li>将<code>export PATH=/安装路径/mysql/bin:$PATH</code>添加到<code>/etc/profile</code></li><li><code>chkconfig mysqld on</code>或者<code>chkconfig mysqld.server on</code>视你的环境而定，详细步骤如下</li></ul></li><li><p>MySQL 5.6.X 安装：</p> <pre class="language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">></span> yum <span class="token function">install</span> libaio <span class="token comment"># Debain系用户:apt-get install libaio1</span>shell<span class="token operator">></span> <span class="token function">groupadd</span> mysqlshell<span class="token operator">></span> <span class="token function">useradd</span> -r -g mysql mysqlshell<span class="token operator">></span> <span class="token builtin class-name">cd</span> /usr/localshell<span class="token operator">></span> <span class="token function">tar</span> zxvf /path/to/mysql-VERSION-OS.tar.gzshell<span class="token operator">></span> <span class="token function">ln</span> -s full-path-to-mysql-VERSION-OS mysqlshell<span class="token operator">></span> <span class="token builtin class-name">cd</span> mysqlshell<span class="token operator">></span> <span class="token function">chown</span> -R mysql <span class="token builtin class-name">.</span>shell<span class="token operator">></span> <span class="token function">chgrp</span> -R mysql <span class="token builtin class-name">.</span>shell<span class="token operator">></span> scripts/mysql_install_db --user<span class="token operator">=</span>mysqlshell<span class="token operator">></span> <span class="token function">chown</span> -R root <span class="token builtin class-name">.</span>shell<span class="token operator">></span> <span class="token function">chown</span> -R mysql datashell<span class="token operator">></span> bin/mysqld_safe --user<span class="token operator">=</span>mysql <span class="token operator">&amp;</span><span class="token comment"># Next command is optional</span>shell<span class="token operator">></span> <span class="token function">cp</span> support-files/mysql.server /etc/init.d/mysql.server </code></pre></li><li><p>MySQL 5.7.X 安装     </p> <pre class="language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">></span> <span class="token function">groupadd</span> mysqlshell<span class="token operator">></span> <span class="token function">useradd</span> -r -g mysql mysqlshell<span class="token operator">></span> <span class="token builtin class-name">cd</span> /usr/localshell<span class="token operator">></span> <span class="token function">tar</span> zxvf /path/to/mysql-VERSION-OS.tar.gzshell<span class="token operator">></span> <span class="token function">ln</span> -s full-path-to-mysql-VERSION-OS mysqlshell<span class="token operator">></span> <span class="token builtin class-name">cd</span> mysqlshell<span class="token operator">></span> <span class="token function">mkdir</span> mysql-filesshell<span class="token operator">></span> <span class="token function">chmod</span> <span class="token number">770</span> mysql-filesshell<span class="token operator">></span> <span class="token function">chown</span> -R mysql <span class="token builtin class-name">.</span>shell<span class="token operator">></span> <span class="token function">chgrp</span> -R mysql <span class="token builtin class-name">.</span>shell<span class="token operator">></span> bin/mysqld --initialize --user<span class="token operator">=</span>mysql <span class="token comment">#该步骤中会产生零时</span>                                            <span class="token comment">#root@localhost密码</span>                                            <span class="token comment">#需要自己记录下来</span>shell<span class="token operator">></span> bin/mysql_ssl_rsa_setup          shell<span class="token operator">></span> <span class="token function">chown</span> -R root <span class="token builtin class-name">.</span>shell<span class="token operator">></span> <span class="token function">chown</span> -R mysql data mysql-filesshell<span class="token operator">></span> bin/mysqld_safe --user<span class="token operator">=</span>mysql <span class="token operator">&amp;</span><span class="token comment"># Next command is optional</span>shell<span class="token operator">></span> <span class="token function">cp</span> support-files/mysql.server /etc/init.d/mysql.server</code></pre></li><li><p>验证安装</p><ul><li><code>data</code>目录在安装之前是空目录，安装完成后应该有<code>ibXXX</code>等文件</li><li>安装过程中输出的信息中，不应该含有<code>ERROR</code>信息，错误信息<code>默认</code>会写入到<code>$HOSTNAME.err</code>的文件中</li><li>通过<code>bin/mysql</code>命令（<em>5.7.X含有临时密码</em>）可以正常登录</li></ul></li><li><p>MySQL启动</p><ul><li><code>mysqld_safe --user=mysql &amp;</code> 即可启动，<code>mysqld_safe</code>是一个守护<code>mysqld</code>进程的脚本程序，旨在<code>mysqld</code>意外停止时，可以重启<code>mysqld</code>进程</li><li>也可以通过<code>INSTALL_BINARRY</code>中的的步骤，使用<code>/etc/init.d/mysql.server  start</code>进行启动（启动脚本以你复制的实际名字为准，通常改名为<code>mysqld</code>,即<code>/etc/init.d/mysqld start</code>）</li></ul></li></ol><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ol><li><p>模版配置文件<a href="https://github.com/lyln/mysql_best_configuration">my.cnf</a></p> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>prompt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">\</span><span class="token punctuation">\</span>u@<span class="token punctuation">\</span><span class="token punctuation">\</span>h<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">\</span><span class="token punctuation">\</span>d<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">\</span><span class="token punctuation">\</span>_<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment">########basic settings########</span>server-id <span class="token operator">=</span> <span class="token number">11</span> port <span class="token operator">=</span> <span class="token number">3306</span>user <span class="token operator">=</span> mysqlbind_address <span class="token operator">=</span> <span class="token number">10.166</span>.224.32   <span class="token comment">#根据实际情况修改</span>autocommit <span class="token operator">=</span> <span class="token number">1</span>   <span class="token comment">#自动提交</span><span class="token assign-left variable">character_set_server</span><span class="token operator">=</span>utf8mb4skip_name_resolve <span class="token operator">=</span> <span class="token number">1</span>max_connections <span class="token operator">=</span> <span class="token number">800</span>max_connect_errors <span class="token operator">=</span> <span class="token number">1000</span>datadir <span class="token operator">=</span> /data/mysql_data      <span class="token comment">#根据实际情况修改,建议和程序分离存放</span>transaction_isolation <span class="token operator">=</span> READ-COMMITTEDexplicit_defaults_for_timestamp <span class="token operator">=</span> <span class="token number">1</span>join_buffer_size <span class="token operator">=</span> <span class="token number">134217728</span>tmp_table_size <span class="token operator">=</span> <span class="token number">67108864</span>tmpdir <span class="token operator">=</span> /tmpmax_allowed_packet <span class="token operator">=</span> <span class="token number">16777216</span>sql_mode <span class="token operator">=</span> <span class="token string">"STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER"</span>interactive_timeout <span class="token operator">=</span> <span class="token number">1800</span>wait_timeout <span class="token operator">=</span> <span class="token number">1800</span>read_buffer_size <span class="token operator">=</span> <span class="token number">16777216</span>read_rnd_buffer_size <span class="token operator">=</span> <span class="token number">33554432</span>sort_buffer_size <span class="token operator">=</span> <span class="token number">33554432</span><span class="token comment">########log settings########</span>log_error <span class="token operator">=</span> error.logslow_query_log <span class="token operator">=</span> <span class="token number">1</span>slow_query_log_file <span class="token operator">=</span> slow.loglog_queries_not_using_indexes <span class="token operator">=</span> <span class="token number">1</span>log_slow_admin_statements <span class="token operator">=</span> <span class="token number">1</span>log_slow_slave_statements <span class="token operator">=</span> <span class="token number">1</span>log_throttle_queries_not_using_indexes <span class="token operator">=</span> <span class="token number">10</span>expire_logs_days <span class="token operator">=</span> <span class="token number">90</span>long_query_time <span class="token operator">=</span> <span class="token number">2</span>min_examined_row_limit <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">########replication settings########</span>master_info_repository <span class="token operator">=</span> TABLErelay_log_info_repository <span class="token operator">=</span> TABLElog_bin <span class="token operator">=</span> bin.logsync_binlog <span class="token operator">=</span> <span class="token number">1</span>gtid_mode <span class="token operator">=</span> onenforce_gtid_consistency <span class="token operator">=</span> <span class="token number">1</span>log_slave_updatesbinlog_format <span class="token operator">=</span> row relay_log <span class="token operator">=</span> relay.logrelay_log_recovery <span class="token operator">=</span> <span class="token number">1</span>binlog_gtid_simple_recovery <span class="token operator">=</span> <span class="token number">1</span>slave_skip_errors <span class="token operator">=</span> ddl_exist_errors<span class="token comment">########innodb settings########</span>innodb_page_size <span class="token operator">=</span> <span class="token number">8192</span>innodb_buffer_pool_size <span class="token operator">=</span> 6G    <span class="token comment">#根据实际情况修改</span>innodb_buffer_pool_instances <span class="token operator">=</span> <span class="token number">8</span>innodb_buffer_pool_load_at_startup <span class="token operator">=</span> <span class="token number">1</span>innodb_buffer_pool_dump_at_shutdown <span class="token operator">=</span> <span class="token number">1</span>innodb_lru_scan_depth <span class="token operator">=</span> <span class="token number">2000</span>innodb_lock_wait_timeout <span class="token operator">=</span> <span class="token number">5</span>innodb_io_capacity <span class="token operator">=</span> <span class="token number">4000</span>innodb_io_capacity_max <span class="token operator">=</span> <span class="token number">8000</span>innodb_flush_method <span class="token operator">=</span> O_DIRECTinnodb_file_format <span class="token operator">=</span> Barracudainnodb_file_format_max <span class="token operator">=</span> Barracudainnodb_log_group_home_dir <span class="token operator">=</span> /redolog/  <span class="token comment">#根据实际情况修改</span>innodb_undo_directory <span class="token operator">=</span> /undolog/      <span class="token comment">#根据实际情况修改</span>innodb_undo_logs <span class="token operator">=</span> <span class="token number">128</span>innodb_undo_tablespaces <span class="token operator">=</span> <span class="token number">3</span>innodb_flush_neighbors <span class="token operator">=</span> <span class="token number">1</span>innodb_log_file_size <span class="token operator">=</span> 4G               <span class="token comment">#根据实际情况修改</span>innodb_log_buffer_size <span class="token operator">=</span> <span class="token number">16777216</span>innodb_purge_threads <span class="token operator">=</span> <span class="token number">4</span>innodb_large_prefix <span class="token operator">=</span> <span class="token number">1</span>innodb_thread_concurrency <span class="token operator">=</span> <span class="token number">64</span>innodb_print_all_deadlocks <span class="token operator">=</span> <span class="token number">1</span>innodb_strict_mode <span class="token operator">=</span> <span class="token number">1</span>innodb_sort_buffer_size <span class="token operator">=</span> <span class="token number">67108864</span> <span class="token comment">########semi sync replication settings########</span><span class="token assign-left variable">plugin_dir</span><span class="token operator">=</span>/usr/local/mysql/lib/plugin      <span class="token comment">#根据实际情况修改</span>plugin_load <span class="token operator">=</span> <span class="token string">"rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"</span>loose_rpl_semi_sync_master_enabled <span class="token operator">=</span> <span class="token number">1</span>loose_rpl_semi_sync_slave_enabled <span class="token operator">=</span> <span class="token number">1</span>loose_rpl_semi_sync_master_timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">[</span>mysqld-5.7<span class="token punctuation">]</span>innodb_buffer_pool_dump_pct <span class="token operator">=</span> <span class="token number">40</span>innodb_page_cleaners <span class="token operator">=</span> <span class="token number">4</span>innodb_undo_log_truncate <span class="token operator">=</span> <span class="token number">1</span>innodb_max_undo_log_size <span class="token operator">=</span> 2Ginnodb_purge_rseg_truncate_frequency <span class="token operator">=</span> <span class="token number">128</span><span class="token assign-left variable">binlog_gtid_simple_recovery</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">log_timestamps</span><span class="token operator">=</span>system<span class="token assign-left variable">transaction_write_set_extraction</span><span class="token operator">=</span>MURMUR32<span class="token assign-left variable">show_compatibility_56</span><span class="token operator">=</span>on</code></pre></li><li><p>几个重要的参数配置和说明 </p><ul><li><p><code>innodb_log_file_size = 4G</code> :做实验可以更改的小点，线上环境推荐用4G，<br>以前5.5和5.1等版本之所以官方给的值很小，是因为太大后有bug，现在bug已经修复</p></li><li><p><code>innodb_undo_logs = 128</code>和<code>innodb_undo_tablespaces = 3</code>建议在安装之前就确定好该值，后续修改比较麻烦</p></li><li><code>[mysqld]</code>，<code>[mysqld-5.7]</code>这种tag表明了下面的配置在什么版本下才生效,<code>[mysqld]</code>下均生效</li><li><code>autocommit</code>,这个参数在5.5.X以后才有，安装5.6.X的时候要注意先把该参数注释掉，等安装完成后，再行打开, 5.7.X无需预先注释</li><li><code>datadir</code>, <code>innodb_log_group_home_dir</code>, <code>innodb_undo_directory</code>一定要注意他的权限是 <code>mysql:mysql</code></li></ul></li><li><p><code>my.cnf</code>问题</p><ul><li>使用<code>mysqld --help -vv | grep my.cnf</code>查看mysql的配置文件读取顺序<pre class="language-bash" data-language="bash"><code class="language-bash">Default options are <span class="token builtin class-name">read</span> from the following files <span class="token keyword">in</span> the given order:/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf </code></pre></li><li>后读取的<code>my.cnf</code>中的配置，如果有相同项，会覆盖之前的配置</li><li>使用<code>--defaults-files</code>可指定配置文件</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pyenv 管理 Python 版本 </title>
    <link href="/2017/04/22/2017-04-22-pyenv-manager-python-versions/"/>
    <url>/2017/04/22/2017-04-22-pyenv-manager-python-versions/</url>
    
    <content type="html"><![CDATA[<p>pyenv 是 Python 版本管理工具。 pyenv 可以改变全局的 Python 版本，安装多个版本的 Python， 设置目录级别的 Python 版本，还能创建和管理 virtual python environments 。所有的设置都是用户级别的操作，不需要 sudo 命令。</p><p>pyenv 主要用来管理 Python 的版本，比如一个项目需要 Python 2.x ，一个项目需要 Python 3.x 。 而 virtualenv 主要用来管理 Python 包的依赖，不同项目需要依赖的包版本不同，则需要使用虚拟环境。</p><a id="more"></a><h3 id="pyenv安装"><a href="#pyenv安装" class="headerlink" title="pyenv安装"></a>pyenv安装</h3><p>如果使用 Mac 直接使用 Homebrew<br><pre class="language-none"><code class="language-none">brew install pyenv</code></pre></p><p>自动安装<br><pre class="language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;yyuu&#x2F;pyenv-installer&#x2F;master&#x2F;bin&#x2F;pyenv-installer | bash</code></pre></p><p>手动安装<br>将 pyenv 检出到你想安装的目录。建议路径为：$HOME/.pyenv<br><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;pyenv&#x2F;pyenv.git ~&#x2F;.pyenvecho &#39;export PYENV_ROOT&#x3D;&quot;$HOME&#x2F;.pyenv&quot;&#39; &gt;&gt; ~&#x2F;.bash_profileecho &#39;export PATH&#x3D;&quot;$PYENV_ROOT&#x2F;bin:$PATH&quot;&#39; &gt;&gt; ~&#x2F;.bash_profileecho &#39;eval &quot;$(pyenv init -)&quot;&#39; &gt;&gt; ~&#x2F;.bash_profilesource ~&#x2F;.bash_profile</code></pre></p><p>卸载<br>移除变量配置<br><pre class="language-none"><code class="language-none">rm -fr ~&#x2F;.pyenv</code></pre></p><h3 id="pyenv-常用命令"><a href="#pyenv-常用命令" class="headerlink" title="pyenv 常用命令"></a>pyenv 常用命令</h3><pre class="language-none"><code class="language-none">使用如下命令查看可安装版本pyenv install -l查看当前pyenv可检测到的所有版本,处于激活状态的版本前以 * 标示pyenv versions查看当前处于激活状态的版本,括号中内容表示这个版本是由哪条途径激活的（global、local、shell）pyenv version   安装与卸载pyenv install 3.6.3pyenv uninstall 3.6.3</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pyenv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRS使用小记</title>
    <link href="/2017/02/27/2017-02-27-srs-manual-install/"/>
    <url>/2017/02/27/2017-02-27-srs-manual-install/</url>
    
    <content type="html"><![CDATA[<h3 id="SRS简介"><a href="#SRS简介" class="headerlink" title="SRS简介"></a>SRS简介</h3><p>互联网上的两种主要的分发方式：HLS和RTMP。<br>SRS支持HLS/RTMP两种成熟而且广泛应用的流媒体分发方式。</p><p>HLS指Apple的HLS(Http Live Streaming)，本身就是Live（直播）的，不过Vod（点播）也能支持。HLS是Apple平台的标准流媒体协议，和RTMP在PC上一样支持得天衣无缝。</p><p>SRS直播将RTMP作为基本协议，以各种方式转码为RTMP后输入到SRS，输出为RTMP和HLS，支持广泛的客户端和各种应用场景。<br>SRS点播还在计划中，不会使用RTMP作为点播协议，点播还是文件为主，即HTTP协议为主。</p><p>SRS编译配置参数详解<br><a href="https://github.com/ossrs/srs/wiki/v2_CN_Build">https://github.com/ossrs/srs/wiki/v2_CN_Build</a><br><a id="more"></a></p><h3 id="获取SRS"><a href="#获取SRS" class="headerlink" title="获取SRS"></a>获取SRS</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone  https://github.com/ossrs/srs</code></pre><h3 id="编译SRS"><a href="#编译SRS" class="headerlink" title="编译SRS"></a>编译SRS</h3><pre class="language-bash" data-language="bash"><code class="language-bash">./configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -j4</code></pre><h3 id="启动SRS"><a href="#启动SRS" class="headerlink" title="启动SRS"></a>启动SRS</h3><pre class="language-bash" data-language="bash"><code class="language-bash">./objs/srs -c conf/srs.conf<span class="token function">cp</span> etc/init.d/srs /etc/init.d/srs 注意修改配置文件<span class="token assign-left variable">CONFIG</span><span class="token operator">=</span><span class="token string">"./conf/srs.conf"</span></code></pre><h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><p>SRS的使用,主要是对配置文件的理解<br><pre class="language-bash" data-language="bash"><code class="language-bash">conf/srs.conf<span class="token comment"># main config for srs.</span><span class="token comment"># @see full.conf for detail config.</span>listen              <span class="token number">1935</span><span class="token punctuation">;</span> <span class="token comment">#监听端口</span>max_connections     <span class="token number">1000</span><span class="token punctuation">;</span>srs_log_tank        <span class="token function">file</span><span class="token punctuation">;</span>srs_log_file        ./objs/srs.log<span class="token punctuation">;</span>http_api <span class="token punctuation">&#123;</span>    enabled         on<span class="token punctuation">;</span>    listen          <span class="token number">1985</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http_server <span class="token punctuation">&#123;</span>    enabled         on<span class="token punctuation">;</span>    listen          <span class="token number">8085</span><span class="token punctuation">;</span>    <span class="token function">dir</span>             ./objs/nginx/html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stats <span class="token punctuation">&#123;</span>    network         <span class="token number">0</span><span class="token punctuation">;</span>    disk            sda sdb xvda xvdb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vhost __defaultVhost__ <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>---RTMP Cluster配置conf/edge.conf <span class="token comment"># the config for srs origin-edge cluster</span><span class="token comment"># @see https://github.com/ossrs/srs/wiki/v1_CN_Edge</span><span class="token comment"># @see full.conf for detail config.</span>listen              <span class="token number">19350</span><span class="token punctuation">;</span> <span class="token comment">#边缘节点监听端口</span>max_connections     <span class="token number">1000</span><span class="token punctuation">;</span>pid                 objs/edge.pid<span class="token punctuation">;</span>daemon              off<span class="token punctuation">;</span>srs_log_tank        console<span class="token punctuation">;</span>vhost __defaultVhost__ <span class="token punctuation">&#123;</span>    mode            remote<span class="token punctuation">;</span>    origin          <span class="token number">127.0</span>.0.1:1935<span class="token punctuation">;</span>　<span class="token comment">#源节点监听端口</span><span class="token punctuation">&#125;</span>---HTTP FLV Live Stream配置在vhost下添加http_remuxvhost __defaultVhost__ <span class="token punctuation">&#123;</span>    http_remux <span class="token punctuation">&#123;</span>        enabled     on<span class="token punctuation">;</span>        <span class="token function">mount</span>       <span class="token punctuation">[</span>vhost<span class="token punctuation">]</span>/<span class="token punctuation">[</span>app<span class="token punctuation">]</span>/<span class="token punctuation">[</span>stream<span class="token punctuation">]</span>.flv<span class="token punctuation">;</span>        hstrs       on<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>播放流地址HTTP FLV: http://192.168.1.158:8085/live/ljd.flvhttps://github.com/ossrs/srs/wiki/v2_CN_DeliveryHttpStream<span class="token comment">#http-live-stream-config</span>---HTTP FLV Live Stream Cluster配置单独节点，区别于在vhost下添加vhost __defaultVhost__ <span class="token punctuation">&#123;</span>    mode remote<span class="token punctuation">;</span> <span class="token comment"># 边缘节点开启</span>    origin <span class="token number">192.168</span>.1.158<span class="token punctuation">;</span> <span class="token comment">#源节点地址</span>    http_remux <span class="token punctuation">&#123;</span>        enabled     on<span class="token punctuation">;</span>        <span class="token function">mount</span>       <span class="token punctuation">[</span>vhost<span class="token punctuation">]</span>/<span class="token punctuation">[</span>app<span class="token punctuation">]</span>/<span class="token punctuation">[</span>stream<span class="token punctuation">]</span>.flv<span class="token punctuation">;</span>        hstrs       on<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>---HLS分发配置在vhost下添加hlsvhost __defaultVhost__ <span class="token punctuation">&#123;</span>    hls <span class="token punctuation">&#123;</span>        enabled         on<span class="token punctuation">;</span>        hls_fragment    <span class="token number">10</span><span class="token punctuation">;</span>        hls_window      <span class="token number">60</span><span class="token punctuation">;</span>        hls_path        ./objs/nginx/html<span class="token punctuation">;</span>        hls_m3u8_file   <span class="token punctuation">[</span>app<span class="token punctuation">]</span>/<span class="token punctuation">[</span>stream<span class="token punctuation">]</span>.m3u8<span class="token punctuation">;</span>        hls_ts_file     <span class="token punctuation">[</span>app<span class="token punctuation">]</span>/<span class="token punctuation">[</span>stream<span class="token punctuation">]</span>-<span class="token punctuation">[</span>seq<span class="token punctuation">]</span>.ts<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>HLS流地址为： http://192.168.1.158/live/ljd.m3u8---转码HLS后分发HLS需要h.264+aac,若不符合这个要求则需要转码。在vhost下添加transcode 转码vhost __defaultVhost__ <span class="token punctuation">&#123;</span><span class="token punctuation">..</span>.<span class="token comment">#低延时配置</span>gop_cache       off<span class="token punctuation">;</span>    queue_length    <span class="token number">10</span><span class="token punctuation">;</span>    min_latency     on<span class="token punctuation">;</span>    mr <span class="token punctuation">&#123;</span>        enabled     off<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    mw_latency      <span class="token number">100</span><span class="token punctuation">;</span>    tcp_nodelay     on<span class="token punctuation">;</span>    <span class="token comment">#转码HLS</span>    transcode live<span class="token punctuation">&#123;</span>        <span class="token comment"># whether the transcode enabled.</span>        <span class="token comment"># if off, donot transcode.</span>        <span class="token comment"># default: off.</span>        enabled     on<span class="token punctuation">;</span>        <span class="token comment"># the ffmpeg </span>        ffmpeg      /usr/local/ffmpeg/bin/ffmpeg<span class="token punctuation">;</span>        <span class="token comment"># the transcode engine for matched stream.</span>        <span class="token comment"># all matched stream will transcoded to the following stream.</span>        <span class="token comment"># the transcode set name(ie. hd) is optional and not used.</span>        engine ff <span class="token punctuation">&#123;</span>            <span class="token comment"># whether the engine is enabled</span>            <span class="token comment"># default: off.</span>            enabled         on<span class="token punctuation">;</span>            <span class="token comment"># input format, can be:</span>            <span class="token comment"># off, do not specifies the format, ffmpeg will guess it.</span>            <span class="token comment"># flv, for flv or RTMP stream.</span>            <span class="token comment"># other format, for example, mp4/aac whatever.</span>            <span class="token comment"># default: flv</span>            iformat         flv<span class="token punctuation">;</span>            <span class="token comment"># video encoder name. can be:</span>            <span class="token comment">#       libx264: use h.264(libx264) video encoder.</span>            <span class="token comment">#       copy: donot encoder the video stream, copy it.</span>            <span class="token comment">#       vn: disable video output.</span>            vcodec          libx264<span class="token punctuation">;</span>            <span class="token comment"># video bitrate, in kbps</span>            <span class="token comment"># @remark 0 to use source video bitrate.</span>            <span class="token comment"># default: 0</span>            vbitrate        <span class="token number">1500</span><span class="token punctuation">;</span>            <span class="token comment"># video framerate.</span>            <span class="token comment"># @remark 0 to use source video fps.</span>            <span class="token comment"># default: 0</span>            vfps            <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment"># video width, must be even numbers.</span>            <span class="token comment"># @remark 0 to use source video width.</span>            <span class="token comment"># default: 0</span>            vwidth          <span class="token number">1440</span><span class="token punctuation">;</span>            <span class="token comment"># video height, must be even numbers.</span>            <span class="token comment"># @remark 0 to use source video height.</span>            <span class="token comment"># default: 0</span>            vheight         <span class="token number">720</span><span class="token punctuation">;</span>            <span class="token comment"># the max threads for ffmpeg to used.</span>            <span class="token comment"># default: 1</span>            vthreads        <span class="token number">12</span><span class="token punctuation">;</span>            <span class="token comment"># x264 profile, @see x264 -help, can be:</span>            <span class="token comment"># high,main,baseline</span>            vprofile        main<span class="token punctuation">;</span>            <span class="token comment"># x264 preset, @see x264 -help, can be: </span>            <span class="token comment">#       ultrafast,superfast,veryfast,faster,fast</span>            <span class="token comment">#       medium,slow,slower,veryslow,placebo</span>            vpreset         medium<span class="token punctuation">;</span>            <span class="token comment"># other x264 or ffmpeg video params</span>            vparams <span class="token punctuation">&#123;</span>                <span class="token comment"># ffmpeg options, @see: http://ffmpeg.org/ffmpeg.html</span>                t               <span class="token number">100</span><span class="token punctuation">;</span>                <span class="token comment"># 264 params, @see: http://ffmpeg.org/ffmpeg-codecs.html#libx264</span>                coder           <span class="token number">1</span><span class="token punctuation">;</span>                b_strategy      <span class="token number">2</span><span class="token punctuation">;</span>                bf              <span class="token number">3</span><span class="token punctuation">;</span>                refs            <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment"># audio encoder name. can be:</span>            <span class="token comment">#       libfdk_aac: use aac(libfdk_aac) audio encoder.</span>            <span class="token comment">#       copy: donot encoder the audio stream, copy it.</span>            <span class="token comment">#       an: disable audio output.</span>            acodec          copy<span class="token punctuation">;</span>            <span class="token comment"># audio bitrate, in kbps. [16, 72] for libfdk_aac.</span>            <span class="token comment"># @remark 0 to use source audio bitrate.</span>            <span class="token comment"># default: 0</span>            abitrate        <span class="token number">70</span><span class="token punctuation">;</span>            <span class="token comment"># audio sample rate. for flv/rtmp, it must be:</span>            <span class="token comment">#       44100,22050,11025,5512</span>            <span class="token comment"># @remark 0 to use source audio sample rate.</span>            <span class="token comment"># default: 0</span>            asample_rate    <span class="token number">44100</span><span class="token punctuation">;</span>            <span class="token comment"># audio channel, 1 for mono, 2 for stereo.</span>            <span class="token comment"># @remark 0 to use source audio channels.</span>            <span class="token comment"># default: 0</span>            achannels       <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment"># other ffmpeg audio params</span>            aparams <span class="token punctuation">&#123;</span>                <span class="token comment"># audio params, @see: http://ffmpeg.org/ffmpeg-codecs.html#Audio-Encoders</span>                <span class="token comment"># @remark SRS supported aac profile for HLS is: aac_low, aac_he, aac_he_v2</span>                profile:a   aac_low<span class="token punctuation">;</span>                bsf:a       aac_adtstoasc<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment"># output format, can be:</span>            <span class="token comment">#       off, do not specifies the format, ffmpeg will guess it.</span>            <span class="token comment">#       flv, for flv or RTMP stream.</span>            <span class="token comment">#       other format, for example, mp4/aac whatever.</span>            <span class="token comment"># default: flv</span>            oformat         flv<span class="token punctuation">;</span>            <span class="token comment"># output stream. variables:</span>            <span class="token comment">#       [vhost] the input stream vhost.</span>            <span class="token comment">#       [port] the intput stream port.</span>            <span class="token comment">#       [app] the input stream app.</span>            <span class="token comment">#       [stream] the input stream name.</span>            <span class="token comment">#       [engine] the tanscode engine name.</span>            output          rtmp://127.0.0.1:<span class="token punctuation">[</span>port<span class="token punctuation">]</span>/<span class="token punctuation">[</span>app<span class="token punctuation">]</span>?vhost<span class="token operator">=</span><span class="token punctuation">[</span>vhost<span class="token punctuation">]</span>/<span class="token punctuation">[</span>stream<span class="token punctuation">]</span>_<span class="token punctuation">[</span>engine<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>转码后的RTMP流地址为：rtmp://192.168.1.158/live/ljd_ff转码后的HLS流地址为： http://192.168.1.158/live/ljd_ff.m3u8---SRS支持将RTMP流录制成flv文件vhost __defaultVhost__ <span class="token punctuation">&#123;</span>dvr <span class="token punctuation">&#123;</span>        <span class="token comment"># whether enabled dvr features</span>        <span class="token comment"># default: off</span>        enabled         on<span class="token punctuation">;</span>        <span class="token comment"># the dvr output path.</span>        <span class="token comment"># we supports some variables to generate the filename.</span>        <span class="token comment">#       [vhost], the vhost of stream.</span>        <span class="token comment">#       [app], the app of stream.</span>        <span class="token comment">#       [stream], the stream name of stream.</span>        <span class="token comment">#       [2006], replace this const to current year.</span>        <span class="token comment">#       [01], replace this const to current month.</span>        <span class="token comment">#       [02], replace this const to current date.</span>        <span class="token comment">#       [15], replace this const to current hour.</span>        <span class="token comment">#       [04], repleace this const to current minute.</span>        <span class="token comment">#       [05], repleace this const to current second.</span>        <span class="token comment">#       [999], repleace this const to current millisecond.</span>        <span class="token comment">#       [timestamp],replace this const to current UNIX timestamp in ms.</span>        <span class="token comment"># @remark we use golang time format "2006-01-02 15:04:05.999"</span>        <span class="token comment"># for example, for url rtmp://ossrs.net/live/livestream and time 2015-01-03 10:57:30.776</span>        <span class="token comment"># 1. No variables, the rule of SRS1.0(auto add [stream].[timestamp].flv as filename):</span>        <span class="token comment">#       dvr_path ./objs/nginx/html;</span>        <span class="token comment">#       =></span>        <span class="token comment">#       dvr_path ./objs/nginx/html/live/livestream.1420254068776.flv;</span>        <span class="token comment"># 2. Use stream and date as dir name, time as filename:</span>        <span class="token comment">#       dvr_path /data/[vhost]/[app]/[stream]/[2006]/[01]/[02]/[15].[04].[05].[999].flv;</span>        <span class="token comment">#       =></span>        <span class="token comment">#       dvr_path /data/ossrs.net/live/livestream/2015/01/03/10.57.30.776.flv;</span>        <span class="token comment"># 3. Use stream and year/month as dir name, date and time as filename:</span>        <span class="token comment">#       dvr_path /data/[vhost]/[app]/[stream]/[2006]/[01]/[02]-[15].[04].[05].[999].flv;</span>        <span class="token comment">#       =></span>        <span class="token comment">#       dvr_path /data/ossrs.net/live/livestream/2015/01/03-10.57.30.776.flv;</span>        <span class="token comment"># 4. Use vhost/app and year/month as dir name, stream/date/time as filename:</span>        <span class="token comment">#       dvr_path /data/[vhost]/[app]/[2006]/[01]/[stream]-[02]-[15].[04].[05].[999].flv;</span>        <span class="token comment">#       =></span>        <span class="token comment">#       dvr_path /data/ossrs.net/live/2015/01/livestream-03-10.57.30.776.flv;</span>        <span class="token comment"># @see https://github.com/ossrs/srs/wiki/v2_CN_DVR#custom-path</span>        <span class="token comment"># @see https://github.com/ossrs/srs/wiki/v2_CN_DVR#custom-path</span>        <span class="token comment"># default: ./objs/nginx/html/[app]/[stream].[timestamp].flv</span>        dvr_path        ./objs/nginx/html/<span class="token punctuation">[</span>app<span class="token punctuation">]</span>/<span class="token punctuation">[</span>stream<span class="token punctuation">]</span>.<span class="token punctuation">[</span>timestamp<span class="token punctuation">]</span>.flv<span class="token punctuation">;</span>        <span class="token comment"># the dvr plan. canbe:</span>        <span class="token comment">#   session reap flv when session end(unpublish).</span>        <span class="token comment">#   segment reap flv when flv duration exceed the specified dvr_duration.</span>        <span class="token comment"># default: session</span>        dvr_plan        session<span class="token punctuation">;</span>        <span class="token comment"># the param for plan(segment), in seconds.</span>        <span class="token comment"># default: 30</span>        dvr_duration    <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token comment"># the param for plan(segment),</span>        <span class="token comment"># whether wait keyframe to reap segment,</span>        <span class="token comment"># if off, reap segment when duration exceed the dvr_duration,</span>        <span class="token comment"># if on, reap segment when duration exceed and got keyframe.</span>        <span class="token comment"># default: on</span>        dvr_wait_keyframe       on<span class="token punctuation">;</span>        <span class="token comment"># about the stream monotonically increasing:</span>        <span class="token comment">#   1. video timestamp is monotonically increasing, </span>        <span class="token comment">#   2. audio timestamp is monotonically increasing,</span>        <span class="token comment">#   3. video and audio timestamp is interleaved monotonically increasing.</span>        <span class="token comment"># it's specified by RTMP specification, @see 3. Byte Order, Alignment, and Time Format</span>        <span class="token comment"># however, some encoder cannot provides this feature, please set this to off to ignore time jitter.</span>        <span class="token comment"># the time jitter algorithm:</span>        <span class="token comment">#   1. full, to ensure stream start at zero, and ensure stream monotonically increasing.</span>        <span class="token comment">#   2. zero, only ensure sttream start at zero, ignore timestamp jitter.</span>        <span class="token comment">#   3. off, disable the time jitter algorithm, like atc.</span>        <span class="token comment"># default: full</span>        time_jitter             full<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>srs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx/Tomcat添加Https支持</title>
    <link href="/2016/12/03/2016-12-03-nginx-tomcat-https/"/>
    <url>/2016/12/03/2016-12-03-nginx-tomcat-https/</url>
    
    <content type="html"><![CDATA[<p>安装certbot<br><a href="https://certbot.eff.org/">https://certbot.eff.org/</a><br><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.eff.org&#x2F;certbot-autochmod a+x certbot-autonginx生成免费证书.&#x2F;certbot-auto certonly --webroot -w &#x2F;web&#x2F;ss-panel&#x2F;public -d ss.wiredtiger.orgnginx生成dhparamsopenssl dhparam -out &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;dhparams.pem 2048</code></pre><br><a id="more"></a><br>nginx配置添加<br><pre class="language-none"><code class="language-none">server &#123;#强制跳转https    listen 80;    server_name ss.wiredtiger.org;    return 301 https:&#x2F;&#x2F;$server_name$request_uri;&#125;server_name ss.wiredtiger.org;listen       443 ssl;ssl on;ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;ss.wiredtiger.org&#x2F;fullchain.pem;ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;ss.wiredtiger.org&#x2F;privkey.pem;ssl_dhparam &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;dhparams.pem;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers &quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;;add_header X-Frame-Options DENY;add_header X-Content-Type-Options nosniff;add_header X-Xss-Protection 1;</code></pre><br>tomcat生成免费证书<br><pre class="language-none"><code class="language-none">.&#x2F;certbot-auto  certonly --standalone -m lijd@rgbvr.com -d test.wiredtiger.org</code></pre><br>生成.p12文件<br><pre class="language-none"><code class="language-none">openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name tomcatadmin123</code></pre><br>.jks证书<br><pre class="language-none"><code class="language-none">keytool -importkeystore -deststorepass admin123 -destkeypass admin123 -destkeystore rgbvrkeystore.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass rgbvradmin -alias tomcat</code></pre><br>tomcat配置修改<br><pre class="language-none"><code class="language-none">&lt;Connector port&#x3D;&quot;8443&quot; protocol&#x3D;&quot;org.apache.coyote.http11.Http11NioProtocol&quot;           maxThreads&#x3D;&quot;150&quot; SSLEnabled&#x3D;&quot;true&quot; scheme&#x3D;&quot;https&quot; secure&#x3D;&quot;true&quot;           clientAuth&#x3D;&quot;false&quot; sslProtocol&#x3D;&quot;TLS&quot;            keystoreFile&#x3D;&quot;conf&#x2F;rgbvrkeystore.jks&quot;            keystorePass&#x3D;&quot;admin123&quot;            keyAlias&#x3D;&quot;tomcat&quot;            keyPass&#x3D;&quot;admin123&quot;&#x2F;&gt;</code></pre><br>证书更新<br><pre class="language-none"><code class="language-none">.&#x2F;certbot-auto renew</code></pre><br>SSL Server测试<br><a href="https://www.ssllabs.com/ssltest/index.html">https://www.ssllabs.com/ssltest/index.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何向Nexus上添加第三方Repository</title>
    <link href="/2016/11/29/2016-11-29-how-to-add-repo-nexus/"/>
    <url>/2016/11/29/2016-11-29-how-to-add-repo-nexus/</url>
    
    <content type="html"><![CDATA[<p>登陆nexus</p><p>点击Repositories-&gt;Proxy Repository，如下图：<br><img src="https://lyln.oss-cn-beijing.aliyuncs.com/wiredtiger/201611/nexus-1.png" alt="添加"></p><p>在打开的页面中填入以下三项，然后点保存：<br><img src="https://lyln.oss-cn-beijing.aliyuncs.com/wiredtiger/201611/nexus-2.png" alt="保存"></p><p>Repository ID：仓库的唯一标识;<br>Repository Name：仓库的名称，在nexus中用这个来显示某个仓库;<br>Remote Storage Location：仓库的远程地址;</p><p>能看到在nexus中已经有了：<br><img src="https://lyln.oss-cn-beijing.aliyuncs.com/wiredtiger/201611/nexus-3.png" alt="查看"><br>注：Browse Remote这个tab如果没显示出来，刷新一下页面即可。<br>这个时候Browse Remote下已经能看到远程仓库的结构了，但Browser Storage下没有任何东西，说明构件还都没有从远程仓库拉取到nexus。</p><p>选择Public Repositories（这个是nexus对外的仓库地址），把getui从右边添加到左边，表示把getui的仓库添加到Public group中，这样才能对外可见。<br><img src="https://lyln.oss-cn-beijing.aliyuncs.com/wiredtiger/201611/nexus-4.png" alt="设置权限"><br>注：Browse Remote这个tab如果没显示出来，刷新一下页面即可。</p><p>在自己的maven项目中，配置依赖关系：<br><pre class="language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;com.gexin.platform&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;gexin-rp-sdk-http&lt;&#x2F;artifactId&gt;    &lt;version&gt;4.0.1.7&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre></p><p>这样，项目首先会去nexus检索看有没有这个jar，如果没有，再在nexus中检索有没有这个jar相关的仓库配置，发现有，然后会去getui这个仓库将所有相关jar拉取到nexus中，然后下载到你本机的.m2目录下。这时，可以看到nexus的getui这个仓库的Browser Storage下也有了这些jar：<br><img src="https://lyln.oss-cn-beijing.aliyuncs.com/wiredtiger/201611/nexus-4.png" alt="结果"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从日志恢复数据</title>
    <link href="/2016/11/07/2016-11-07-from-log-recover-data/"/>
    <url>/2016/11/07/2016-11-07-from-log-recover-data/</url>
    
    <content type="html"><![CDATA[<p>循环遍历日志<br><pre class="language-none"><code class="language-none">stat.txt2016-11-09 00:00:23 &quot;deviceId&quot;:&quot;F9D4F729-7EE7-467F-BF3F-7D9D008EAB&quot; &quot;userId&quot;:&quot;20048603&quot;2016-11-09 00:00:29 &quot;deviceId&quot;:&quot;c96996784f99e106c32138940da2987c&quot; &quot;osSystem&quot;:&quot;Android6.0&quot; &quot;userId&quot;:&quot;20066192&quot;</code></pre><br>过滤出无用字段(类似循环处理)<br><pre class="language-none"><code class="language-none">grep -i -v &quot;osSystem&quot; stat1.txt &gt;&gt; stat11.txtgrep -i  &quot;osSystem&quot; stat1.txt &gt;&gt; stat12.txt</code></pre><br><a id="more"></a><br>处理成mysql可以load的格式<br><pre class="language-none"><code class="language-none">vi 列编辑处理失败。2016-11-08 23:38:53 ,777b102b6c5cdd1ca087b269e8930be2,200661352016-11-08 23:38:56 ,54bac2b7794f7567b1e254bf805e3f7a,awk -F&#39;&quot;&#39; &#39;&#123;OFS&#x3D;&quot;,&quot;; print $1,$4,$8&#125;&#39;过滤user_id为空的字段awk -F&#39;,&#39;  &#39;&#123;if($3&gt;0) &#123;OFS&#x3D;&quot;,&quot;; print $1,$2,$3&#125;&#125;&#39; test1.txt</code></pre><br>创建表并load数据。<br><pre class="language-none"><code class="language-none">CREATE TABLE user_device(&#96;create_time&#96; DATETIME NOT NULL,&#96;user_id&#96; BIGINT(20) NOT NULL, &#96;device_id&#96; VARCHAR(40) DEFAULT NULL );load data infile &#39;&#x2F;home&#x2F;res2.txt&#39; into table user_device  FIELDS TERMINATED BY &#39;,&#39;;</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg 编译安装</title>
    <link href="/2016/10/25/2016-10-25-ffmpeg-build/"/>
    <url>/2016/10/25/2016-10-25-ffmpeg-build/</url>
    
    <content type="html"><![CDATA[<p>系统环境<br>Ubuntu 14.04.3 LTS<br>最近测试ffmpeg转推，使用老版本ffmpeg流转推一段时间会断掉，测试发现在新版本ffmpeg效果明显好很多。但是由于依赖众多(主要问题)，编译花费了好长时间。<br>记录下编译过程。</p><p>ffmpeg 编译安装<br>依赖安装<br><pre class="language-none"><code class="language-none">apt-get install yasm pkg-configapt-get install gnutls-bin libgnutls-dev libass-dev libfdk-aac-dev libmp3lame0 libmp3lame-dev libpulse0 libpulse-dev libsoxr0 libsoxr-dev speex libspeex-dev libopus0 libopus-dev  libvpx1 libvpx-devlibwavpack1 libwavpack-dev apt-get install libx264-dev libxvidcore-dev libopencore-amrwb-dev libopencore-amrnb-dev libfaad-dev libfaac-dev libmp3lame-dev libtwolame-dev liba52-0.7.4-dev libcddb2-dev libcdaudio-dev libcdio-cdda-dev libvorbis-dev libopenjpeg-devadd-apt-repository ppa:sunab&#x2F;kdenlive-releaseapt-get install libvidstab1.0 libvidstab-dev</code></pre><br><a id="more"></a><br>x265 安装<br><pre class="language-none"><code class="language-none"># ubuntu packages:sudo apt-get install mercurial cmake cmake-curses-gui build-essential yasmNote: if the packaged yasm is older than 1.2, you must download yasm (1.3 recommended) and build ithg clone https:&#x2F;&#x2F;bitbucket.org&#x2F;hg clone https:&#x2F;&#x2F;bitbucket.org&#x2F;multicoreware&#x2F;x265cd x265&#x2F;build&#x2F;linux.&#x2F;make-Makefiles.bashmakemake install</code></pre><br>编译安装<br><pre class="language-none"><code class="language-none">.&#x2F;configure  --prefix&#x3D;&#x2F;opt&#x2F;ffmpeg --extra-libs&#x3D;-ldl --mandir&#x3D;&#x2F;usr&#x2F;share&#x2F;man --enable-avresample --disable-debug --enable-nonfree --enable-gpl --enable-version3 --enable-libopencore-amrnb --enable-libopencore-amrwb --disable-decoder&#x3D;amrnb --disable-decoder&#x3D;amrwb --enable-libpulse --enable-libfreetype --enable-gnutls --enable-libx264 --enable-libx265 --enable-libfdk-aac --enable-libvorbis --enable-libmp3lame --enable-libopus --enable-libvpx --enable-libspeex --enable-libass --enable-avisynth --enable-libsoxr --enable-libxvid --enable-libvidstab --enable-libwavpack --enable-nvencmake &amp;&amp; make install</code></pre><br>添加环境变量或做软连接<br>查看ffmpeg版本<br><pre class="language-none"><code class="language-none">ffmpeg -versionffmpeg version N-82143-gbf14393 Copyright (c) 2000-2016 the FFmpeg developersbuilt with gcc 4.8 (Ubuntu 4.8.4-2ubuntu1~14.04.3)configuration: --prefix&#x3D;&#x2F;opt&#x2F;ffmpeg --extra-libs&#x3D;-ldl --mandir&#x3D;&#x2F;usr&#x2F;share&#x2F;man --enable-avresample --disable-debug --enable-nonfree --enable-gpl --enable-version3 --enable-libopencore-amrnb --enable-libopencore-amrwb --disable-decoder&#x3D;amrnb --disable-decoder&#x3D;amrwb --enable-libpulse --enable-libfreetype --enable-gnutls --enable-libx264 --enable-libx265 --enable-libfdk-aac --enable-libvorbis --enable-libmp3lame --enable-libopus --enable-libvpx --enable-libspeex --enable-libass --enable-avisynth --enable-libsoxr --enable-libxvid --enable-libvidstab --enable-libwavpack --enable-nvenclibavutil      55. 35.100 &#x2F; 55. 35.100libavcodec     57. 65.100 &#x2F; 57. 65.100libavformat    57. 57.100 &#x2F; 57. 57.100libavdevice    57.  2.100 &#x2F; 57.  2.100libavfilter     6. 66.100 &#x2F;  6. 66.100libavresample   3.  2.  0 &#x2F;  3.  2.  0libswscale      4.  3.100 &#x2F;  4.  3.100libswresample   2.  4.100 &#x2F;  2.  4.100libpostproc    54.  2.100 &#x2F; 54.  2.100</code></pre><br>祝你成功</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 负载均衡配置</title>
    <link href="/2016/10/17/2016-10-17-nginx-upstream/"/>
    <url>/2016/10/17/2016-10-17-nginx-upstream/</url>
    
    <content type="html"><![CDATA[<p>环境介绍<br><pre class="language-none"><code class="language-none">nginx version: nginx&#x2F;1.10.1负载机器：192.168.1.168 80upstream机器：192.168.1.169:81192.168.1.170:81</code></pre><br>nginx安装<br><pre class="language-none"><code class="language-none">wget http:&#x2F;&#x2F;nginx.org&#x2F;keys&#x2F;nginx_signing.keyapt-key add nginx_signing.key#For Ubuntu 14.04 replace codename to trustydeb http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;ubuntu&#x2F; trusty nginxdeb-src http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;ubuntu&#x2F; trusty nginxapt-get updateapt-get install nginx</code></pre><br><a id="more"></a><br>nginx负载配置<br><pre class="language-none"><code class="language-none">upstream haha &#123;   server  192.168.1.169:81;   server  192.168.1.170:81;&#125;server &#123;    listen       80;    server_name  www.haha.com;    location &#x2F; &#123;       proxy_pass        http:&#x2F;&#x2F;haha;       proxy_set_header   Host             $host;       proxy_set_header   X-Real-IP        $remote_addr;       proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;       access_log  &#x2F;data1&#x2F;logs&#x2F;nginx&#x2F;haha.log;    &#125;    error_page   500 502 503 504  &#x2F;50x.html;    location &#x3D; &#x2F;50x.html &#123;        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;    &#125;&#125;</code></pre><br>后端server配置<br><pre class="language-none"><code class="language-none">server&#123;        server_name 192.168.1.169;        listen 81;        root &#x2F;web&#x2F;haha&#x2F;;        index index.html index.htm;        error_page   500 502 503 504  &#x2F;50x.html;        location &#x3D; &#x2F;50x.html &#123;                root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;        &#125;        #location ~ &#x2F;\.ht &#123;        #deny  all;        #&#125;&#125;</code></pre><br>测试<br>在后端server /web/haha/下分别写多个测试页面。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grafana influxdb构建自定义监控</title>
    <link href="/2016/10/14/2016-10-14-grafana-influxdb-monitor/"/>
    <url>/2016/10/14/2016-10-14-grafana-influxdb-monitor/</url>
    
    <content type="html"><![CDATA[<h4 id="grafana-安装"><a href="#grafana-安装" class="headerlink" title="grafana 安装"></a>grafana 安装</h4><pre class="language-none"><code class="language-none">$ wget https:&#x2F;&#x2F;grafanarel.s3.amazonaws.com&#x2F;builds&#x2F;grafana_3.0.4-1464167696_amd64.deb$ sudo apt-get install -y adduser libfontconfig$ sudo dpkg -i grafana_3.0.4-1464167696_amd64.deb&#x2F;etc&#x2F;init.d&#x2F;grafana-server start&#x2F;stop&#x2F;statushttp:&#x2F;&#x2F;192.168.1.158:3000&#x2F; admin&#x2F;admin</code></pre><h4 id="influxdb-安装"><a href="#influxdb-安装" class="headerlink" title="influxdb 安装"></a>influxdb 安装</h4><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.influxdata.com&#x2F;influxdb&#x2F;releases&#x2F;influxdb_1.0.2_amd64.debsudo dpkg -i influxdb_1.0.2_amd64.debweb访问influxdb http:&#x2F;&#x2F;192.168.1.158:8083&#x2F;</code></pre><a id="more"></a><h4 id="influxdb-基本操作"><a href="#influxdb-基本操作" class="headerlink" title="influxdb 基本操作"></a>influxdb 基本操作</h4><pre class="language-none"><code class="language-none">show databases;show MEASUREMENTS;show SERIES;create database mydb;insert s_status,prog&#x3D;&#39;http:&#x2F;&#x2F;www.wiredtiger.org&#x2F;abc&#39;,server_ip&#x3D;192.168.1.168,client_ip&#x3D;192.168.1.169 stream_rate&#x3D;3047,recv_speed&#x3D;3123,duration_time&#x3D;761select * from &#x2F;.*&#x2F;</code></pre><h4 id="python-操作influxdb"><a href="#python-操作influxdb" class="headerlink" title="python 操作influxdb"></a>python 操作influxdb</h4><pre class="language-none"><code class="language-none">Install, upgrade and uninstall InfluxDB-Python with these commands:pip install influxdbpip install --upgrade influxdbpip uninstall influxdbgit clone https:&#x2F;&#x2F;github.com&#x2F;influxdata&#x2F;influxdb-python.gitcd influxdb-python&#x2F;pip install -r requirements.txt  -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simplepython setup.py install写入数据$ python&gt;&gt;&gt; from influxdb import InfluxDBClient&gt;&gt;&gt; json_body &#x3D; [    &#123;        &quot;measurement&quot;: &quot;cpu_load_short&quot;,        &quot;tags&quot;: &#123;            &quot;host&quot;: &quot;server01&quot;,            &quot;region&quot;: &quot;us-west&quot;        &#125;,        &quot;time&quot;: &quot;2009-11-10T23:00:00Z&quot;,        &quot;fields&quot;: &#123;            &quot;value&quot;: 0.64        &#125;    &#125;]&gt;&gt;&gt; client &#x3D; InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;root&#39;, &#39;example&#39;)&gt;&gt;&gt; client.write_points(json_body)&gt;&gt;&gt; result &#x3D; client.query(&#39;select value from cpu_load_short;&#39;)&gt;&gt;&gt; print(&quot;Result: &#123;0&#125;&quot;.format(result))</code></pre><h3 id="grafana-配置数据源显示"><a href="#grafana-配置数据源显示" class="headerlink" title="grafana 配置数据源显示"></a>grafana 配置数据源显示</h3><p>配置数据源<br><img src="http://lyln.oss-cn-beijing.aliyuncs.com/wiredtiger/201610/influx_db.jpg" alt="数据源"><br>最终显示效果<br><img src="http://lyln.oss-cn-beijing.aliyuncs.com/wiredtiger/201610/ks_stream_status.jpg" alt="数据显示"></p><h4 id="notes"><a href="#notes" class="headerlink" title="notes:"></a>notes:</h4><p><a href="http://docs.grafana.org/v3.0/installation/debian/">http://docs.grafana.org/v3.0/installation/debian/</a><br><a href="http://influxdb-python.readthedocs.io/en/latest/include-readme.html">http://influxdb-python.readthedocs.io/en/latest/include-readme.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grafana influxdb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Percona Toolkit使用小结</title>
    <link href="/2016/09/18/2016-09-18-percona-toolkit/"/>
    <url>/2016/09/18/2016-09-18-percona-toolkit/</url>
    
    <content type="html"><![CDATA[<p>Percona Toolkit安装<br>1、<a href="https://www.percona.com/downloads/percona-toolkit/">下载包</a><br>2、安装<br><pre class="language-none"><code class="language-none">perl Makefile.PLmakemake testmake install</code></pre></p><h3 id="pt-online-schema-change-在线修改表结构"><a href="#pt-online-schema-change-在线修改表结构" class="headerlink" title="pt-online-schema-change 在线修改表结构"></a>pt-online-schema-change 在线修改表结构</h3><p><strong>修改表结构前，切记备份！！!</strong><br>pt-osc原理：<br>1、创建一个和要执行 alter 操作的表一样的新的空表结构(是alter之前的结构)<br>2、在新表执行alter table 语句（速度应该很快）<br>3、在原表中创建触发器3个触发器分别对应insert,update,delete操作<br>4、以一定块大小从原表拷贝数据到临时表，拷贝过程中通过原表上的触发器在原表进行的写操作都会更新到新建的临时表<br>5、Rename 原表到old表中，在把临时表Rename为原表<br>6、如果有参考该表的外键，根据alter-foreign-keys-method参数的值，检测外键相关的表，做相应设置的处理<br>7、默认最后将旧原表删除<br><a id="more"></a></p><h4 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h4><pre class="language-none"><code class="language-none">pt-online-schema-change h&#x3D;192.168.1.87,u&#x3D;ljd,D&#x3D;mytest,t&#x3D;a --ask-pass \--alter &quot;add column c varchar(10)&quot; --print --dry-runpt-online-schema-change h&#x3D;192.168.1.87,u&#x3D;ljd,D&#x3D;mytest,t&#x3D;a --ask-pass \--alter &quot;add column c varchar(10)&quot; --print --execute</code></pre><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><pre class="language-none"><code class="language-none">pt-online-schema-change h&#x3D;192.168.1.87,u&#x3D;rgbvr,D&#x3D;mytest,t&#x3D;s_event_notice --ask-pass \--alter &quot;DROP INDEX notice_id_UNIQUE&quot; \--print --execute为什么要去除重复的索引1、多余的索引占用磁盘空间，会引起不必要的磁盘IO2、多余的索引会导致数据库在进行索引选择的时候变慢，尤其是索引越多的时候越突出（主要是相关联的索引才会影响索引选择）3、重复的索引会导致表的更新变慢</code></pre><h3 id="pt-duplicate-key-checker-检测MySQL冗余和重复索引"><a href="#pt-duplicate-key-checker-检测MySQL冗余和重复索引" class="headerlink" title="pt-duplicate-key-checker 检测MySQL冗余和重复索引"></a>pt-duplicate-key-checker 检测MySQL冗余和重复索引</h3><pre class="language-none"><code class="language-none">pt-duplicate-key-checker h&#x3D;192.168.1.87,u&#x3D;ljd -d mytest --ask-pass --nocluster</code></pre><h3 id="pt-kill-杀掉进程"><a href="#pt-kill-杀掉进程" class="headerlink" title="pt-kill 杀掉进程"></a>pt-kill 杀掉进程</h3><p>由于空闲连接较多导致超过最大连接数或者某个有问题的sql导致mysql负载很高时，可以使用pk-kill杀掉进程。<br>例如：每10秒检查一次,杀死指定用户超过100秒的查询<br><pre class="language-none"><code class="language-none">pt-kill --no-version-check h&#x3D;192.168.1.87,u&#x3D;ljd,P&#x3D;3306,p&#x3D;root123 \--match-user root --victims all --busy-time 10 \--interval 10 --kill --print </code></pre><br>参数说明：<br>match-command<br>指定杀死的查询类型<br>match-user<br>指定杀死的用户名,即杀死该用户的查询<br>busy-time<br>指定杀死超过多少秒的查询<br>kill<br>执行kill命令<br>victims<br>表示从匹配的结果中选择,类似SQL中的where部分,all是全部的查询<br>interal<br>每隔多少秒检查一次</p><h4 id="notes："><a href="#notes：" class="headerlink" title="notes："></a>notes：</h4><p>1、使用–ask-pass 提示错误Can’t locate Term/ReadKey.pm in @INC<br><pre class="language-none"><code class="language-none">apt-get install libterm-readkey-perl</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Percona Toolkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Smokeping nginx 安装小记</title>
    <link href="/2016/09/01/2016-09-01-smokeping-nginx-install/"/>
    <url>/2016/09/01/2016-09-01-smokeping-nginx-install/</url>
    
    <content type="html"><![CDATA[<h3 id="nginx支持cgi"><a href="#nginx支持cgi" class="headerlink" title="nginx支持cgi"></a>nginx支持cgi</h3><pre class="language-none"><code class="language-none">aptitude install fcgiwrap</code></pre><p>nginx配置<br><pre class="language-none"><code class="language-none">smokeping.confserver &#123;    listen      80;    server_name 192.168.1.158;    #charset koi8-r;    access_log  &#x2F;data&#x2F;log&#x2F;nginx&#x2F;smokeping_access.log ;    error_log  &#x2F;data&#x2F;log&#x2F;nginx&#x2F;smokeping_error.log;    root  &#x2F;opt&#x2F;smokeping;    index index.html index.htm index.php portal.php default.php;    #error_page  404              &#x2F;404.html;    # redirect server error pages to the static page &#x2F;50x.html    error_page   500 502 503 504  &#x2F;50x.html;    location &#x3D; &#x2F;50x.html &#123;        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;    &#125;    # Include this file on your nginx.conf to support debian cgi-bin scripts using    # fcgiwrap    location ~ .*\.fcgi$ &#123; # Disable gzip (it makes scripts feel slower since they have to complete# before getting gzipped)gzip off;# Set the root to &#x2F;usr&#x2F;lib (inside this location this means that we are# giving access to the files under &#x2F;usr&#x2F;lib&#x2F;cgi-bin)root  &#x2F;opt&#x2F;smokeping&#x2F;htdocs;# Fastcgi socketfastcgi_pass  unix:&#x2F;var&#x2F;run&#x2F;fcgiwrap.socket;# Fastcgi parameters, include the standard onesinclude &#x2F;etc&#x2F;nginx&#x2F;fastcgi_params;# Adjust non standard parameters (SCRIPT_FILENAME)#fastcgi_param SCRIPT_FILENAME  &#x2F;usr&#x2F;lib$fastcgi_script_name;fastcgi_param   SCRIPT_FILENAME &#x2F;opt&#x2F;smokeping&#x2F;htdocs$fastcgi_script_name;    &#125;    # deny access to .htaccess files, if Apache&#39;s document root    location ~ &#x2F;\.ht &#123;        deny  all;    &#125;&#125;</code></pre><br><a id="more"></a><br>添加测试的cgi页面<br><pre class="language-none"><code class="language-none">helloworld.cgi#!&#x2F;usr&#x2F;bin&#x2F;perl  print &quot;Content-type: text&#x2F;html\n\n&quot;;  print &quot;Hello, world.&quot;;</code></pre></p><h4 id="smokeping安装"><a href="#smokeping安装" class="headerlink" title="smokeping安装"></a>smokeping安装</h4><p>1、编译安装<br><pre class="language-none"><code class="language-none">.&#x2F;configure --prefix&#x3D;&#x2F;opt&#x2F;smokepingmake -j4make installcd &#x2F;opt&#x2F;smokepingmkdir cache data var然后修改etc&#x2F;config文件chmod 400 &#x2F;opt&#x2F;smokeping&#x2F;etc&#x2F;smokeping_secrets.dist</code></pre><br>2、smokeping启动<br><pre class="language-none"><code class="language-none">.&#x2F;bin&#x2F;smokeping --config&#x3D;&#x2F;opt&#x2F;smokeping&#x2F;etc&#x2F;config #启动.&#x2F;bin&#x2F;smokeping --config&#x3D;&#x2F;opt&#x2F;smokeping&#x2F;etc&#x2F;config --debug.&#x2F;bin&#x2F;smokeping --config&#x3D;&#x2F;opt&#x2F;smokeping&#x2F;etc&#x2F;config --logfile&#x3D;smoke.log</code></pre><br>3、中文显示<br><pre class="language-none"><code class="language-none">aptitude install  fonts-wqy-zenhei配置etc&#x2F;config文件*** Presentation ***charset &#x3D; utf-8  #中文显示*** Targets ***probe &#x3D; FPingmenu &#x3D; Toptitle &#x3D; Network Latency Grapherremark &#x3D; Welcome to the SmokePing website of xxx Company. \         Here you will learn all about the latency of our network.+ Networkmenu&#x3D; Targetstitle&#x3D; network status#parents &#x3D; owner:&#x2F;Test&#x2F;James location:&#x2F;++Lylnmenu &#x3D; alldevicestitle &#x3D; network statushost &#x3D; &#x2F;Network&#x2F;status1 &#x2F;Network&#x2F;status2  ++status1menu &#x3D; status1title &#x3D; status1host &#x3D; www.baidu.com++status2menu &#x3D; status2title &#x3D; status2host &#x3D; www.163.com</code></pre></p><p><a href="https://oss.oetiker.ch/smokeping/doc/smokeping_install.en.html">参考地址</a><br><a href="https://raw.githubusercontent.com/lyln/Shell/master/config-files/smokeping/config">配置文件</a></p><h4 id="notes"><a href="#notes" class="headerlink" title="notes:"></a>notes:</h4><p>smokeping踩坑记录：<br>有图没数据处纠结很久，原因是因为配置的ip地址禁ping了。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Smokeping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zabbix 3.0 安装小记</title>
    <link href="/2016/08/15/2016-08-15-zabbix-manual-install/"/>
    <url>/2016/08/15/2016-08-15-zabbix-manual-install/</url>
    
    <content type="html"><![CDATA[<h3 id="zabbix-server部署"><a href="#zabbix-server部署" class="headerlink" title="zabbix_server部署"></a>zabbix_server部署</h3><p>1、Zabbix 3.0 for Ubuntu 14.04 LTS:<br><pre class="language-none"><code class="language-none">wget http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.0&#x2F;ubuntu&#x2F;pool&#x2F;main&#x2F;z&#x2F;zabbix-release&#x2F;zabbix-release_3.0-1+trusty_all.debdpkg -i zabbix-release_3.0-1+trusty_all.debapt-get updateapt-get install zabbix-server-mysql zabbix-frontend-php #安装server和frontendapt-get install zabbix-agent #安装agent</code></pre><br>2、初始化数据库<br><pre class="language-none"><code class="language-none">cd &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-server-mysqlzcat create.sql.gz | mysql -uroot zabbix</code></pre><br><a id="more"></a><br>3、修改nginx<br><pre class="language-none"><code class="language-none">server&#123;        server_name zabbix.xxx.com;        listen 80;        root &#x2F;usr&#x2F;share&#x2F;zabbix;        index index.html index.htm index.php portal.php default.php;        error_page   500 502 503 504  &#x2F;50x.html;        location &#x3D; &#x2F;50x.html &#123;                root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;        &#125;        location ~ \.php$ &#123;                try_files $uri &#x3D;404;                fastcgi_pass   127.0.0.1:2088;                fastcgi_index  index.php;                fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;                fastcgi_param PATH_INFO $fastcgi_script_name;                include        fastcgi_params;                fastcgi_buffer_size 128k;                fastcgi_buffers 256 16k;                fastcgi_busy_buffers_size 256k;                fastcgi_temp_file_write_size 256k;        &#125;        #location ~ &#x2F;\.ht &#123;        #deny  all;        #&#125;&#125;</code></pre><br>4、修改php参数<br><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;php5&#x2F;fpm&#x2F;php.inimax_execution_time 300memory_limit 128Mpost_max_size 16Mupload_max_filesize 2Mmax_input_time 300always_populate_raw_post_data -1date.timezone &#x3D; UTC</code></pre><br>5、zabbix 配置<br><pre class="language-none"><code class="language-none">ListenPort&#x3D;10051LogFile&#x3D;&#x2F;var&#x2F;log&#x2F;zabbix&#x2F;zabbix_server.logLogFileSize&#x3D;0PidFile&#x3D;&#x2F;var&#x2F;run&#x2F;zabbix&#x2F;zabbix_server.pidDBHost&#x3D;localhostDBName&#x3D;zabbixDBUser&#x3D;zabbixDBPassword&#x3D;passDBSocket&#x3D;&#x2F;tmp&#x2F;mysql.sockDBPort&#x3D;3306JavaGateway&#x3D;10.254.140.104JavaGatewayPort&#x3D;10052StartJavaPollers&#x3D;5ListenIP&#x3D;10.254.140.104Timeout&#x3D;4AlertScriptsPath&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;sendEmailExternalScripts&#x3D;&#x2F;usr&#x2F;lib&#x2F;zabbix&#x2F;externalscriptsFpingLocation&#x3D;&#x2F;usr&#x2F;bin&#x2F;fpingFping6Location&#x3D;&#x2F;usr&#x2F;bin&#x2F;fping6LogSlowQueries&#x3D;3000</code></pre></p><h3 id="zabbix-server邮件报警"><a href="#zabbix-server邮件报警" class="headerlink" title="zabbix_server邮件报警"></a>zabbix_server邮件报警</h3><p>1、修改zabbix_server配置<br><pre class="language-none"><code class="language-none">zabbix_server.confAlertScriptsPath&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;sendEmail</code></pre><br>2、安装sendemail<br><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;mogaal&#x2F;sendemail.gitcp -a sendEmail-v1.XX&#x2F;sendEmail &#x2F;usr&#x2F;local&#x2F;binchmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;sendEmail</code></pre><br>3、添加脚本发邮件脚本<br><pre class="language-none"><code class="language-none">mail.sh#!&#x2F;bin&#x2F;sh#export.UTF-8 #解决发送邮件中文变成乱码的问题to&#x3D;$1subject&#x3D;$2body&#x3D;$3&#x2F;usr&#x2F;local&#x2F;bin&#x2F;sendEmail -f itsupport@sevenga.com -t &quot;$to&quot; -s smtp.exmail.qq.com \-u &quot;$subject&quot; -o message-content-type&#x3D;html -o message-charset&#x3D;utf8 \-xu user@qq.com -xp mail_pass -m &quot;$body&quot; 2&gt;&gt;&#x2F;tmp&#x2F;sendEmail.log</code></pre><br>4、web添加媒介类型<br><pre class="language-none"><code class="language-none">Administration-&gt;Media types-&gt;Create medis typezabbix-agent安装修改zabbix_agentd.confPidFile&#x3D;&#x2F;var&#x2F;run&#x2F;zabbix&#x2F;zabbix_agentd.pidLogFile&#x3D;&#x2F;var&#x2F;log&#x2F;zabbix-agent&#x2F;zabbix_agentd.logLogFileSize&#x3D;0Server&#x3D;10.254.140.104  #zabbix server ipServerActive&#x3D;10.254.140.104:10051 #zabbix server ip+portHostname&#x3D;10.136.11.159 # 本机ipInclude&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf.d&#x2F;zabbix 监听tomcatapt-get install zabbix-java-gateway修改zabbix_java_gateway.confLISTEN_IP&#x3D;&quot;10.254.140.104&quot;LISTEN_PORT&#x3D;10052PID_FILE&#x3D;&quot;&#x2F;var&#x2F;run&#x2F;zabbix&#x2F;zabbix_java_gateway.pid&quot;START_POLLERS&#x3D;5TIMEOUT&#x3D;3在zabbix_server去掉如下选项注释JavaGateway&#x3D;10.254.140.104JavaGatewayPort&#x3D;10052StartJavaPollers&#x3D;5</code></pre></p><h3 id="zabbix-agent端tomcat设置"><a href="#zabbix-agent端tomcat设置" class="headerlink" title="zabbix_agent端tomcat设置"></a>zabbix_agent端tomcat设置</h3><p>1、<a href="http://repo2.maven.org/maven2/org/apache/tomcat/tomcat-catalina-jmx-remote/">下载</a>与之对应的<br>tomcat-catalina-jmx-remote-8.0.36.jar到tomcat的lib目录下<br>2、修改catalina.sh<br><pre class="language-none"><code class="language-none">export CATALINA_OPTS&#x3D;&quot;-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate&#x3D;false \-Dcom.sun.management.jmxremote.port&#x3D;12345 -Dcom.sun.management.jmxremote.ssl&#x3D;false-Djava.rmi.server.hostname&#x3D;x.x.x.x&quot;</code></pre><br>3、重启tomcat和zabbix_java_gateway、zabbix_server<br>4、使用cmdline测试<br><pre class="language-none"><code class="language-none">java -jar cmdline-jmxclient-0.10.3.jar - 10.136.11.159:10053 java.lang:type&#x3D;Memory NonHeapMemoryUsage08&#x2F;16&#x2F;2016 16:20:07 +0800 org.archive.jmx.Client NonHeapMemoryUsage:committed: 26083328init: 2555904max: -1used: 25317240</code></pre><br>5、下载jmx template<br><a href="https://raw.githubusercontent.com/lyln/Shell/master/zabbix/Templates/JMX_templates.xml">jmx template 模板</a></p><h3 id="zabbix-agent远程拉起tomcat"><a href="#zabbix-agent远程拉起tomcat" class="headerlink" title="zabbix_agent远程拉起tomcat"></a>zabbix_agent远程拉起tomcat</h3><p>1、zabbix_agentd.conf开启<br><pre class="language-none"><code class="language-none">EnableRemoteCommands&#x3D;1</code></pre><br>2、修改sudoer使zabbix用户免密码执行<br><pre class="language-none"><code class="language-none">zabbix  ALL&#x3D;NOPASSWD: &#x2F;bin&#x2F;sh &#x2F;opt&#x2F;apache-tomcat-8.0.36&#x2F;bin&#x2F;startup.sh所有命令免密码zabbix  ALL&#x3D;NOPASSWD: ALL</code></pre><br>3、tomcat startup.sh脚本头添加<br><pre class="language-none"><code class="language-none">JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdkexport PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</code></pre></p><h3 id="问题小结"><a href="#问题小结" class="headerlink" title="问题小结"></a>问题小结</h3><p>1、Zabbix报告系统缺少交换分区空间（“Lack of free swap space”）<br>由于云主机交换分区没有设置，free -m Swap三项为0。修改触发条件解决。<br><pre class="language-none"><code class="language-none">Configuration-&gt;Templates-&gt;Template OS Linux-&gt;Triggers-&gt;Lack of…修改&#123;Template OS Linux:system.swap.size[,pfree].last(0)&#125;&lt;50为&#123;Template OS Linux:system.swap.size[,pfree].last(0)&#125;&lt;50and &#123;Template OS Linux:system.swap.size[,free].last(0)&#125;&lt;&gt;0判断系统有交换空间，当系统无交换空间值为0时，不触发。</code></pre><br>2、zabbix图形中文乱码<br><pre class="language-none"><code class="language-none">win下找到SIMHEI.TTF字体，上传至&#x2F;usr&#x2F;local&#x2F;zabbix&#x2F;fonts然后修改&#x2F;usr&#x2F;local&#x2F;zabbix&#x2F;include&#x2F;defines.inc.php 文件define(&#39;ZBX_GRAPH_FONT_NAME&#39;, &#39;simhei&#39;); &#x2F;&#x2F; font file name</code></pre><br>3、 zabbix_agentd [43606]: cannot recreate Zabbix semaphores for IPC key 0x7a0108e8 Semaphore ID 4294967295: [22] Invalid argument<br><pre class="language-none"><code class="language-none">ipcrm -S 0x7a0108e8清理重启zabbix-agent即可</code></pre></p><h4 id="links"><a href="#links" class="headerlink" title="links:"></a>links:</h4><p><a href="https://www.zabbix.com/documentation/3.0/manual/installation/install_from_packages#debianubuntu">https://www.zabbix.com/documentation/3.0/manual/installation/install_from_packages#debianubuntu</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Supervisor进程管理</title>
    <link href="/2016/08/12/2016-08-12-supervisor/"/>
    <url>/2016/08/12/2016-08-12-supervisor/</url>
    
    <content type="html"><![CDATA[<p>Supervisor (<a href="http://supervisord.org">http://supervisord.org</a>) 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程。</p><h4 id="Supervisor安装"><a href="#Supervisor安装" class="headerlink" title="Supervisor安装"></a>Supervisor安装</h4><pre class="language-none"><code class="language-none">apt-get install supervisor</code></pre><h4 id="Supervisor配置文件"><a href="#Supervisor配置文件" class="headerlink" title="Supervisor配置文件"></a>Supervisor配置文件</h4><p>默认配置文件/etc/supervisor/supervisord.conf<br>如过没有,生成默认配置文件<br><pre class="language-none"><code class="language-none">echo_supervisord_conf &gt; &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf[supervisord] #supervisord本身的日志配置logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;supervisord.log ;pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;supervisord.pid ;</code></pre><br>添加管理的java进程<br><pre class="language-none"><code class="language-none">hello.conf[program:showchat]directory &#x3D; &#x2F;home&#x2F;ljd&#x2F;hellocommand &#x3D; &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;java -Xmx512M -Xms512M -classpath hello.jar com.ljd.Helloautostart &#x3D; true #子进程随supervisord启动而启动startsecs &#x3D; 5 #进程启动后跑了几秒，才被认定为成功启动。默认1autorestart &#x3D; true #子进程挂掉将被无条件重启numprocs&#x3D;1 #启动线程数目user &#x3D; rgbvr  #指定运行用户environment&#x3D;CHAT_SETTING_HOME&#x3D;&#x2F;opt&#x2F;hello&#x2F;config #指定程序环境变量 stdout_logfile_maxbytes &#x3D; 20MBstdout_logfile_backups &#x3D; 20redirect_stderr &#x3D; truestdout_logfile &#x3D; &#x2F;home&#x2F;ljd&#x2F;hello.log</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>supervisor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka操作小结</title>
    <link href="/2016/08/11/2016-08-11-kafka-install-manual/"/>
    <url>/2016/08/11/2016-08-11-kafka-install-manual/</url>
    
    <content type="html"><![CDATA[<h4 id="Kafka操作小结"><a href="#Kafka操作小结" class="headerlink" title="Kafka操作小结"></a>Kafka操作小结</h4><p>kafka依赖zookeeper，所以要先安装zookeeper。</p><p>下载安装包<br>省略，解压即可食用，方便快捷</p><h4 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h4><p>1、zoo.cfg参数解释<br><pre class="language-none"><code class="language-none">dataDir：数据目录dataLogDir：日志目录clientPort：客户端连接端口tickTime：Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。initLimit：Zookeeper的Leader 接受客户端（Follower）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 5个心跳的时间（也就是tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 5*2000&#x3D;10 秒syncLimit：表示 Leader 与 Follower 之间发送消息时请求和应答时间长度，最长不能超过多少个tickTime 的时间长度，总的时间长度就是 2*2000&#x3D;4 秒。server.A&#x3D;B：C：D：其中A 是一个数字，表示这个是第几号服务器；B 是这个服务器的 ip 地址；C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号。</code></pre><br><a id="more"></a><br>2、修改配置文件<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /data/zk1/myidzoo1.cfg最终如下：<span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/zookeeper/data/zk1<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/opt/zookeeper/logs/zk1<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">clientPortAddress</span><span class="token operator">=</span><span class="token number">10.254</span>.140.104server.1<span class="token operator">=</span><span class="token number">10.254</span>.140.104:2389:3389</code></pre><br>3、设置zk chroot路径（强烈建议）<br><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/zkCli.sh -server <span class="token number">10.254</span>.139.104:2181create /kafka创建topics后<span class="token function">ls</span> /kafka/brokers/topicskafka连接时指定zk chroot位置zookeeper.connect<span class="token operator">=</span><span class="token number">10.254</span>.140.104:2181/kafka</code></pre><br>4、启动停止zk<br><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/zkServer.sh start conf/zoo1.cfg./bin/zkServer.sh status conf/zoo1.cfg./bin/zkServer.sh stop conf/zoo1.cfg</code></pre></p><h3 id="kafka-单机版安装"><a href="#kafka-单机版安装" class="headerlink" title="kafka 单机版安装"></a>kafka 单机版安装</h3><p>1、kafka的一些概念<br><pre class="language-none"><code class="language-none">BrokerKafka集群包含一个或多个服务器，这种服务器被称为brokerTopic每条发布到Kafka集群的消息都有一个类别，这个类别被称为topic。（物理上不同topic的消息分开存储，逻辑上一个topic的消息虽然保存于一个或多个broker上但用户只需指定消息的topic即可生产或消费数据而不必关心数据存于何处）Partitionparition是物理上的概念，每个topic包含一个或多个partition，创建topic时可指定parition数量。每个partition对应于一个文件夹，该文件夹下存储该partition的数据和索引文件Producer负责发布消息到Kafka brokerConsumer消费消息。每个consumer属于一个特定的consumer group（可为每个consumer指定group name，若不指定group name则属于默认的group）。使用consumer high level API时，同一topic的一条消息只能被同一个consumer group内的一个consumer消费，但多个consumer group可同时消费这一消息。</code></pre><br>2、修改server.properties<br><pre class="language-none"><code class="language-none">broker.id&#x3D;0 #Kafka集群需要保证各个Broker的id在整个集群中必须唯一listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;10.254.139.104:9092 #监听ip和portzookeeper.connect&#x3D;10.254.140.104:2181&#x2F;kafka #指定zk连接</code></pre><br>3、启动停止kafka<br><pre class="language-none"><code class="language-none">.&#x2F;bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties.&#x2F;bin&#x2F;kafka-server-stop.sh config&#x2F;server.properties</code></pre><br>4、kafka常用命令<br><pre class="language-bash" data-language="bash"><code class="language-bash">创建topic./bin/kafka-topics.sh --create --zookeeper <span class="token number">10.254</span>.139.104:2181/kafka --replication-factor <span class="token number">1</span> --partitions <span class="token number">5</span> --topic chat <span class="token comment">#5个分区，并且复制因子为1</span>查看topic./bin/kafka-topics.sh --list --zookeeper <span class="token number">10.254</span>.139.104:2181/kafka./bin/kafka-topics.sh --describe --zookeeper <span class="token number">10.254</span>.139.104:2181/kafka --topic chat产生消息./bin/kafka-console-producer.sh --broker-list <span class="token number">10.254</span>.139.104:9092 --topic chat消费消息./bin/kafka-console-consumer.sh --zookeeper <span class="token number">10.254</span>.139.104:2181/kafka --topic chat --from-beginning</code></pre><br>5、查看topic的解释<br><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/kafka-topics.sh –describe –zookeeper <span class="token number">10.254</span>.139.104:2181/kafka –topic chatTopic:chat      PartitionCount:5        ReplicationFactor:1     Configs:        Topic: chat     Partition: <span class="token number">0</span>    Leader: <span class="token number">0</span>       Replicas: <span class="token number">0</span>     Isr: <span class="token number">0</span>        Topic: chat     Partition: <span class="token number">1</span>    Leader: <span class="token number">0</span>       Replicas: <span class="token number">0</span>     Isr: <span class="token number">0</span>        Topic: chat     Partition: <span class="token number">2</span>    Leader: <span class="token number">0</span>       Replicas: <span class="token number">0</span>     Isr: <span class="token number">0</span>        Topic: chat     Partition: <span class="token number">3</span>    Leader: <span class="token number">0</span>       Replicas: <span class="token number">0</span>     Isr: <span class="token number">0</span>        Topic: chat     Partition: <span class="token number">4</span>    Leader: <span class="token number">0</span>       Replicas: <span class="token number">0</span>     Isr: <span class="token number">0</span>a<span class="token punctuation">)</span>Partition： 分区b<span class="token punctuation">)</span>Leader ： 负责读写指定分区的节点c<span class="token punctuation">)</span>Replicas ： 复制该分区log的节点列表d<span class="token punctuation">)</span>Isr ： <span class="token string">"in-sync"</span> replicas，当前活跃的副本列表（是一个子集），并且可能成为Leader</code></pre></p><h4 id="一些其他操作"><a href="#一些其他操作" class="headerlink" title="一些其他操作"></a>一些其他操作</h4><p>1、修改zk默认jvm<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vim java.env</span><span class="token comment">#!/bin/sh</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk/bin/java<span class="token comment"># heap size MUST be modified according to cluster environment</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JVMFLAGS</span><span class="token operator">=</span><span class="token string">"-Xmx512M -Xms512M"</span></code></pre></p>]]></content>
    
    
    <categories>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Discuz! X3.2 安装问题小记</title>
    <link href="/2016/08/06/2016-08-06-discuz-install/"/>
    <url>/2016/08/06/2016-08-06-discuz-install/</url>
    
    <content type="html"><![CDATA[<p>Discuz 安装本来很简单，但是由于不熟悉和本身代码的问题，花了快一天才解决。现在将问题罗列如下：</p><h4 id="Can’t-connect-to-local-MySQL-server-through-socket"><a href="#Can’t-connect-to-local-MySQL-server-through-socket" class="headerlink" title="Can’t connect to local MySQL server through socket"></a>Can’t connect to local MySQL server through socket</h4><pre class="language-bash" data-language="bash"><code class="language-bash">mysqli_connect<span class="token punctuation">(</span><span class="token punctuation">)</span> 不支持 advice_mysqli_connectDiscuz 安装完成后，后台打开Ucenter出现404头像上传不能成功Can’t connect to <span class="token builtin class-name">local</span> MySQL server through socket指定host使用的socket，格式如下：<span class="token variable">$dbhost</span> <span class="token operator">=</span> ‘localhost:/temp/mysql.sock’<span class="token punctuation">;</span></code></pre><a id="more"></a><h4 id="mysqli-connect-不支持-advice-mysqli-connect"><a href="#mysqli-connect-不支持-advice-mysqli-connect" class="headerlink" title="mysqli_connect() 不支持 advice_mysqli_connect"></a>mysqli_connect() 不支持 advice_mysqli_connect</h4><pre class="language-bash" data-language="bash"><code class="language-bash">除了安装php5 php5-fpm php5-cli外，还需安装<span class="token function">apt-get</span> <span class="token function">install</span>  php5-mysql</code></pre><h4 id="Discuz-安装完成后，后台打开Ucenter出现404，头像上传失败。"><a href="#Discuz-安装完成后，后台打开Ucenter出现404，头像上传失败。" class="headerlink" title="Discuz 安装完成后，后台打开Ucenter出现404，头像上传失败。"></a>Discuz 安装完成后，后台打开Ucenter出现404，头像上传失败。</h4><pre class="language-bash" data-language="bash"><code class="language-bash">进入uc_server目录，分别编辑admin.php、avatar.php、index.php注释下面一行代码、重新定义UC_API地址。//define<span class="token punctuation">(</span><span class="token string">'UC_API'</span>, strtolower<span class="token variable"><span class="token punctuation">((</span>isset<span class="token punctuation">(</span>$_SERVER<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> $_SERVER <span class="token operator">==</span> 'on' <span class="token operator">?</span> 'https' <span class="token operator">:</span> 'http'<span class="token punctuation">)</span>.'<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>'.$_SERVER.substr<span class="token punctuation">(</span>$_SERVER<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> strrpos<span class="token punctuation">(</span>$_SERVER<span class="token punctuation">,</span> '<span class="token operator">/</span>'<span class="token punctuation">))</span></span><span class="token punctuation">))</span><span class="token punctuation">;</span>define<span class="token punctuation">(</span><span class="token string">'UC_API'</span>, <span class="token string">'http://domain.com/uc_server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anemometer 展示示MySQL慢查询日志</title>
    <link href="/2016/07/01/2016-07-01-anemometer-slow-log/"/>
    <url>/2016/07/01/2016-07-01-anemometer-slow-log/</url>
    
    <content type="html"><![CDATA[<p>安装部署<br>nginx,mysql,php环境可参考博客其他文章<br>Anemometer部署过程参考官网Quickstart</p><p>问题小结<br><pre class="language-bash" data-language="bash"><code class="language-bash">配置多个数据源，只是指定不同db即可。<span class="token variable">$conf</span><span class="token punctuation">[</span><span class="token string">'datasources'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'192.168.1.87'</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">(</span>        <span class="token string">'host'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'192.168.1.87'</span>,        <span class="token string">'port'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3306</span>,        <span class="token string">'db'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'slow_query_log'</span>,        <span class="token string">'user'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ljd'</span>,        <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'root123'</span>,        <span class="token string">'tables'</span> <span class="token operator">=</span><span class="token operator">></span> array<span class="token punctuation">(</span>                <span class="token string">'global_query_review'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'fact'</span>,                <span class="token string">'global_query_review_history'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'dimension'</span>        <span class="token punctuation">)</span>,        <span class="token string">'source_type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'slow_query_log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$conf</span><span class="token punctuation">[</span><span class="token string">'datasources'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'online'</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">(</span>        <span class="token string">'host'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'192.168.1.87'</span>,        <span class="token string">'port'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3306</span>,        <span class="token string">'db'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'slow_online'</span>,        <span class="token string">'user'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ljd'</span>,        <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'root123'</span>,        <span class="token string">'tables'</span> <span class="token operator">=</span><span class="token operator">></span> array<span class="token punctuation">(</span>                <span class="token string">'global_query_review'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'fact'</span>,                <span class="token string">'global_query_review_history'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'dimension'</span>        <span class="token punctuation">)</span>,        <span class="token string">'source_type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'slow_query_log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><br><a id="more"></a><br>将数据插入库各种不成功<br><pre class="language-bash" data-language="bash"><code class="language-bash">global_query_review does not exist or is not readable at /usr/local/bin/pt-query-digest line <span class="token number">11265</span>.global_query_review_history does not exist or is not readable at /usr/local/bin/pt-query-digest line <span class="token number">11265</span>.困惑+郁闷许久。pt-query-digest --user<span class="token operator">=</span>anemometer --password<span class="token operator">=</span>superSecurePass <span class="token punctuation">\</span>                  --review <span class="token assign-left variable">h</span><span class="token operator">=</span>db.example.com,D<span class="token operator">=</span>slow_query_log,t<span class="token operator">=</span>global_query_review <span class="token punctuation">\</span>                  --history <span class="token assign-left variable">h</span><span class="token operator">=</span>db.example.com,D<span class="token operator">=</span>slow_query_log,t<span class="token operator">=</span>global_query_review_history <span class="token punctuation">\</span>                  --no-report --limit<span class="token operator">=</span><span class="token number">0</span>% <span class="token punctuation">\</span>                   --filter<span class="token operator">=</span><span class="token string">" \<span class="token variable">$event</span>->&#123;Bytes&#125; = length(\<span class="token variable">$event</span>->&#123;arg&#125;) and \<span class="token variable">$event</span>->&#123;hostname&#125;=<span class="token entity" title="\&quot;">\"</span><span class="token environment constant">$HOSTNAME</span><span class="token entity" title="\&quot;">\"</span>"</span> <span class="token punctuation">\</span>                   /var/lib/mysql/db.example.com-slow.log</code></pre><br>原因竟是因为在–review or –review-history后面h=192.168.1.87, D=slow_query_log, h与D直接不能有空格，不能有空格，不能有空格重要的事情说三遍。</p><h3 id="Anemometer慢查询结果展示"><a href="#Anemometer慢查询结果展示" class="headerlink" title="Anemometer慢查询结果展示"></a>Anemometer慢查询结果展示</h3><p><img src="http://lyln.oss-cn-beijing.aliyuncs.com/wiredtiger/201611/anemometer.jpg" alt="Anemometer慢查询结果展示"></p><h4 id="links"><a href="#links" class="headerlink" title="links:"></a>links:</h4><p><a href="https://github.com/box/Anemometer/blob/master/README.md">https://github.com/box/Anemometer/blob/master/README.md</a></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell常用命令</title>
    <link href="/2016/05/22/2016-05-22-shell-common-ops-01/"/>
    <url>/2016/05/22/2016-05-22-shell-common-ops-01/</url>
    
    <content type="html"><![CDATA[<p>1、防止rm,mv惨案，环境变量添加/etc/profile</p><pre class="language-none"><code class="language-none">alias rm&#x3D;&#39;rm -i&#39;alias mv&#x3D;&#39;mv -i&#39;alias vi&#x3D;&#39;vim&#39;alias cp&#x3D;&#39;cp -i&#39;</code></pre><a id="more"></a><p>2、vi替换<br><pre class="language-none"><code class="language-none">:n,$s&#x2F;well&#x2F;good&#x2F;g 替换第 n 行开始到最后一行中每一行所有 well 为 good  n-&gt; . 表示到从当前行</code></pre><br>3、sed替换<br><pre class="language-none"><code class="language-none">sed  &#39;&#x2F;password&#x2F;s&#x2F;abc&#x2F;admin&#x2F;g&#39; db.properties  #不写入文件&#96;sed -i &#39;&#x2F;password&#x2F;s&#x2F;abc&#x2F;admin&#x2F;g&#39; db.properties&#96;一个文件有 f1,f2,f3,f4,f5.....替换成 f1_i,f2_i,f3_i,f4_i,f5_i?&#96;cat a.txt |tr &#39;,&#39; &#39;\n&#39;|sed &#39;s&#x2F;$&#x2F;&amp;_i&#x2F;g&#39;|tr &#39;\n&#39; &#39;,&#39;&#96;tr实现行列转换,sed在文件末尾添加_i&#96;sed &#39;s&#x2F;$&#x2F;&amp;_i&#x2F;g&#39;&#96;如果文件内容为&quot;f559&quot;:166,&quot;f560&quot;:167,&quot;f561&quot;:168,&quot;f562&quot;:169,&quot;f563&quot;:170,&#96;cat a.txt |tr &#39;,&#39; &#39;\n&#39;|sed &#39;s&#x2F;&quot;\w\&#123;4\&#125;&#x2F;&amp;_i&#x2F;g&#39;|tr &#39;\n&#39; &#39;,&#39;&#96;sed在指定字符串末尾添加_i&#96;sed &#39;s&#x2F;&quot;\w\&#123;4\&#125;&#x2F;&amp;_i&#x2F;g&#39;&#96;</code></pre></p><p>4、代码注释：<br><pre class="language-none"><code class="language-none">按 Ctrl+v 切换到可视化模式；移动光标(j 或 k)选中需要注释的行的开头；按大写 I，然后输入注释符，如 #；最后按 Esc。取消注释：按 Ctrl+v 切换到可视化模式；按 j 或 k 选择要删除的注释符；按 d 或 x 删除注释符如果使用 &#x2F;&#x2F; 符号注释，则取消注释时需进行两遍操作。</code></pre><br>5、grep过滤<br><pre class="language-none"><code class="language-none">egrep -v &quot;(^#|^$)&quot; &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agend.conf&#96;</code></pre><br>6、使用netstat和awk命令来统计网络连接数<br><pre class="language-none"><code class="language-none">netstat -n | awk &#39;&#x2F;^tcp&#x2F; &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot; &quot;,state[key]&#125;&#39;状态描述：CLOSED：无连接是活动的或正在进行LISTEN：服务器在等待进入呼叫SYN_RECV：一个连接请求已经到达，等待确认SYN_SENT：应用已经开始，打开一个连接ESTABLISHED：正常数据传输状态FIN_WAIT1：应用说它已经完成FIN_WAIT2：另一边已同意释放ITMED_WAIT：等待所有分组死掉CLOSING：两边同时尝试关闭TIME_WAIT：另一边已初始化一个释放LAST_ACK：等待所有分组死掉</code></pre><br>7、screen使用<br><pre class="language-none"><code class="language-none">screen -R s_namectrl+a    d 退出， :quit 取消这个screen回话screen -list</code></pre></p><p>8、xargs常用<br><pre class="language-none"><code class="language-none">xargs -0将\0作为定界符。-i [&#123;&#125;] 代表参数mv 时,&#123;&#125;将被逐个替换。&#96;find . -name &quot;*.php&quot; |xargs  -t -i mv  &#123;&#125; &#123;&#125;.bak&#96;&#96;find logs&#x2F; -atime +90 -size +500M |xargs mv -t &#x2F;tmp&#x2F;databk&#96;</code></pre></p><p>9、修改进程打开的最大文件数<br><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;security&#x2F;limits.conf &#96;*          soft    nofile        65535&#96;&#96;*           hard   nofile        65535&#96;&#96;ulimit -a 显示当前所有的limit信息&#96;ubuntu要指明用户，*不起作用。退出重进生效。</code></pre><br>10、crontab 中脚本使用命令指定命令的全路径<br><pre class="language-none"><code class="language-none">java替换为&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_65&#x2F;bin&#x2F;java </code></pre></p><p>11、java打依赖包及jar包运行<br><pre class="language-none"><code class="language-none">mvn dependency:copy-dependencies -DoutputDirectory&#x3D;libjava -cp java_metrics-0.0.1-SNAPSHOT.jar:lib&#x2F;\* java_metrics.GetStarted</code></pre></p><p>12、Ubuntu在rc.local下开机自启动自定义脚本（启动tomcat、jar程序）不生效<br>自定义脚本放在/home/user下导致启动不成功，放入root或者系统目录下生效</p><p>13、openssl生成密码<br><pre class="language-none"><code class="language-none">openssl rand -base64 6</code></pre><br>14、redis批量删除key</p><pre class="language-none"><code class="language-none">redis-cli -h host -a passwd keys &quot;USER:*&quot; |xargs redis-cli -h host -a passwd delredis查看keytype key 看看可以类型hgetzrange </code></pre><p>15、获取进程号及杀掉进程<br><pre class="language-none"><code class="language-none">pgrep -f namepkill -f name</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL5.7模拟role，5.6添加审计功能,SSL连接，多实例</title>
    <link href="/2015/11/21/2015-11-21-mysql-stu03/"/>
    <url>/2015/11/21/2015-11-21-mysql-stu03/</url>
    
    <content type="html"><![CDATA[<h4 id="mysql5-7可以模拟role"><a href="#mysql5-7可以模拟role" class="headerlink" title="mysql5.7可以模拟role"></a>mysql5.7可以模拟role</h4><p>1、创建tom，junior_dba用户<br>2、将tom加入<br><pre class="language-bash" data-language="bash"><code class="language-bash">grant proxy on <span class="token string">'junior_dba'</span>@<span class="token string">'localhost'</span> to <span class="token string">'tom'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span></code></pre><br>3、授予junior_dba权限后，tom将拥有和junior_dba相同的权限。<br><pre class="language-bash" data-language="bash"><code class="language-bash">grant <span class="token keyword">select</span> on *.* to <span class="token string">'junior_dba'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span></code></pre><br>4、登陆测试<br><pre class="language-bash" data-language="bash"><code class="language-bash">show database<span class="token punctuation">;</span>SELECT <span class="token environment constant">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, CURRENT_USER<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><br><a id="more"></a></p><h5 id="note"><a href="#note" class="headerlink" title="note:"></a>note:</h5><p>开启支持用户映射，默认check_proxy_users，mysql_native_password_proxy_users是禁用的。<br>用户本身会被proxy，原来权限都不起作用。<br>myql5.7 支持锁定用户，alter user tom account lock;</p><hr><h4 id="mysql增加审计插件"><a href="#mysql增加审计插件" class="headerlink" title="mysql增加审计插件"></a>mysql增加审计插件</h4><p>1、下载server_audit的包<br><a href="https://downloads.mariadb.com/enterprise/r6qp-yyv5/mariadb-audit-plugin/server_audit-1.2.0.tar.gz">server_audit包</a><br><a href="http://pan.baidu.com/s/14wES2">百度云地址</a>,密码: hvtg</p><p>2、 查看mysql5.6插件安装目录<br><pre class="language-bash" data-language="bash"><code class="language-bash">SHOW VARIABLES LIKE <span class="token string">'plugin_dir'</span><span class="token punctuation">;</span>+---------------+------------------------------+<span class="token operator">|</span> Variable_name <span class="token operator">|</span> Value                        <span class="token operator">|</span>+---------------+------------------------------+<span class="token operator">|</span> plugin_dir    <span class="token operator">|</span> /usr/local/mysql/lib/plugin/ <span class="token operator">|</span>+---------------+------------------------------+</code></pre><br>3、解压server_audit包，复制linux-64/server_audit.so文件到/usr/local/mysql/lib/plugin/<br>4、安装server_audit插件<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>root@localhost:mysql.sock<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span>install plugin server_audit SONAME <span class="token string">'server_audit.so'</span><span class="token punctuation">;</span>show plugins<span class="token punctuation">;</span><span class="token operator">|</span> SERVER_AUDIT               <span class="token operator">|</span> ACTIVE   <span class="token operator">|</span> AUDIT              <span class="token operator">|</span> server_audit.so    <span class="token operator">|</span> GPL     <span class="token operator">|</span>说明server_audit插件安装成功。</code></pre><br>5、默认server_audit关闭，set the server_audit_logging variable to ON.<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>root@localhost:mysql.sock<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span>show variables like <span class="token string">"%audit%"</span><span class="token punctuation">;</span>+-------------------------------+-----------------------+<span class="token operator">|</span> Variable_name                 <span class="token operator">|</span> Value                 <span class="token operator">|</span>+-------------------------------+-----------------------+<span class="token operator">|</span> server_audit_events           <span class="token operator">|</span>                       <span class="token operator">|</span><span class="token operator">|</span> server_audit_excl_users       <span class="token operator">|</span>                       <span class="token operator">|</span><span class="token operator">|</span> server_audit_file_path        <span class="token operator">|</span> server_audit.log      <span class="token operator">|</span><span class="token operator">|</span> server_audit_file_rotate_now  <span class="token operator">|</span> OFF                   <span class="token operator">|</span><span class="token operator">|</span> server_audit_file_rotate_size <span class="token operator">|</span> <span class="token number">1000000</span>               <span class="token operator">|</span><span class="token operator">|</span> server_audit_file_rotations   <span class="token operator">|</span> <span class="token number">9</span>                     <span class="token operator">|</span><span class="token operator">|</span> server_audit_incl_users       <span class="token operator">|</span>                       <span class="token operator">|</span><span class="token operator">|</span> server_audit_logging          <span class="token operator">|</span> OFF                   <span class="token operator">|</span><span class="token operator">|</span> server_audit_mode             <span class="token operator">|</span> <span class="token number">1</span>                     <span class="token operator">|</span><span class="token operator">|</span> server_audit_output_type      <span class="token operator">|</span> <span class="token function">file</span>                  <span class="token operator">|</span><span class="token operator">|</span> server_audit_syslog_facility  <span class="token operator">|</span> LOG_USER              <span class="token operator">|</span><span class="token operator">|</span> server_audit_syslog_ident     <span class="token operator">|</span> mysql-server_auditing <span class="token operator">|</span><span class="token operator">|</span> server_audit_syslog_info      <span class="token operator">|</span>                       <span class="token operator">|</span><span class="token operator">|</span> server_audit_syslog_priority  <span class="token operator">|</span> LOG_INFO              <span class="token operator">|</span>+-------------------------------+-----------------------+</code></pre><br>6、使用tom用户登陆，测试。<br>server_audit日志记录<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -f server_audit.log <span class="token number">20151121</span> <span class="token number">15</span>:10:58,ubuntu,tom,localhost,2,0,FAILED_CONNECT,,,1045<span class="token number">20151121</span> <span class="token number">15</span>:10:58,ubuntu,tom,localhost,2,0,DISCONNECT,,,0<span class="token number">20151121</span> <span class="token number">15</span>:11:01,ubuntu,tom,localhost,3,0,CONNECT,,,0<span class="token number">20151121</span> <span class="token number">15</span>:11:01,ubuntu,tom,localhost,3,15,QUERY,,<span class="token string">'select @@version_comment limit 1'</span>,0<span class="token number">20151121</span> <span class="token number">15</span>:11:01,ubuntu,tom,localhost,3,16,QUERY,,<span class="token string">'select USER()'</span>,0</code></pre><br>general_log日志记录<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -f /data/mysql56/ubuntu.log<span class="token number">151121</span> <span class="token number">15</span>:13:09     <span class="token number">4</span> Connect   tom@localhost on                     <span class="token number">4</span> Connect   Access denied <span class="token keyword">for</span> user <span class="token string">'tom'</span>@<span class="token string">'localhost'</span> <span class="token punctuation">(</span>using password: NO<span class="token punctuation">)</span><span class="token number">151121</span> <span class="token number">15</span>:13:12     <span class="token number">5</span> Connect   tom@localhost on                     <span class="token number">5</span> Query     <span class="token keyword">select</span> @@version_comment limit <span class="token number">1</span>                    <span class="token number">5</span> Query     <span class="token keyword">select</span> <span class="token environment constant">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><br><a href="https://mariadb.com/kb/en/mariadb/about-the-mariadb-audit-plugin/">更多设置</a></p><hr><h4 id="mysql5-6增加SSL"><a href="#mysql5-6增加SSL" class="headerlink" title="mysql5.6增加SSL"></a>mysql5.6增加SSL</h4><p>1、生成所需证书和keys文件<br><pre class="language-bash" data-language="bash"><code class="language-bash">CAshell<span class="token operator">></span> openssl genrsa <span class="token number">2048</span> <span class="token operator">></span> ca-key.pemshell<span class="token operator">></span> openssl req -new -x509 -nodes -days <span class="token number">3600</span> <span class="token punctuation">\</span>         -key ca-key.pem -out ca.pemServershell<span class="token operator">></span> openssl req -newkey rsa:2048 -days <span class="token number">3600</span> <span class="token punctuation">\</span>         -nodes -keyout server-key.pem -out server-req.pemshell<span class="token operator">></span> openssl rsa -in server-key.pem -out server-key.pemshell<span class="token operator">></span> openssl x509 -req -in server-req.pem -days <span class="token number">3600</span> <span class="token punctuation">\</span>         -CA ca.pem -CAkey ca-key.pem -set_serial 01 -out server-cert.pemClientshell<span class="token operator">></span> openssl req -newkey rsa:2048 -days <span class="token number">3600</span> <span class="token punctuation">\</span>         -nodes -keyout client-key.pem -out client-req.pemshell<span class="token operator">></span> openssl rsa -in client-key.pem -out client-key.pemshell<span class="token operator">></span> openssl x509 -req -in client-req.pem -days <span class="token number">3600</span> <span class="token punctuation">\</span>         -CA ca.pem -CAkey ca-key.pem -set_serial 01 -out client-cert.pemVerifyshell<span class="token operator">></span> openssl verify -CAfile ca.pem server-cert.pem client-cert.pemserver-cert.pem: OKclient-cert.pem: OK</code></pre><br>2、配置server端，修改my.cnf配置<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>ssl-ca<span class="token operator">=</span>ca.pemssl-cert<span class="token operator">=</span>server-cert.pemssl-key<span class="token operator">=</span>server-key.pem</code></pre><br>3、设置client端，复制生成的clent文件，并修改用户认证方式。<br>mysql5.6使用grant语法，mysql5.7可以直接alter。<br><pre class="language-bash" data-language="bash"><code class="language-bash">grant <span class="token keyword">select</span> on *.* to tom_ssl@<span class="token string">'115.182.83.36'</span> require ssl<span class="token punctuation">;</span> shell<span class="token operator">></span> mysql --ssl-ca<span class="token operator">=</span>ca.pem <span class="token punctuation">\</span>       --ssl-cert<span class="token operator">=</span>client-cert.pem <span class="token punctuation">\</span>       --ssl-key<span class="token operator">=</span>client-key.pem</code></pre><br>4、判断是否通过SSL连接<br><pre class="language-bash" data-language="bash"><code class="language-bash">SHOW STATUS LIKE <span class="token string">'Ssl_cipher'</span><span class="token punctuation">;</span></code></pre></p><p>note：<br>Whatever method you use to generate the certificate and key files, the Common Name value used for the server and client certificates/keys must each differ from the Common Name value used for the CA certificate<br>CA的Country Name要与server/client的Country Name不同，不然会报错。<br><a href="http://dev.mysql.com/doc/refman/5.6/en/creating-ssl-files-using-openssl.html">详细配置</a></p><hr><h4 id="mysql多实例"><a href="#mysql多实例" class="headerlink" title="mysql多实例"></a>mysql多实例</h4><p>1、重新初始化数据目录<br>scripts/mysql_install_db –datadir=/data/mysql56_2 –user=mysql<br>不推荐直接复制数据目录。<br>例如：auto.cnf，mysql库中存在innodb表，直接cp会存在问题。<br>2、修改my.cnf配置<br>–port,–socket,–pid-file,–datadir,–tmpdir （提高性能）<br>如果有日志，添加日志相关参数<br>general_log_file,log-bin,slow_query_log_file,log-error<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld_multi<span class="token punctuation">]</span>mysqld     <span class="token operator">=</span> /usr/local/mysql/bin/mysqld_safemysqladmin <span class="token operator">=</span> /usr/local/mysql/bin/mysqladminuser <span class="token operator">=</span> multi_adminpass <span class="token operator">=</span> admin123log <span class="token operator">=</span> /var/log/mysqld_multi.log<span class="token punctuation">[</span>mysqld2<span class="token punctuation">]</span>server-id <span class="token operator">=</span> <span class="token number">1111</span>basedir    <span class="token operator">=</span> /usr/local/mysql56  mysql56做个软链接socket     <span class="token operator">=</span> /tmp/mysql.sock2port       <span class="token operator">=</span> <span class="token number">3307</span>pid-file   <span class="token operator">=</span> /data/mysql56_2/mysql56_2.pid2datadir    <span class="token operator">=</span> /data/mysql56_2language   <span class="token operator">=</span> /usr/local/mysql/share/english<span class="token assign-left variable">performance_schema</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><br>3、启动、查看mysql实例<br>mysqld_mulit report 查看<br>mysqld_mulit start 2 启动实例2</p><h4 id="note-1"><a href="#note-1" class="headerlink" title="note:"></a>note:</h4><p>1、mysqld_multi管理不同版本要指定server-id，basedir,plugin-dir等（如mysql5.6&amp;mysql5.7）<br>2、管理多实例，必须保证每个实例同样的用户和密码<br><pre class="language-bash" data-language="bash"><code class="language-bash">Make sure that the MySQL account used <span class="token keyword">for</span> stopping the mysqld servers <span class="token punctuation">(</span>with the mysqladminprogram<span class="token punctuation">)</span> has the same user name and password <span class="token keyword">for</span> each server.shell<span class="token operator">></span> mysql -u root -S /tmp/mysql.sock -pEnter password:mysql<span class="token operator">></span> CREATE <span class="token environment constant">USER</span> <span class="token string">'multi_admin'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'multipass'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> GRANT SHUTDOWN ON *.* TO <span class="token string">'multi_admin'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span></code></pre><br>3、mysqld_multi tag下 password修改成pass 才能停止mysql，mysqld_multi的工具的bug</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装升级</title>
    <link href="/2015/11/16/2015-11-16-mysql-stu02/"/>
    <url>/2015/11/16/2015-11-16-mysql-stu02/</url>
    
    <content type="html"><![CDATA[<h4 id="mysql-dba应该关注的网站"><a href="#mysql-dba应该关注的网站" class="headerlink" title="mysql dba应该关注的网站"></a>mysql dba应该关注的网站</h4><p><a href="http://www.mysql.com/">http://www.mysql.com/</a><br><pre class="language-bash" data-language="bash"><code class="language-bash">mysql包的生命周期 Milestone Release<span class="token punctuation">(</span>MR<span class="token punctuation">)</span><span class="token operator">></span>Release Candidate<span class="token punctuation">(</span>RC<span class="token punctuation">)</span> <span class="token operator">></span>Generally Avaialble<span class="token punctuation">(</span>GA<span class="token punctuation">)</span><span class="token operator">></span>Archived Version</code></pre></p><h4 id="为什么推荐选择MySQL官方版本"><a href="#为什么推荐选择MySQL官方版本" class="headerlink" title="为什么推荐选择MySQL官方版本"></a>为什么推荐选择MySQL官方版本</h4><p>Oracle MySQL，Percona, MariaDB,Drizzle 推荐级别由前到后。<br>Oracle MySQL 官方MysSQL数据库版本，mysql5.6后将Percona的优化集成到官方版本。<br>Percona 使用XtraDB引擎。<br>MariaDB 核心代码相对较老。<br>Drizzle 采用C++语言重构各个模块，它与MySQL不兼容。</p><h4 id="MySQL版本的选择及注意"><a href="#MySQL版本的选择及注意" class="headerlink" title="MySQL版本的选择及注意"></a>MySQL版本的选择及注意</h4><p>推荐安装linux-generic，同时选择mysql5.6以上的版本。因为mysql5.6修复了5.5的好多bug。<br>线上使用注意从<a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a>下载并用md5sum校验文件的MD5值。</p><a id="more"></a><h4 id="MySQL安装及升级"><a href="#MySQL安装及升级" class="headerlink" title="MySQL安装及升级"></a>MySQL安装及升级</h4><p>MySQL5.6安装，主要参考安装文档INSTALL-BINARY文件。<br><pre class="language-bash" data-language="bash"><code class="language-bash">To <span class="token function">install</span> and use a MySQL binary distribution, the <span class="token builtin class-name">command</span>sequence looks like this:shell<span class="token operator">></span> <span class="token function">groupadd</span> mysqlshell<span class="token operator">></span> <span class="token function">useradd</span> -r -g mysql mysqlshell<span class="token operator">></span> <span class="token builtin class-name">cd</span> /usr/localshell<span class="token operator">></span> <span class="token function">tar</span> zxvf /path/to/mysql-VERSION-OS.tar.gzshell<span class="token operator">></span> <span class="token function">ln</span> -s full-path-to-mysql-VERSION-OS mysqlshell<span class="token operator">></span> <span class="token builtin class-name">cd</span> mysqlshell<span class="token operator">></span> <span class="token function">mkdir</span> mysql-filesshell<span class="token operator">></span> <span class="token function">chmod</span> <span class="token number">770</span> mysql-filesshell<span class="token operator">></span> <span class="token function">chown</span> -R mysql <span class="token builtin class-name">.</span>shell<span class="token operator">></span> <span class="token function">chgrp</span> -R mysql <span class="token builtin class-name">.</span>shell<span class="token operator">></span> bin/mysql_install_db --user<span class="token operator">=</span>mysql    <span class="token comment"># Before MySQL 5.7.6</span>shell<span class="token operator">></span> bin/mysqld --initialize --user<span class="token operator">=</span>mysql <span class="token comment"># MySQL 5.7.6 and up</span>shell<span class="token operator">></span> bin/mysql_ssl_rsa_setup              <span class="token comment"># MySQL 5.7.6 and up</span>更改默认文件所属组 bin/mysql_ssl_rsa_setup  --uid mysql --datadir<span class="token operator">=</span>/data/mysql57 shell<span class="token operator">></span> <span class="token function">chown</span> -R root <span class="token builtin class-name">.</span>shell<span class="token operator">></span> <span class="token function">chown</span> -R mysql data mysql-filesshell<span class="token operator">></span> bin/mysqld_safe --user<span class="token operator">=</span>mysql <span class="token operator">&amp;</span><span class="token comment"># Next command is optional</span>shell<span class="token operator">></span> <span class="token function">cp</span> support-files/mysql.server /etc/init.d/mysql.server</code></pre></p><h4 id="MySQL启动与停止"><a href="#MySQL启动与停止" class="headerlink" title="MySQL启动与停止"></a>MySQL启动与停止</h4><p>查看mysql启动加载my.cnf的顺序<br>mysqld -v –help |grep my.cnf<br>my.cnf参数覆盖原则，都读取，相同参数配置值会被后面的覆盖。</p><ul><li><p>a) mysqld启动 [mysqld]<br>mysqld –defaults-file=my.cnf –user=mysql</p></li><li><p>b) mysql_safe启动,调用mysqld [mysql_safe]。<br>mysqld_safe 如果mysqld进程被kill掉，mysqld_safe会被拉起<br>mysqld_safe is a shell script that invokes mysqld<br>mysqld_safe –defaults-file=my.cnf –user=mysql</p></li><li><p>c)mysql.server服务启动 [mysql_server]<br>mysql.server is a shell script that invokes mysqld_safe</p></li><li><p>d)mysqld_multi 多实例启动,指定启动加载配置<br>mysqld_safe –defaults-file=my.cnf &amp; </p></li></ul><p>停止<br>/etc/init.d/mysqld stop<br>mysqladmin shutdown</p><p>登录<br>mysql –login-path 别名     相对安全的登录方式<br>mysql mysql_config_editor set -G 别名 -uroot -p</p><p>升级 </p><ul><li>a)安全的停止数据库,备份系统库。</li><li>b)修改软链接指向</li><li>c)启动mysql，mysql_upgrade -s 升级系统库。</li></ul><p>用户权限管理<br>用户认证流程：user和ip是否允许-&gt;查看mysql.user表-&gt;查看mysql.db表<br>-&gt;查看mysql.table_priv表-&gt;查看mysql.column_priv-&gt;提示用户没有权限</p><h4 id="notes"><a href="#notes" class="headerlink" title="notes:"></a>notes:</h4><ul><li>a)是否已经存在/etc/my.cnf /etc/mysql/my.cnf <br></li><li>b)datadir，innodb_undo_directory,innodb_log_group_home_dir目录权限<br></li><li>c)datadir,innodb_undo_directory,innodb_log_file_size=4G(生产环境至少2G)初始化后不能改变。！！！<br></li><li>d)5.6删除默认的test库，默认所有人都可以连接test库。<br></li><li>e)把自己mysql bin添加在$PATH前面。<br></li><li>f)my.cnf参数覆盖原则<br></li><li>g)通过global修改参数不影响seesion参数<br></li></ul><h4 id="mysql安装问题汇总"><a href="#mysql安装问题汇总" class="headerlink" title="mysql安装问题汇总"></a>mysql安装问题汇总</h4><p>Q：error log 中出现 Table ‘mysql.plugin’ doesn’t exist<br>A：mysql没有初始化或者没有初始化成功</p><p>Q：[ERROR] InnoDB: innodb-page-size mismatch in data file ./ibdata1<br>A：重新初始化前，清空datadir对应的数据目录。初始化后注意修改datadir对应的所属用户和组。</p><p>Q：Installing MySQL system tables…2015-11-11 17:28:26 0 [Warning] ‘ERROR_FOR_DIVISION_BY_ZERO’ is deprecated and will be removed in a future release.<br>2015-11-11 17:28:26 0 [Warning] ‘NO_ZERO_DATE’ is deprecated and will be removed in a future release.<br>2015-11-11 17:28:26 0 [Warning] ‘NO_ZERO_IN_DATE’ is deprecated and will be removed in a future release.<br>A：sql_mode 这些参数ERROR_FOR_DIVISION_BY_ZERO NO_ZERO_DATE NO_ZERO_IN_DATE 这些参数将过时，但是向下兼容的。</p><p>Q:今天安装mysql scripts/mysql_install_db后 mysql.user表为空<br>A：my.cnf 配置autocommit=0导致。</p><p>Q；insert into mysql.user(host,user,password,Grant_priv,Super_priv)values(‘%’,’root’,PASSWORD(‘redhat’),’Y’,’Y’)<br>这个操作也不规范。<br>A：重新初始化或者add user或者copy原来的用户权限表。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my.cnf配置文件注释</title>
    <link href="/2015/11/10/2015-11-10-my-cnf-note/"/>
    <url>/2015/11/10/2015-11-10-my-cnf-note/</url>
    
    <content type="html"><![CDATA[<h4 id="MySQL-5-6-amp-5-7最优配置文件模板"><a href="#MySQL-5-6-amp-5-7最优配置文件模板" class="headerlink" title="MySQL 5.6 &amp; 5.7最优配置文件模板"></a>MySQL 5.6 &amp; 5.7最优配置文件模板</h4><p><a href="http://www.innomysql.net/article/21730.html">http://www.innomysql.net/article/21730.html</a></p><h4 id="my-cnf配置文件注释"><a href="#my-cnf配置文件注释" class="headerlink" title="my.cnf配置文件注释"></a>my.cnf配置文件注释</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token assign-left variable">user</span><span class="token operator">=</span>root<span class="token assign-left variable">password</span><span class="token operator">=</span>rootdefault-character-set<span class="token operator">=</span>utf8mb4<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment">########basic settings########</span>server-id <span class="token operator">=</span> <span class="token number">11</span> port <span class="token operator">=</span> <span class="token number">3306</span>user <span class="token operator">=</span> mysqlbind_address <span class="token operator">=</span> <span class="token number">10.166</span>.224.32autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token assign-left variable">character_set_server</span><span class="token operator">=</span>utf8mb4skip_name_resolve <span class="token operator">=</span> <span class="token number">1</span>max_connections <span class="token operator">=</span> <span class="token number">800</span>max_connect_errors <span class="token operator">=</span> <span class="token number">1000</span>datadir <span class="token operator">=</span> /data/mysql_datatransaction_isolation <span class="token operator">=</span> READ-COMMITTEDexplicit_defaults_for_timestamp <span class="token operator">=</span> <span class="token number">1</span>join_buffer_size <span class="token operator">=</span> <span class="token number">134217728</span>sort_buffer_size <span class="token operator">=</span> <span class="token number">33554432</span>tmp_table_size <span class="token operator">=</span> <span class="token number">67108864</span>tmpdir <span class="token operator">=</span> /tmpmax_allowed_packet <span class="token operator">=</span> <span class="token number">16777216</span>sql_mode <span class="token operator">=</span> <span class="token string">"STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER"</span>interactive_timeout <span class="token operator">=</span> <span class="token number">1800</span>wait_timeout <span class="token operator">=</span> <span class="token number">1800</span>read_buffer_size <span class="token operator">=</span> <span class="token number">16777216</span>read_rnd_buffer_size <span class="token operator">=</span> <span class="token number">33554432</span><span class="token comment">########log settings########</span>log_error <span class="token operator">=</span> error.logslow_query_log <span class="token operator">=</span> <span class="token number">1</span>slow_query_log_file <span class="token operator">=</span> slow.loglog_queries_not_using_indexes <span class="token operator">=</span> <span class="token number">1</span>log_slow_admin_statements <span class="token operator">=</span> <span class="token number">1</span>log_slow_slave_statements <span class="token operator">=</span> <span class="token number">1</span>log_throttle_queries_not_using_indexes <span class="token operator">=</span> <span class="token number">10</span>expire_logs_days <span class="token operator">=</span> <span class="token number">90</span>long_query_time <span class="token operator">=</span> <span class="token number">2</span>min_examined_row_limit <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">########replication settings########</span>master_info_repository <span class="token operator">=</span> TABLErelay_log_info_repository <span class="token operator">=</span> TABLElog_bin <span class="token operator">=</span> bin.logsync_binlog <span class="token operator">=</span> <span class="token number">1</span>gtid_mode <span class="token operator">=</span> onenforce_gtid_consistency <span class="token operator">=</span> <span class="token number">1</span>log_slave_updatesbinlog_format <span class="token operator">=</span> row relay_log <span class="token operator">=</span> relay.logrelay_log_recovery <span class="token operator">=</span> <span class="token number">1</span>binlog_gtid_simple_recovery <span class="token operator">=</span> <span class="token number">1</span>slave_skip_errors <span class="token operator">=</span> ddl_exist_errors<span class="token comment">########innodb settings########</span>innodb_page_size <span class="token operator">=</span> <span class="token number">8192</span>innodb_buffer_pool_size <span class="token operator">=</span> 6Ginnodb_buffer_pool_instances <span class="token operator">=</span> <span class="token number">8</span>innodb_buffer_pool_load_at_startup <span class="token operator">=</span> <span class="token number">1</span>innodb_buffer_pool_dump_at_shutdown <span class="token operator">=</span> <span class="token number">1</span>innodb_lru_scan_depth <span class="token operator">=</span> <span class="token number">2000</span>innodb_lock_wait_timeout <span class="token operator">=</span> <span class="token number">5</span>innodb_io_capacity <span class="token operator">=</span> <span class="token number">4000</span>innodb_io_capacity_max <span class="token operator">=</span> <span class="token number">8000</span>innodb_flush_method <span class="token operator">=</span> O_DIRECTinnodb_file_format <span class="token operator">=</span> Barracudainnodb_file_format_max <span class="token operator">=</span> Barracudainnodb_log_group_home_dir <span class="token operator">=</span> /redolog/innodb_undo_directory <span class="token operator">=</span> /undolog/innodb_undo_logs <span class="token operator">=</span> <span class="token number">128</span>innodb_undo_tablespaces <span class="token operator">=</span> <span class="token number">3</span>innodb_flush_neighbors <span class="token operator">=</span> <span class="token number">1</span>innodb_log_file_size <span class="token operator">=</span> 4Ginnodb_log_buffer_size <span class="token operator">=</span> <span class="token number">16777216</span>innodb_purge_threads <span class="token operator">=</span> <span class="token number">4</span>innodb_large_prefix <span class="token operator">=</span> <span class="token number">1</span>innodb_thread_concurrency <span class="token operator">=</span> <span class="token number">64</span>innodb_print_all_deadlocks <span class="token operator">=</span> <span class="token number">1</span>innodb_strict_mode <span class="token operator">=</span> <span class="token number">1</span>innodb_sort_buffer_size <span class="token operator">=</span> <span class="token number">67108864</span> <span class="token comment">########semi sync replication settings########</span><span class="token assign-left variable">plugin_dir</span><span class="token operator">=</span>/usr/local/mysql/lib/pluginplugin_load <span class="token operator">=</span> <span class="token string">"rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"</span>loose_rpl_semi_sync_master_enabled <span class="token operator">=</span> <span class="token number">1</span>loose_rpl_semi_sync_slave_enabled <span class="token operator">=</span> <span class="token number">1</span>loose_rpl_semi_sync_master_timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">[</span>mysqld-5.7<span class="token punctuation">]</span>innodb_buffer_pool_dump_pct <span class="token operator">=</span> <span class="token number">40</span>innodb_page_cleaners <span class="token operator">=</span> <span class="token number">4</span>innodb_undo_log_truncate <span class="token operator">=</span> <span class="token number">1</span>innodb_max_undo_log_size <span class="token operator">=</span> 2Ginnodb_purge_rseg_truncate_frequency <span class="token operator">=</span> <span class="token number">128</span><span class="token assign-left variable">binlog_gtid_simple_recovery</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">log_timestamps</span><span class="token operator">=</span>system<span class="token assign-left variable">transaction_write_set_extraction</span><span class="token operator">=</span>MURMUR32<span class="token assign-left variable">show_compatibility_56</span><span class="token operator">=</span>on</code></pre><a id="more"></a><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><p>1、server-id = n  给服务器分配一个独一无二的ID编号;n的取值范围是1~2的32次方。<br><br><a href="http://blogread.cn/it/article/2354">http://blogread.cn/it/article/2354</a><br><a href="http://www.mysqlsystems.com/2010/06/dba-job-experience-two.html">http://www.mysqlsystems.com/2010/06/dba-job-experience-two.html</a></p><p>2、autocommit = 0  如果设置成0，你必须commit去提交事务。<br><a href="http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_autocommit">http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_autocommit</a></p><p>3、字符设定<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character-set-server<span class="token operator">=</span>utf8mb4collation-server<span class="token operator">=</span>utf8mb4_general_ci<span class="token punctuation">[</span>clent<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8mb4</code></pre></p><p>4、skip_name_resolve=1<br>禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，<br>则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求。</p><p>5、max_connections<br>一般设置800-100，max_used_connections一般不做设置。<br>max_used_connections / max_connections * 100% （理想值≈ 85%） </p><p>6、max_connect_errors = 1000<br>max_connect_errors是一个MySQL中与安全有关的计数器值，它负责阻止过多尝试失败的客户端以防止暴力破解密码的情况。max_connect_errors的值与性能并无太大关系。<br><br><a href="http://www.bootf.com/514.html">http://www.bootf.com/514.html</a></p><p>7、transaction_isolation = READ-COMMITTED<br><a href="http://www.cnblogs.com/zemliu/archive/2012/06/17/2552301.html">http://www.cnblogs.com/zemliu/archive/2012/06/17/2552301.html</a></p><p>8、explicit_defaults_for_timestamp = 1<br>修改TIMESTAMP的默认行为。<br><a href="http://www.williamsang.com/archives/818.html">http://www.williamsang.com/archives/818.html</a></p><p>9、tmp_table_size = 67108864（67M）<br>规定内部内存临时表的最大值<br>max_heap_table_size(为什么不设置这个值？)此定义用户可以创建的内存表的大小。<br><br>max_heap_table_size与tmp_table_size一起限制了内部内存表的大小。建议不超过128M。</p><p>10、max_allowed_packet = 16777216（16M）mysql允许你发送的最大数据包的请求。<br><br><a href="http://www.cnblogs.com/yeahgis/archive/2012/03/16/2399985.html">http://www.cnblogs.com/yeahgis/archive/2012/03/16/2399985.html</a></p><p>11、sql_mode =<br>“STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,<br>ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER”<br><br>sql_mode常用的三个， ANSI，STRICT_TRANS_TABLES，TRADITIONAL。<br><br>NO_ENGINE_SUBSTITUTION 如果需要的存储引擎被禁用或未编译，可以防止自动替换存储引擎。<br><br>STRICT_TRANS_TABLES 启用了对所有事务表的严格模式。<br><br>STRICT_ALL_TABLES启用了对所有表的严格模式。<br><br>ERROR_FOR_DIVISION_BY_ZERO  除0插入NULL并产生警告。<br><br>NO_AUTO_CREATE_USER 授权用户时必须知道制定用户密码。<br><br><a href="http://www.cnblogs.com/ainiaa/archive/2010/12/31/1923002.html">http://www.cnblogs.com/ainiaa/archive/2010/12/31/1923002.html</a></p><p>12、interactive_timeout = 1800（30分） 服务器关闭交互式连接前等待活动的秒数。<br>wait_timeout = 1800（30分）服务器关闭非交互连接之前等待活动的秒数。</p><p>13、read_buffer_size = 16777216 （16M）<br>是MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。<br><br>read_rnd_buffer_size = 33554432 (32M)<br>是MySql的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。<br><br>join_buffer_size = 134217728 (134M) 联合查询操作所能使用的缓冲区大小 <br><br>sort_buffer_size = 33554432(33M) 每个需要进行排序的线程分配该大小的一个缓冲区。<br>增加这值加速ORDER BY或GROUP BY操作。</p><p>14、log_queries_not_using_indexes=1 如果log_queries_not_using_indexes为ON的话，当执行一个sql语句的时候，如果一个表没有索引就会把这个信息记录在慢查询文件中。<br><br>log_throttle_queries_not_using_indexes 限制每分钟写入慢查询日志中不使用索引的查询语句的数量，<br>默认值为0,表示无限制<br><br>min_examined_row_limit = 100 扫描记录少于该值的sql不记录到慢查询日志中，前提是必须满足long_query_time<br>和log_queries_not_using_indexes约束。</p><p>15、log_slow_admin_statements = 1<br>指定执行过慢的DDL语句写入慢日志，包含：ALTER TABLE, ANALYZE TABLE, CHECK TABLE, CREATE INDEX, DROP INDEX,<br>OPTIMIZE TABLE及REPAIR TABLE。 <br><br>log_slow_slave_statements = 1 备库将复制查询语句写入慢日志，默认不会写入</p><p>16、innodb_page_size = 8192(8K) 设置Innodb数据页大小，默认为16K <br><br><a href="http://mysqllover.com/?p=1329">http://mysqllover.com/?p=1329</a></p><p>17、innodb_buffer_pool_size = 6G<br>分配足够 innodb_buffer_pool_size,来将整个InnoDB 文件加载到内存,减少从磁盘上读。<br>内存的70-80%  innodb对缓冲更为敏感。Innodb引擎会把数据和索引都缓存起来。无需给操作系统留太多的内存。<br>如果数据量比较小，则无需把innodb_buffer_pool_size设置的过大。</p><p>18、innodb_buffer_pool_instances = 8<br> innodb_buffer_pool_instances的值主要用于将innodb buffer pool进行划分，通过划分innodb buffer pool为多个实例，可以提高并发能力，并且减少了不同线程读写造成的缓冲页。每一页从其中一个buffer pool中使用hash函数随机的读取和写入。每个buffer pool管理和维护各自的信息，包括free lists、flush lists、LRUs等。<br><br><a href="http://blog.chinaunix.net/uid-26896862-id-3345441.html">http://blog.chinaunix.net/uid-26896862-id-3345441.html</a></p><p>19、innodb_buffer_pool_load_at_startup = 1  在启动时把热数据加载到内存。<br>innodb_buffer_pool_dump_at_shutdown = 1 在关闭时把热数据dump到本地磁盘<br><a href="http://blog.csdn.net/zhu19774279/article/details/38645663">http://blog.csdn.net/zhu19774279/article/details/38645663</a></p><p>20、innodb_io_capacity = 4000  默认值为200 innodb_io_capacity越大，一次刷新的脏页的数量也就越大.<br><br>innodb_io_capacity_max = 8000 <br><br>innodb_lru_scan_depth = 2000  默认值为 1024. 这是mysql 5.6中引入的一个新选项. Mark Callaghan 提供了 一些配置建议. 简单来说,如果增大了 innodb_io_capacity 值, 应该同时增加 innodb_lru_scan_depth.<br><br><a href="https://opvps.com/mysql-innodb-performance-tuning/">https://opvps.com/mysql-innodb-performance-tuning/</a></p><p>21、innodb_lock_wait_timeout = 5 默认值为 50 秒。<br>在回滚(rooled back)之前，InnoDB 事务将等待超时的时间(单位 秒)。InnoDB 会自动检查自身在锁定表与事务回滚时的事务死锁。如果使用 LOCK TABLES 命令，或在同一个事务中使用其它事务安全型表处理器(transaction safe table handlers than InnoDB)，那么可能会发生一个 InnoDB 无法注意到的死锁。在这种情况下超时将用来解决这个问题。<br><a href="http://man.chinaunix.net/database/mysql/inonodb_zh/2.htm">http://man.chinaunix.net/database/mysql/inonodb_zh/2.htm</a></p><p>22、innodb_flush_method = O_DIRECT  数据文件的写入操作是直接从mysql innodb buffer到磁盘的，并不用通过操作系统的缓冲，而真正的完成也是在flush这步,日志还是要经过OS缓冲。<br><a href="http://www.orczhou.com/index.php/2009/08/innodb_flush_method-file-io/">http://www.orczhou.com/index.php/2009/08/innodb_flush_method-file-io/</a><br><a href="http://blog.csdn.net/jiao_fuyou/article/details/16113403">http://blog.csdn.net/jiao_fuyou/article/details/16113403</a></p><p>23、innodb_file_format = Barracuda <br><br>innodb_file_format_max = Barracuda <br><br>目前，在InnoDB Plugin（1.0.6）配置文件中innodb_file_format支持两种：Antelope/ˈæntɪləʊp/、Barracuda/ˌbærəˈkjuːdə/。他们分别是两种文件格式的代号，在未来版本中，InnoDB将继续延续这种代号机制，它们会是Antelope, Barracuda, Cheetah, Dragon, Elk, Fox等等。<br><br><a href="http://www.orczhou.com/index.php/2010/03/innodb-plugin-file-format/">http://www.orczhou.com/index.php/2010/03/innodb-plugin-file-format/</a></p><p>24、innodb_log_group_home_dir = /redolog/ InnoDB 日志文件的路径。必须与innodb_log_arch_dir设置相同值。 如果没有明确指定将默认在 MySQL 的datadir目录下建立两个 5 MB 大小的 ib_logfile… 文件。</p><p>25、innodb_undo_logs = 128 用于表示回滚段的个数<br><br>innodb_undo_tablespaces = 3   用于设定创建的undo表空间的个数，在Install db时初始化后，就再也不能被改动了；<br><br>innodb_undo_directory = /undolog/  当开启独立undo表空间时，指定undo文件存放的目录<br><br><a href="http://mysqllover.com/?p=873">http://mysqllover.com/?p=873</a></p><p>26、innodb_flush_neighbors = 1 刷新邻接页，当刷新一个脏页时，InnoDB存储引擎会检测该页所在区（extent）的所有页，如果是脏页，那么一起进行刷新。<br>对于传统机械硬盘建议启用该特性，而对于固态硬盘有着超高IOPS性能的磁盘，则建议将该参数设置为0，即关闭此特性。</p><p>27、innodb_log_file_size = 4G redo日志的大小。redo日志被用于确保写操作快速而可靠并且在崩溃时恢复。<br><br>innodb_log_buffer_size = 16777216 (16M)  缓冲器的字节大小的InnoDB使用写入到日志文件在磁盘上。</p><p>28、innodb_purge_threads = 4 Purge Thread(清洗线程)数，默认为4<br>增加值大于1创建许多单独的清洗线程，从而可以提高在其中的系统效率的DML上多个表执行操作。</p><p>29、innodb_large_prefix = 1<br>设定对于使用了DYNAMIC或COMPRESSED行格式的InnoDB表来说，是否能够使用大于767字节长度的索引前缀。</p><p>30、innodb_thread_concurrency = 64<br>用于限制能够进入innodb层的线程数，如果已经满了，就会等待innodb_thread_sleep_delay毫秒尝试一次。</p><p>31、innodb_print_all_deadlocks = 1<br>将所有的死锁信息全写入错误日志中</p><p>32、innodb_strict_mode = 1 InnoDB 对一些条件是否返回错误而不是警告。默认是ON。</p><p>33、innodb_sort_buffer_size = 67108864 (64M) 默认1M<br>通过CREATE INDEX、ALTER TABLE创建索引时，分配的缓冲区大小。</p><p>34、master_info_repository = TABLE <br><br>relay_log_info_repository = TABLE <br><br>多源复制需开启这两个项，MySQL存储master-info和relay-info的方式，即从文件存储改为表存储。可用于实现在奔溃时保证二进制及从服务器的安全的功能。<br><br><a href="https://www.longlong.asia/2015/10/21/mysql57-new-features.html">https://www.longlong.asia/2015/10/21/mysql57-new-features.html</a></p><p>35、sync_binlog = 1 控制数据库的binlog刷到磁盘上去<br><a href="http://www.cnblogs.com/Cherie/p/3309503.html">http://www.cnblogs.com/Cherie/p/3309503.html</a></p><p>36、gtid_mode = on 开启gtid<br><br>log_slave_updates <br><br>enforce_gtid_consistency = 1 如果要开启GTID功能，需要同时开启log-bin和log_slave_updates功能，<br>另外还需要开启enforce_gtid_consistency功能。</p><p>37、binlog_format = row 基于行的复制<br><a href="http://blog.csdn.net/vhomes/article/details/8082734">http://blog.csdn.net/vhomes/article/details/8082734</a></p><p>38、slave_skip_errors = ddl_exist_errors<br>slave_skip_errors选项有四个可用值，分别为：off，all，ErorCode，ddl_exist_errors。<br>默认情况下该参数值是off，我们可以列出具体的error code，也可以选择all，mysql5.6及MySQL Cluster NDB 7.3以及后续版本增加了参数ddl_exist_errors，该参数包含一系列error code（1007,1008,1050,1051,1054,1060,1061,1068,1094,1146）<br><a href="http://blog.csdn.net/jesseyoung/article/details/40585809">http://blog.csdn.net/jesseyoung/article/details/40585809</a></p><p>39、plugin_dir=/usr/local/mysql/lib/plugin <br><br>plugin_load = “rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so” <br><br>loose_rpl_semi_sync_master_enabled = 1 <br><br>loose_rpl_semi_sync_slave_enabled = 1 <br><br>loose_rpl_semi_sync_master_timeout = 5000 <br><br><a href="http://www.mike.org.cn/articles/how-to-install-the-mysql-plugin/">http://www.mike.org.cn/articles/how-to-install-the-mysql-plugin/</a><br><a href="http://www.orczhou.com/index.php/2011/06/mysql-5-5-semi-sync-replication-setup-config/">http://www.orczhou.com/index.php/2011/06/mysql-5-5-semi-sync-replication-setup-config/</a></p><h4 id="5-7新增参数"><a href="#5-7新增参数" class="headerlink" title="5.7新增参数"></a>5.7新增参数</h4><p>40、innodb_buffer_pool_dump_pct = 40<br>表示转储每个bp instance LRU上最热的page的百分比。通过设置该参数可以减少转储的page数。<br>相关参考19项。<br><a href="http://mysqllover.com/?p=1123">http://mysqllover.com/?p=1123</a></p><p>41、innodb_page_cleaners = 4  设置多个page cleaner线程提高脏页刷新效率</p><p>42、innodb_undo_log_truncate = 1 自动删除不用的 undo log</p><p>43、innodb_max_undo_log_size = 2G  控制最大undo tablespace文件的大小，超过这个阀值时才会去尝试truncate。truncate后的大小默认为10M。</p><p>44、innodb_purge_rseg_truncate_frequency = 128<br>用于控制purge回滚段的频度。 Innodb Purge操作的协调线程每隔这么多次purge事务分发后，就会触发一次History purge，并检查当前的undo log 表空间状态是否会触发truncate。</p><p>45、log_timestamps=system 控制写入一般查询日志（慢查询日志和错误日志）的时间戳时区信息，当写入日志表时的时区信息根据time_zone系统变量来设定。<br><a href="http://debugo.com/mysql-reading-note-the-general-query-log">http://debugo.com/mysql-reading-note-the-general-query-log</a></p><p>46、transaction_write_set_extraction=MURMUR32 预留<br>show_compatibility_56=on 兼容5.6版本</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iptables notes</title>
    <link href="/2015/07/07/2015-07-07-iptables-notes/"/>
    <url>/2015/07/07/2015-07-07-iptables-notes/</url>
    
    <content type="html"><![CDATA[<h4 id="链"><a href="#链" class="headerlink" title="链"></a>链</h4><pre class="language-bash" data-language="bash"><code class="language-bash">INPUT：位于filter表，匹配目的ip是本机的数据包FORWARD： 位于filter表，匹配穿越本机的数据包PREROUTING： 位于 nat 表，用于修改目的地址（DNAT）POSTROUTING：位于 nat 表，用于修改源地址（SNAT）OUTPUT：位于filter表，匹配源ip是本机的数据包</code></pre><h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -F 清空所有规则链<span class="token punctuation">(</span>谨慎用，尤其是默认策略是DROP<span class="token punctuation">)</span>iptables -X 删除特定手工设置的链iptables -Z 清空计数器</code></pre><a id="more"></a><h4 id="修改默认策略"><a href="#修改默认策略" class="headerlink" title="修改默认策略"></a>修改默认策略</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -P INPUT DROP iptables -P OUTPUT DROP iptables -P FORWARD DROP</code></pre><h4 id="保存恢复"><a href="#保存恢复" class="headerlink" title="保存恢复"></a>保存恢复</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables-save用来保存当前内存空间的策略，iptables-restore用来将iptables配置文件的策略写入内存空间。</code></pre><h4 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -nvL --lineiptables -t nat -L -n --line</code></pre><h4 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -D INPUT num_idiptables -t nat -D PREROUTING num_id</code></pre><h4 id="允许ping"><a href="#允许ping" class="headerlink" title="允许ping"></a>允许ping</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPTiptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT</code></pre><h4 id="禁止ping"><a href="#禁止ping" class="headerlink" title="禁止ping"></a>禁止ping</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -p icmp --icmp-type <span class="token number">8</span> -s <span class="token number">0</span>/0 -j DROPEcho request——回显请求（Ping请求）</code></pre><h4 id="允许ping回环"><a href="#允许ping回环" class="headerlink" title="允许ping回环"></a>允许ping回环</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -i lo -j ACCEPTiptables -A OUTPUT -o lo -j ACCEPT</code></pre><h4 id="开启ssh端口"><a href="#开启ssh端口" class="headerlink" title="开启ssh端口"></a>开启ssh端口</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -i eth1 -p tcp -m tcp --dport <span class="token number">22</span> -j ACCEPTiptables -A OUTPUT -o eth1 -p tcp -m tcp --sport <span class="token number">22</span> -m state --state ESTABLISHED -j ACCEPT</code></pre><h4 id="开启redis端口"><a href="#开启redis端口" class="headerlink" title="开启redis端口"></a>开启redis端口</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -d dest_host -p tcp --dport <span class="token number">6379</span> -m state --state NEW,ESTABLISHED -j ACCEPTiptables -A OUTPUT -s dest_host -p tcp --sport <span class="token number">6379</span> -m state --state ESTABLISHED -j ACCEPT</code></pre><h4 id="开启1234端口"><a href="#开启1234端口" class="headerlink" title="开启1234端口"></a>开启1234端口</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -i eth1 -p tcp --dport <span class="token number">1234</span> -m state --state NEW,ESTABLISHED -j ACCEPTiptables -A OUTPUT -o eth1 -p tcp --sport <span class="token number">1234</span> -m state --state ESTABLISHED -j ACCEPT</code></pre><h4 id="开启域名解析并允许访问固定ip"><a href="#开启域名解析并允许访问固定ip" class="headerlink" title="开启域名解析并允许访问固定ip"></a>开启域名解析并允许访问固定ip</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -p udp --sport <span class="token number">53</span> -j ACCEPTiptables -A OUTPUT -p udp --dport <span class="token number">53</span> -j ACCEPTiptables -A OUTPUT -d <span class="token number">0.0</span>.0.0/0 -j ACCEPTiptables -A INPUT -s <span class="token number">182.92</span>.18.4 -j ACCEPT</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql表分区基础</title>
    <link href="/2015/06/12/2015-06-12-mysql-partition/"/>
    <url>/2015/06/12/2015-06-12-mysql-partition/</url>
    
    <content type="html"><![CDATA[<h5 id="表结构文件"><a href="#表结构文件" class="headerlink" title="表结构文件"></a>表结构文件</h5><pre class="language-bash" data-language="bash"><code class="language-bash">.frm  表结构文件.par  partition申明一个分区表.ibd  数据索引文件   innodb引擎表.MYD  数据文件       myisam表数据文件.MYI  索引文件       myisam表索引文件Myisam 存储引擎，它默认使用独立表空间InnoDB 存储引擎，默认使用共享表空间,默认存到ibdata1查看表空间设置 SHOW VARIABLES LIKE <span class="token string">'%innodb_file_per_table%'</span><span class="token punctuation">;</span>修改表空间设置<span class="token punctuation">(</span>/ect/my.cnf<span class="token punctuation">)</span><span class="token assign-left variable">innodb_file_per_table</span><span class="token operator">=</span><span class="token number">1</span>查看mysql是否支持分区show plugins<span class="token punctuation">;</span>orshow variables like <span class="token string">'%part%'</span><span class="token punctuation">;</span></code></pre><a id="more"></a><h5 id="分区类型"><a href="#分区类型" class="headerlink" title="分区类型"></a>分区类型</h5><pre class="language-bash" data-language="bash"><code class="language-bash">RANGE: 基于一个连续的区间范围，将数据分配到不同的分区。<span class="token operator">&lt;</span>br<span class="token operator">></span>LIST：基于枚举出的值列表分区。<span class="token operator">&lt;</span>br<span class="token operator">></span>HASH: 基于给定的分区数，将数据分配到不同的分区。<span class="token operator">&lt;</span>br<span class="token operator">></span>KEY： 类似于HASH分区，但不允许用户自定义表达式。</code></pre><h5 id="RANGE分区"><a href="#RANGE分区" class="headerlink" title="RANGE分区"></a>RANGE分区</h5><pre class="language-bash" data-language="bash"><code class="language-bash">CREATE TABLE <span class="token environment constant">USER</span><span class="token punctuation">(</span><span class="token function">id</span> INT NOT NULL,NAME VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PARTITION BY RANGE<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">(</span>PARTITION p1 VALUES LESS THAN <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,PARTITION p2 VALUES LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>,PARTITION p3 VALUES LESS THAN <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>,PARTITION p4 VALUES LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>insert into user values <span class="token punctuation">(</span><span class="token number">1</span>,<span class="token string">'aaa'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">2</span>,<span class="token string">'bbb'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">3</span>,<span class="token string">'ccc'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">4</span>,<span class="token string">'ddd'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">5</span>,<span class="token string">'eee'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">6</span>,<span class="token string">'fff'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">7</span>,<span class="token string">'ggg'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">8</span>,<span class="token string">'hhh'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">9</span>,<span class="token string">'iii'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">10</span>,<span class="token string">'jjj'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">11</span>,<span class="token string">'kkk'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">12</span>,<span class="token string">'lll'</span><span class="token punctuation">)</span>查看表结构show create table user<span class="token punctuation">;</span>查看查询是否使用partition分区过滤EXPLAIN PARTITIONS SELECT id,NAME FROM user where <span class="token function">id</span> <span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">\</span>G</code></pre><p>list分区</p><pre class="language-bash" data-language="bash"><code class="language-bash">CREATE TABLE listname<span class="token punctuation">(</span><span class="token function">id</span> INT NOT NULL,NAME VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PARTITION BY LIST <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">(</span>PARTITION p1 VALUES IN <span class="token punctuation">(</span><span class="token number">1,3</span>,5<span class="token punctuation">)</span>,PARTITION p2 VALUES IN <span class="token punctuation">(</span><span class="token number">2,4</span>,6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO listname VALUES <span class="token punctuation">(</span><span class="token number">1</span>,<span class="token string">'111'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">2</span>,<span class="token string">'222'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">3</span>,<span class="token string">'333'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">4</span>,<span class="token string">'444'</span><span class="token punctuation">)</span>EXPLAIN PARTITIONS SELECT * FROM listname WHERE <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>hash分区</p><pre class="language-bash" data-language="bash"><code class="language-bash">CREATE TABLE hash_part<span class="token punctuation">(</span><span class="token function">id</span> INT NOT NULL,NAME VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PARTITION BY <span class="token builtin class-name">hash</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">(</span>PARTITIONS <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO hash_part VALUES <span class="token punctuation">(</span><span class="token number">1</span>,<span class="token string">'111'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">2</span>,<span class="token string">'222'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">3</span>,<span class="token string">'333'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">4</span>,<span class="token string">'444'</span><span class="token punctuation">)</span>EXPLAIN PARTITIONS SELECT * FROM hash_part WHERE <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">ls</span> /var/lib/mysql/ceshi/</code></pre><p>key分区</p><pre class="language-bash" data-language="bash"><code class="language-bash">CREATE TABLE key_part<span class="token punctuation">(</span><span class="token function">id</span> INT NOT NULL,NAME VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PARTITION BY LINEAR KEY <span class="token punctuation">(</span>id<span class="token punctuation">)</span>PARTITIONS <span class="token number">3</span><span class="token punctuation">;</span>INSERT INTO key_part VALUES <span class="token punctuation">(</span><span class="token number">1</span>,<span class="token string">'111'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">2</span>,<span class="token string">'222'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">3</span>,<span class="token string">'333'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">4</span>,<span class="token string">'444'</span><span class="token punctuation">)</span>EXPLAIN PARTITIONS SELECT * FROM key_part WHERE <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">ls</span> /var/lib/mysql/ceshi/</code></pre><h5 id="分区管理"><a href="#分区管理" class="headerlink" title="分区管理"></a>分区管理</h5><pre class="language-bash" data-language="bash"><code class="language-bash">删除分区alter table tbl_name DROP PARTITION partition_names<span class="token punctuation">;</span>新增分区range添加alter table <span class="token environment constant">USER</span> <span class="token function">add</span> partition <span class="token punctuation">(</span>partition p4 values <span class="token function">less</span> than MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>list添加alter table listname <span class="token function">add</span> partition <span class="token punctuation">(</span>partition p3 values <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">7,8</span>,9<span class="token punctuation">))</span><span class="token punctuation">;</span>hash重新分区alter table hash_part <span class="token function">add</span> partition partitions  <span class="token number">6</span><span class="token punctuation">;</span>key重新分区alter table key_part <span class="token function">add</span> partition partitions  <span class="token number">6</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql学习笔记之一</title>
    <link href="/2015/06/09/2015-06-09-mysql-stu01/"/>
    <url>/2015/06/09/2015-06-09-mysql-stu01/</url>
    
    <content type="html"><![CDATA[<h4 id="下载mysql安装包"><a href="#下载mysql安装包" class="headerlink" title="下载mysql安装包"></a>下载mysql安装包</h4><pre class="language-bash" data-language="bash"><code class="language-bash">http://downloads.mysql.com/archives/community/RPM BundleMySQL-client-5.6.16-1.el6.x86_64.rpm  客户端      MySQL-server-5.6.16-1.el6.x86_64.rpm  服务端MySQL-devel-5.6.16-1.el6.x86_64.rpm 库和头文件MySQL-shared-5.6.16-1.el6.x86_64.rpm 共享库MySQL-shared-compat-5.6.16-1.el6.x86_64.rpm 兼容包MySQL-embedded-5.6.16-1.el6.x86_64.rpm 嵌入式版本MySQL-test-5.6.16-1.el6.x86_64.rpm 测试包详细解释参考：http://dev.mysql.com/doc/refman/5.6/en/linux-installation-rpm.html默认库的作用Information_Schema提供了访问数据库元数据的方式。元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。Performance_Schema是MySQL较为底层的性能监控特性，提供一系列、具备自定义收集粒度的监控体系。</code></pre><a id="more"></a><h4 id="mysql启动（service-mysqld-start）"><a href="#mysql启动（service-mysqld-start）" class="headerlink" title="mysql启动（service mysqld start）"></a>mysql启动（service mysqld start）</h4><pre class="language-bash" data-language="bash"><code class="language-bash">mysqld --help --verbose <span class="token operator">|</span><span class="token function">less</span> 查看mysql启动读取配置文件顺序Default options are <span class="token builtin class-name">read</span> from the following files <span class="token keyword">in</span> the given order:/etc/my.cnf /etc/mysql/my.cnf /opt/mysql/etc/my.cnf ~/.my.cnfa<span class="token punctuation">)</span> mysqld启动 <span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>mysqld --defaults-file<span class="token operator">=</span>my.cnf --user<span class="token operator">=</span>mysqlb<span class="token punctuation">)</span> mysql_safe启动， 调用mysqld <span class="token punctuation">[</span>mysql_safe<span class="token punctuation">]</span>mysqld_safe is a shell script that invokes mysqldmysqld_safe --defaults-file<span class="token operator">=</span>my.cnf --user<span class="token operator">=</span>mysqlc<span class="token punctuation">)</span>mysql.server服务启动 <span class="token punctuation">[</span>mysql_server<span class="token punctuation">]</span>mysql.server is a shell script that invokes mysqld_safed<span class="token punctuation">)</span>mysqld_multi 多实例启动mysql停止（service mysqld stop）mysqladmin <span class="token function">shutdown</span></code></pre><h4 id="设置数据库字符编码-etc-my-cnf"><a href="#设置数据库字符编码-etc-my-cnf" class="headerlink" title="设置数据库字符编码(/etc/my.cnf)"></a>设置数据库字符编码(/etc/my.cnf)</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set <span class="token operator">=</span> utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character-set-server <span class="token operator">=</span> utf8collation-server <span class="token operator">=</span> utf8_general_cimysql<span class="token operator">></span>SHOW VARIABLES LIKE <span class="token string">'%char%'</span><span class="token punctuation">;</span></code></pre><h4 id="MySql配置优化-etc-my-cnf"><a href="#MySql配置优化-etc-my-cnf" class="headerlink" title="MySql配置优化(/etc/my.cnf)"></a>MySql配置优化(/etc/my.cnf)</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、使用 <span class="token assign-left variable">innodb_flush_method</span><span class="token operator">=</span>O_DIRECT 来避免写的时候出现双缓冲区。fdatasync模式：写数据时，write这一步并不需要真正写到磁盘才算完成（可能写入到操作系统buffer中就会返回完成），真正完成是flush操作，buffer交给操作系统去flush,并且文件的元数据信息也都需要更新到磁盘。O_DSYNC模式：写日志操作是在write这步完成，而数据文件的写入是在flush这步通过fsync完成O_DIRECT模式：数据文件的写入操作是直接从mysql innodb buffer到磁盘的，并不用通过操作系统的缓冲，而真正的完成也是在flush这步,日志还是要经过OS缓冲<span class="token number">2</span>、分配足够 innodb_buffer_pool_size ，来将整个InnoDB 文件加载到内存 — 减少从磁盘上读。内存的70-80%   innodb对缓冲更为敏感。Innodb引擎会把数据和索引都缓存起来。无需给操作系统留太多的内存。如果数据量比较小，则无需把innodb_buffer_pool_size设置的过大。<span class="token number">3</span>、不要让 innodb_log_file_size 太大，这样能够更快，也有更多的磁盘空间 — 经常刷新有利降低发生故障时的恢复时间。innodb_log_file_size开得太大，会明显增加innodb的log写入操作，而且会造成操作系统需要更多的Disk Cache开销。 <span class="token number">4</span>、为 max_connections 指定一个小的值 — 太多的连接将耗尽你的RAM，导致整个MySQL服务器被锁定，如果你经常看到‘Too many connections’错误，是因为max_connections的值太低了。这非常常见因为应用程序没有正确的关闭数据库连接，你需要比默认的151连接数更大的值。Mysql连接数：通过show full processlist<span class="token punctuation">;</span> status中Threads:43参数最大连接数：show variables like <span class="token string">'max_connections'</span><span class="token punctuation">;</span>最大峰值连接数：show global status like <span class="token string">'max_used_connections'</span><span class="token punctuation">;</span>Max_used_connections / max_connections * <span class="token number">100</span>% ≈ <span class="token number">85</span>%<span class="token number">5</span>、innodb_flush_log_at_trx_commit <span class="token operator">=</span> <span class="token number">2</span>主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入日志文件并flush磁盘一次；1，则在每秒钟或是每次事务的提交都会引起日志文件写入、flush磁盘的操作，确保了事务的ACID；设置为2，每次事务提交引起写入日志文件的动作，但每秒钟完成一次flush磁盘操作。显然，设置为0或2可以减小系统的io压力，特别是0时，速度最快，提高mysql写操作的吞吐量，但mysql或操作系统的崩溃、断电都可能会引起数据的丢失，设置为2时os的崩溃和断电可能会引起数据的丢失。  <span class="token number">6</span>、使用 skip-name-resolve — 移除 DNS 查找。修改配置/etc/my.cnf</code></pre><h4 id="MySql相关的参数"><a href="#MySql相关的参数" class="headerlink" title="MySql相关的参数"></a>MySql相关的参数</h4><pre class="language-bash" data-language="bash"><code class="language-bash">QPS<span class="token punctuation">(</span>每秒Query量<span class="token punctuation">)</span> 基于Questions计算出QPS：mysql<span class="token operator">></span> show global status like <span class="token string">'Questions'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> show global status like <span class="token string">'Uptime'</span><span class="token punctuation">;</span>QPS <span class="token operator">=</span> Questions / UptimeTPS<span class="token punctuation">(</span>每秒事务量<span class="token punctuation">)</span> 基于Com_commit和Com_rollback计算出TPS：mysql<span class="token operator">></span> show global status like <span class="token string">'Com_commit'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> show global status like <span class="token string">'Com_rollback'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> show global status like <span class="token string">'Uptime'</span><span class="token punctuation">;</span>TPS <span class="token operator">=</span> <span class="token punctuation">(</span>Com_commit + Com_rollback<span class="token punctuation">)</span> / Uptime另外一种查询,基于Com_select、Com_insert、Com_delete、Com_update计算出QPSmysql<span class="token operator">></span> show global status where Variable_name in<span class="token punctuation">(</span><span class="token string">'com_select'</span>,<span class="token string">'com_insert'</span>,<span class="token string">'com_delete'</span>,<span class="token string">'com_update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>等待1秒再执行，获取间隔差值，第二次每个变量值减去第一次对应的变量值，就是QPS计算TPS，就不算查询操作了，计算出插入、删除、更新四个值即可。mysql<span class="token operator">></span> show global status where Variable_name in<span class="token punctuation">(</span><span class="token string">'com_insert'</span>,<span class="token string">'com_delete'</span>,<span class="token string">'com_update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>当数据库中myisam表比较多时，使用Questions计算比较准确。当数据库中innodb表比较多时，则以Com_*计算比较准确。磁盘ioIostat –xdm <span class="token number">1</span>Iops <span class="token operator">=</span> r/s + w/s 计算参考地址：<span class="token operator">&lt;</span>http://blog.jobbole.com/87989/<span class="token operator">></span><span class="token operator">&lt;</span>http://blog.jobbole.com/87450/<span class="token operator">></span><span class="token operator">&lt;</span>http://blog.163.com/ji_1006/blog/static/106123412013101421530142/<span class="token operator">></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 升级mysql5.1到5.6</title>
    <link href="/2015/06/05/2015-06-05-update-mysql/"/>
    <url>/2015/06/05/2015-06-05-update-mysql/</url>
    
    <content type="html"><![CDATA[<p>系统：CentOS release 6.5 <br><br>升级前mysql版本：5.1.73-log <br><br>升级后mysql版本：5.6.25 <br></p><h4 id="升级原因"><a href="#升级原因" class="headerlink" title="升级原因"></a>升级原因</h4><p>MySQL 5.1.x不支持四个字节的utf-8编码，只有5.5.x以后才支持</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /data/update_mysql备份my.cnf、/etc/init.d/mysqld备份整个数据库mysqldump -uroot -p -q --all-databases <span class="token operator">></span> alldatabases.sql备份数据目录<span class="token function">tar</span> -zxvf datadir.tar.gz /var/lib/mysql</code></pre><a id="more"></a><h4 id="停止mysql"><a href="#停止mysql" class="headerlink" title="停止mysql"></a>停止mysql</h4><pre class="language-bash" data-language="bash"><code class="language-bash">/etc/init.d/mysqld stop</code></pre><h4 id="升级mysql"><a href="#升级mysql" class="headerlink" title="升级mysql"></a>升级mysql</h4><pre class="language-bash" data-language="bash"><code class="language-bash">卸载原来的mysqlyum remove mysql mysql-*  查看是否有残余yum list installed <span class="token operator">|</span> <span class="token function">grep</span> mysql 如果有，清除yum remove mysql-libs安装mysqlmysql5.6的yum源http://dev.mysql.com/downloads/repo/yum/<span class="token function">rpm</span> -ivh http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpmyum <span class="token function">install</span> mysql mysql-community-server.x86_64修改my.cnf<span class="token assign-left variable">basedir</span><span class="token operator">=</span>/var/lib/mysql检查和更新数据表mysql_updatemysql_update 详情参见 <span class="token operator">&lt;</span>http://dev.mysql.com/doc/refman/5.6/en/mysql-upgrade.html<span class="token operator">></span></code></pre><h4 id="notes"><a href="#notes" class="headerlink" title="notes:"></a>notes:</h4><pre class="language-bash" data-language="bash"><code class="language-bash">* mysql备份导入时，报ERROR <span class="token number">1005</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span> at line <span class="token number">15607</span>: Can<span class="token string">'t create table '</span>dbname.tablename<span class="token string">' (errno: 150)解决方法：备份时，设置FOREIGN_KEY_CHECKS=0。 FOREIGN_KEY_CHECKS会影响表的删除和修改。* 修改sql_mode为空my.cnf添加sql_mode='</span>'常用sql_mode的值有空、ANSI、STRICT_TRANS_TABLES、TRANDITIONAL，后两种通常称为严格模式。严格模式在存储引擎不支持事务，可能造成数据不一致。比如两条语句，第一条ok，第二条可能执行不成功。具体参考：<span class="token operator">&lt;</span>https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html<span class="token operator">></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL笔记--初识PostgreSQL</title>
    <link href="/2015/06/04/2015-06-04-postgresql-stu-01/"/>
    <url>/2015/06/04/2015-06-04-postgresql-stu-01/</url>
    
    <content type="html"><![CDATA[<h4 id="PostgreSQL安装"><a href="#PostgreSQL安装" class="headerlink" title="PostgreSQL安装"></a>PostgreSQL安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash">./configure --prefix   安装路径--with-pgport<span class="token operator">=</span>NUMBER  设置默认端口（5432）--with-segsize<span class="token operator">=</span>SEGSIZE 段大小（单位gb）--with-blocksize<span class="token operator">=</span>BLOCKSIZW 块大小（单位kb）--with-wal-segsize<span class="token operator">=</span>SEGSIZE wal日志<span class="token punctuation">(</span>单位mb<span class="token punctuation">)</span>--with-wal-blocksize<span class="token operator">=</span>BLOCKSIZE wal日志块大小<span class="token punctuation">(</span>单位kb<span class="token punctuation">)</span>gmakegmake <span class="token function">install</span><span class="token function">useradd</span> postgresinitdb -D /opt/pgsql/data --locale<span class="token operator">=</span>C --encoding<span class="token operator">=</span>UTF8 初始化数据库or pg_ctl -D /opt/pgsql/data initdb使用D参数或设置环境变量PGDATApostgres -D /opt/pgsql/data <span class="token operator">></span> logfile <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>启动数据库or pg_ctl start -l logfile</code></pre><a id="more"></a><p>notes:<br><pre class="language-bash" data-language="bash"><code class="language-bash">./configure时报下面错误configure: error: readline library not found<span class="token function">apt-get</span> <span class="token function">install</span> libreadline-devconfigure: error: zlib library not found<span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev</code></pre></p><h4 id="PostgreSQL物理文件布局"><a href="#PostgreSQL物理文件布局" class="headerlink" title="PostgreSQL物理文件布局"></a>PostgreSQL物理文件布局</h4><p>psql<br>\h 帮助<br>修改pager，增加环境变量PAGER=less</p><pre class="language-bash" data-language="bash"><code class="language-bash">./psql --help-a <span class="token builtin class-name">echo</span> all input from script-f execute commands from file, <span class="token keyword">then</span> <span class="token builtin class-name">exit</span>-c run only single <span class="token builtin class-name">command</span> <span class="token punctuation">(</span>SQL or internal<span class="token punctuation">)</span> and <span class="token builtin class-name">exit</span>-A, --no-align           unaligned table output mode-F, --field-separator<span class="token operator">=</span>STRING-L filename  输出结果到文件-o filename  也可以试下-L的功能，但是输出简练写。</code></pre><p>./psql登录后<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span><span class="token operator">!</span> 执行终端command<span class="token punctuation">\</span>d               list tables, views, and sequences<span class="token punctuation">\</span>d NAME           describe table, view, sequence, or index<span class="token punctuation">\</span>conninfo  显示连接方式</code></pre></p><h4 id="data下的目录"><a href="#data下的目录" class="headerlink" title="data下的目录"></a>data下的目录</h4><p>PG_VERSION  版本<br>postmaster.opts 启动命令路径<br>postmaster.pid 文件<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">15497</span>  进程id/opt/pgsql/data 数据目录<span class="token number">1433075640</span>   时间戳<span class="token number">5432</span>  端口/tmp  socket存放位置localhost  监听地址  <span class="token number">5432001</span>   <span class="token number">1179651</span>  共享内存</code></pre></p><p>pg_hba.conf文件<br><pre class="language-bash" data-language="bash"><code class="language-bash">TYPE  DATABASE        <span class="token environment constant">USER</span>            ADDRESS                 METHOD<span class="token builtin class-name">local</span>   all             all                                     trustMETHOD字段认证方式    描述trust   无条件地允许连接，而不需要口令。reject  无条件地拒绝连接。常用于从一个组中”过滤”某些主机。md5 要求客户端提供一个 MD5 加密的口令进行认证。password    要求客户端提供一个未加密的口令进行认证。krb5    用 Kerberos V5 认证用户。只有在进行 TCP/IP 连接的时候才能用。ident   获取客户的操作系统名然后检查该用户是否允许以要求的数据库用户进行连接，方法是参照在 ident 关键字后面声明的映射。对于 TCP/IP 连接，用户的身份是通过与运行在客户端上的 ident 服务器连接进行判断的，对于本地连接，它是从操作系统获取的。ldap    使用 LDAP 进行认证。pam 使用操作系统提供的可插入认证模块服务<span class="token punctuation">(</span>PAM<span class="token punctuation">)</span>来认证。</code></pre></p><h4 id="base目录"><a href="#base目录" class="headerlink" title="base目录"></a>base目录</h4><p>默认表空间<br>select datname,oid from pg_database ;</p><h4 id="global目录"><a href="#global目录" class="headerlink" title="global目录"></a>global目录</h4><p>集群环境的表空间</p><h4 id="pg-clog"><a href="#pg-clog" class="headerlink" title="pg_clog"></a>pg_clog</h4><p>提交事务的状态数据</p><h4 id="pg-stat-tmp"><a href="#pg-stat-tmp" class="headerlink" title="pg_stat_tmp"></a>pg_stat_tmp</h4><p>统计信息</p><h4 id="pg-tblspc"><a href="#pg-tblspc" class="headerlink" title="pg_tblspc"></a>pg_tblspc</h4><p>新表空间的链接存放地址</p><h4 id="pg-xlog"><a href="#pg-xlog" class="headerlink" title="pg_xlog"></a>pg_xlog</h4><p>select pg_xlogfile_name(pg_current_xlog_localtion());<br>select pg_switch_xlog(); 切换日志</p><h4 id="pg-subtrans"><a href="#pg-subtrans" class="headerlink" title="pg_subtrans"></a>pg_subtrans</h4><p>包含子事务 </p><h4 id="pg-multixact"><a href="#pg-multixact" class="headerlink" title="pg_multixact"></a>pg_multixact</h4><p>包含多事务</p><h4 id="pg-twophase"><a href="#pg-twophase" class="headerlink" title="pg_twophase"></a>pg_twophase</h4><p>包含两节段事务</p><h4 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h4><p>数据库创建默认拷贝模板数据库template1，<br>templat0为更加纯净的模板数据库<br>select datname,datistemplate from pg_database;</p><h4 id="内存相关的参数设置"><a href="#内存相关的参数设置" class="headerlink" title="内存相关的参数设置"></a>内存相关的参数设置</h4><p>postgresql.conf<br>shared_buffers(integer)共享内存数量，设置为系统内存的25%<br>work_mem(integer)大小决定结果集是否拆分<br>maintence_work_mem(integer)制定维护性操作中使用的最大内存数</p><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><p>select to_timestamp(时间戳);<br>ipcs 查看共享内存<br>oid2name 命令查看oid</p>]]></content>
    
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker笔记</title>
    <link href="/2015/05/29/2015-05-29-docker-stu-notes/"/>
    <url>/2015/05/29/2015-05-29-docker-stu-notes/</url>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在Ubuntu 14.04.2 LTS安装docker<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker.io依赖安装aufs-tools cgroup-lite <span class="token function">git</span> git-man liberror-perl</code></pre><br>查看docker版本和系统信息<br><pre class="language-bash" data-language="bash"><code class="language-bash">docker versiondocker info</code></pre><br><a id="more"></a></p><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><p>docker 1.3后才支持docker exec命令。<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> apt-transport-https<span class="token function">apt-get</span> update<span class="token function">apt-get</span> -u -y upgrade lxc-docker 或者<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token function">curl</span> -sSL https://get.docker.com/ <span class="token operator">|</span> <span class="token function">sh</span></code></pre></p><h4 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h4><p>docker中,images镜像更像是一张光盘，container容器是安装好的系统。<br>images常用命令<br><pre class="language-bash" data-language="bash"><code class="language-bash">docker images 查看已有镜像docker search <span class="token string">"softname"</span> docker pull <span class="token string">"softname"</span><span class="token builtin class-name">:</span><span class="token string">"tags"</span> 默认lastest</code></pre></p><p>常见images镜像方法：</p><ol><li>编写Dockerfile文件</li><li>现有容器commit</li></ol><h4 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h4><pre class="language-bash" data-language="bash"><code class="language-bash">docker run -it ubuntu:14.04 /bin/bash-t 分配一个虚拟终端-i 获取当前输入--name 给容器命名-e 设置变量docker <span class="token builtin class-name">exec</span> -it <span class="token string">"IMAGE ID"</span> /bin/bash 进入容器docker <span class="token function">ps</span> -l 列出最近一次的容器docker <span class="token function">ps</span> -a 列出所有的容器docker <span class="token function">ps</span> 列出正在运行的容器docker inspect --format<span class="token operator">=</span><span class="token string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> <span class="token string">"IMAGE ID"</span> 获取容器ipdocker <span class="token function">rm</span> <span class="token variable"><span class="token variable">`</span>docker <span class="token function">ps</span> -qa<span class="token variable">`</span></span> 批量删除容器</code></pre><p>docker run 进入终端后，退出后容器关闭，docker exec退出后不关闭。exec命令在docker1.3后才支持，升级方法见上文。</p><h4 id="Dockerfile小实例"><a href="#Dockerfile小实例" class="headerlink" title="Dockerfile小实例"></a>Dockerfile小实例</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> sshd_ubuntu<span class="token builtin class-name">cd</span> sshd_ubuntu <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span>authorized_keys  Dockerfile  run.shauthorized_keys 将要登陆的公钥添加到此文件 run.sh文件,创建启动运行sshd脚本<span class="token comment">#!/bin/bash</span>/usr/sbin/sshd -DDockerfile 文件FROM ubuntu:14.04MAINTAINER ljdevops@gmail.comRUN <span class="token function">apt-get</span> update<span class="token comment">#install ssh server </span>RUN <span class="token function">apt-get</span> <span class="token function">install</span> -y openssh-serverRUN <span class="token function">mkdir</span> -p /var/run/sshdRUN <span class="token function">mkdir</span> -p /root/.sshADD authorized_keys /root/.ssh/authorized_keysADD run.sh /run.shRUN <span class="token function">chmod</span> <span class="token number">755</span> /run.shEXPOSE <span class="token number">22</span>CMD <span class="token punctuation">[</span><span class="token string">"/run.sh"</span><span class="token punctuation">]</span>docker build -t sshd:ubuntu <span class="token builtin class-name">.</span>docker images 查看创建的镜像</code></pre>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python小技巧</title>
    <link href="/2015/05/15/2015-05-15-python-help/"/>
    <url>/2015/05/15/2015-05-15-python-help/</url>
    
    <content type="html"><![CDATA[<p>dir查看对象的属性<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> dir<span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'DEBUG'</span>, <span class="token string">'DOTALL'</span>, <span class="token string">'I'</span>, <span class="token punctuation">..</span>.<span class="token string">'compile'</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">]</span></code></pre></p><p>help查看模块方法的使用<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span>help<span class="token punctuation">(</span><span class="token string">'compile'</span><span class="token punctuation">)</span></code></pre><br><a id="more"></a><br>命令行自动补全<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.pythonstartup <span class="token comment"># python startup file</span><span class="token function">import</span> readline<span class="token function">import</span> rlcompleter<span class="token function">import</span> atexit<span class="token function">import</span> os<span class="token comment"># tab completion</span>readline.parse_and_bind<span class="token punctuation">(</span><span class="token string">'tab: complete'</span><span class="token punctuation">)</span><span class="token comment"># history file</span>histfile <span class="token operator">=</span> os.path.join<span class="token punctuation">(</span>os.environ<span class="token punctuation">[</span><span class="token string">'HOME'</span><span class="token punctuation">]</span>, <span class="token string">'.pythonhistory'</span><span class="token punctuation">)</span>try:  readline.read_history_file<span class="token punctuation">(</span>histfile<span class="token punctuation">)</span>except IOError:    passatexit.register<span class="token punctuation">(</span>readline.write_history_file, histfile<span class="token punctuation">)</span>del os, histfile, readline, rlcompleter<span class="token function">vi</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONSTARTUP</span><span class="token operator">=</span>/root/.pythonstartup<span class="token builtin class-name">source</span> /etc/profile</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL MHA高可用方案</title>
    <link href="/2015/03/16/2015-03-16-mysql-ha-mha/"/>
    <url>/2015/03/16/2015-03-16-mysql-ha-mha/</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>mha是用perl写的一套MySql故障切换方案，保证数据库系统的高可用。支持在线切换，从当前运行master到新master只需很短时间（0.5-2s内），此时仅仅阻塞写操作，并不影响读操作。</p><h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><p>MHA要求一个复制集群中必须至少三台数据库</p><p>实验环境（RHEL release 5.9）</p><table><thead><tr><th>服务器</th><th>IP</th><th>备注</th></tr></thead><tbody><tr><td>主服务器</td><td>10.16.34.208</td><td></td></tr><tr><td>从服务器</td><td>10.16.34.201</td><td>主备份、管理节点</td></tr><tr><td>从服务器</td><td>10.16.34.194</td></tr></tbody></table><a id="more"></a><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><pre class="language-none"><code class="language-none">（略）</code></pre><h3 id="安装mha-node节点"><a href="#安装mha-node节点" class="headerlink" title="安装mha node节点"></a>安装mha node节点</h3><p>三台机器都安装mha node节点,所需安装包在packages文件夹中。<br><pre class="language-none"><code class="language-none">shell&gt; rpm -ivh  mha4mysql-node-0.56-0.el5.noarch.rpm</code></pre></p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><pre class="language-none"><code class="language-none">1、在master上授权 grant replication slave on _._ to &#39;repl&#39;@&#39;10.16.34.%&#39; identified by &#39;1234&#39;;flush privileges;查看权限show grants for &#39;repl&#39;@&#39;10.16.34.%&#39;;</code></pre><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><p>授权必须<em>.</em> ,luck.* 报错ERROR 1221 (HY000): Incorrect usage of DB GRANT and GLOBAL PRIVILEGES</p><p>2、修改my.cnf(三台同时修改)<br><pre class="language-none"><code class="language-none">binlog-do-db&#x3D;luckbinlog-ignore-db&#x3D;mysqlserver-id &#x3D; 1 从库自增show master status \G;File: mysql-bin.000004      Position: 107</code></pre></p><p>3、在slave上<br><pre class="language-none"><code class="language-none">change master to     master_host&#x3D;&#39;10.16.34.208&#39;,     master_user&#x3D;&#39;repl&#39;,     master_password&#x3D;&#39;1234&#39;,     master_log_file&#x3D;&#39;mysql-bin.000004&#39;,     master_log_pos&#x3D;107;start slave ;show slave status \G;如果Slave_IO_Running: YesSlave_SQL_Running: Yes说明主从ok</code></pre></p><h4 id="tips-1"><a href="#tips-1" class="headerlink" title="tips"></a>tips</h4><p>如果Slave_SQL_Running为NO，说明很可能是从库与主库的数据不一致。</p><h3 id="安装管理节点"><a href="#安装管理节点" class="headerlink" title="安装管理节点"></a>安装管理节点</h3><p>1、安装manager<br><pre class="language-none"><code class="language-none">shell&gt; rpm -ivh perl-DBD-MySQLshell&gt; rpm -ivh perl-Config-Tinyshell&gt; rpm -ivh perl-Log-Dispatchshell&gt; rpm -ivh perl-Parallel-ForkManagershell&gt; rpm -ivh mha4mysql-manager-0.56-0.el5.noarch.rpm</code></pre><br>2、修改/etc/masterha_app.cnf<br><pre class="language-none"><code class="language-none">[server default]user&#x3D;rootpassword&#x3D;12345678ssh_user&#x3D;rootmanager_workdir&#x3D;&#x2F;var&#x2F;log&#x2F;masterha&#x2F;applicationmanager_log&#x3D;&#x2F;var&#x2F;log&#x2F;masterha&#x2F;application&#x2F;app.logremote_workdir&#x3D;&#x2F;var&#x2F;log&#x2F;masterha&#x2F;applicationmaster_binlog_dir&#x3D;&#x2F;opt&#x2F;mysql-5.5.17&#x2F;data&#x2F; mysqlbinlog的日志目录check_repl_delay&#x3D;0[server_master]hostname&#x3D;10.16.34.208candidate_master&#x3D;1[server_slave1]hostname&#x3D;10.16.34.201candidate_master&#x3D;1[server_slave2]hostname&#x3D;10.16.34.194no_master&#x3D;13、设置从为只读set global read_only&#x3D;1;show variables like &#39;read_only&#39;;4、设置主机和其他从机位relay_log_purge：set global relay_log_purge&#x3D;0;show variables like &#39;relay_log_purge&#39;;</code></pre></p><h3 id="MHA常用命令"><a href="#MHA常用命令" class="headerlink" title="MHA常用命令"></a>MHA常用命令</h3><p>启动mha<br><pre class="language-none"><code class="language-none">masterha_manager --conf&#x3D;&#x2F;etc&#x2F;masterha_app.cnfnohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;masterha_app.cnf  &gt; &#x2F;var&#x2F;log&#x2F;masterha&#x2F;master.log 2&amp;1</code></pre><br>查看mha状态<br>masterha_check_ssh –conf=/etc/masterha_app.cnf<br><img src="https://cloud.githubusercontent.com/assets/5628396/6664313/830f3b30-cc09-11e4-9c78-44a14d49ecda.png" alt="check_ssh"></p><p>masterha_check_repl –conf=/etc/masterha_app.cnf<br><img src="https://cloud.githubusercontent.com/assets/5628396/6664319/9187ce8e-cc09-11e4-83e3-5b3696475c34.png" alt="check_repl"></p><p>masterha_check_status –conf=/etc/masterha_app.cnf<br><img src="https://cloud.githubusercontent.com/assets/5628396/6664324/9b866166-cc09-11e4-9294-ec90cf3560f5.png" alt="check_status"></p><p>masterha_app is stopped(2:NOT_RUNNING). #没有启动成功<br>masterha_app (pid:23141) is running(0:PING_OK), master:10.16.34.208 。 good nice!!!<br>停止mha<br><pre class="language-none"><code class="language-none">masterha_stop --conf&#x3D;&#x2F;etc&#x2F;masterha_app.cnf</code></pre></p><h4 id="tips-2"><a href="#tips-2" class="headerlink" title="tips"></a>tips</h4><p>1、rpm -ivh perl-DBD-MySQL-4.014-1.el5.rfx.x86_64.rpm<br><pre class="language-none"><code class="language-none">libmysqlclient.so.15()(64bit) is needed by perl-DBD-MySQL-4.022-1.el5.rfx.x86_64</code></pre><br>2、MySQL Replication Health is NOT OK!<br><pre class="language-none"><code class="language-none">grant all privileges  on _._ to &#39;root&#39;@&#39;10.16.34.201&#39; identified by &#39;12345678&#39;; 这样权限会有问题这样ok。grant all privileges  on _._ to *\* &#39;root&#39;@&#39;10.16.34.%&#39; *\* identified by &#39;12345678&#39;;flush privileges;查看权限select user,host,password from mysql.user;</code></pre><br>3、Can’t exec “mysqlbinlog”:没有那个文件或目录 at /usr/share/perl5/vendor_perl/MHA/BinlogManager.pm line 106.<br>mysqlbinlog version command failed with rc 1:0, please verify PATH, LD_LIBRARY_PATH, and client options<br>at /usr/bin/apply_diff_relay_logs line 493<br>处理办法：<br>在所有节点上执行<br><pre class="language-none"><code class="language-none">which mysqlbinlog;    --&#x2F;mysql&#x2F;bin&#x2F;mysqlbinlogln -s &#x2F;mysql&#x2F;bin&#x2F;mysqlbinlog &#x2F;usr&#x2F;bin&#x2F;mysqlbinlog</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL常用操作</title>
    <link href="/2014/08/27/2014-08-27-mysql-common-ops/"/>
    <url>/2014/08/27/2014-08-27-mysql-common-ops/</url>
    
    <content type="html"><![CDATA[<p>以下常用命令适用于MySQL 5.6</p><p>多表更新<br><pre class="language-none"><code class="language-none">UPDATE s_chat c,s_room rSET c.&#96;anchor_user_id&#96;&#x3D;r.&#96;user_id&#96;WHERE c.&#96;room_id&#96;&#x3D;r.&#96;room_id&#96;;</code></pre><br>显示表中列名称<br><pre class="language-none"><code class="language-none">show columns from mysql.user;</code></pre><br><a id="more"></a><br>查看存储过程<br><pre class="language-none"><code class="language-none">show procedure status; show create procedure prc_name;</code></pre><br>查看表分区信息<br><pre class="language-none"><code class="language-none">select TABLE_SCHEMA,TABLE_NAME,PARTITION_NAME from information_schema.PARTITIONS where TABLE_SCHEMA&#x3D;&#39;zabbix&#39; and TABLE_NAME&#x3D;&#39;history&#39;;</code></pre><br>查看数据库字符编码<br><pre class="language-none"><code class="language-none">status or \s;SHOW CREATE DATABASE db_name;SHOW VARIABLES LIKE &#39;%char%&#39;;</code></pre></p><p>查看数据表字符编码<br><pre class="language-none"><code class="language-none">SHOW CREATE TABLE table_name;SHOW FULL COLUMNS FROM table_name;</code></pre></p><p>创建数据库指定字符编码utf8<br><pre class="language-none"><code class="language-none">CREATE DATABASE &#39;db_name&#39; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre></p><p>修改数据库字符编码<br><pre class="language-none"><code class="language-none">ALTER DATABASE db_name DEFAULT CHARSET SET character_name [COLLATE...]</code></pre></p><p>修改表默认的字符集和所有字段<br><pre class="language-none"><code class="language-none">ALTER TABLE table_name CONVERT TO CHARACTER SET character_name [COLLATE...]</code></pre><br>修改表默认字符集<br><pre class="language-none"><code class="language-none">ALTER TABLE table_name DEFAULT CHARACTER SET character_name [COLLATE...]</code></pre><br>修改字段的字符集<br><pre class="language-none"><code class="language-none">ALTER TABLE table_name CHANGE columns_name CHARACTER SET character_name [COLLATE...]</code></pre></p><p>设置mysql字符编码<br><pre class="language-none"><code class="language-none">[client]default-character-set &#x3D; utf8[mysqld]character-set-server &#x3D; utf8collation-server &#x3D; utf8_general_ci</code></pre><br>客户端执行脚本or语句<br><pre class="language-none"><code class="language-none">SET NAMES utf8;等同于下面三条语句SET character_set_client &#x3D; utf8 用来设置客户端送给MySQL服务器的数据的 字符集SET character_set_results &#x3D; utf8 服务器返回查询结果时使用的字符集SET character_set_connection &#x3D; utf8</code></pre></p><p>mysql设置密码,不用登陆修改<br><pre class="language-none"><code class="language-none">mysqladmin -uroot -p[oldpasswd] password newpasswd</code></pre><br>登陆后修改<br><pre class="language-none"><code class="language-none">use mysql;UPDATE user set password&#x3D;PASSWORD(&quot;newpasswd&quot;) WHERE user&#x3D;&#39;root&#39;;flush privilges;</code></pre><br>丢失root密码后操作<br><pre class="language-none"><code class="language-none">停止mysql服务mysqld_safe --skip-grant-tables&amp;mysql -u root mysql  #指定登陆后直接进入mysql库UPDATE user set password&#x3D;PASSWORD(&quot;newpasswd&quot;) WHERE user&#x3D;&#39;root&#39;;flush privilges;</code></pre><br>mysql数据库备份与还原<br><pre class="language-none"><code class="language-none">备份：(--default-character-set&#x3D;utf8)mysqldump -u uname -p db_name &gt; &#x2F;opt&#x2F;db_name.sql还原：不用登陆还原mysql -u uname -p db_name &lt; db_name.sql登陆还原mysql -u uname -p source &#x2F;opt&#x2F;db_name.sql</code></pre><br>导出查询结果到文件<br><pre class="language-none"><code class="language-none">select ip from server_ip  INTO OUTFILE &#39;&#x2F;tmp&#x2F;ip_list.txt&#39;;</code></pre><br>mysql权限管理<br><pre class="language-none"><code class="language-none">查看用户权限select user,host,password from mysql.user;show grants; #显示当前用户权限show grants for user[username@host];授予用户权限grant all privileges on db_name.\* to &#39;username&#39;@&#39;%&#39; identified by &#39;passwd&#39;;# %代表所有机器回收用户权限revoke all privileges from db_name.\* to &#39;username&#39;@&#39;%&#39;;删除用户drop user ‘username&#39;@&#39;host&#39;;切记：刷新权限flush privileges;</code></pre></p><p>查看所有表占用的空间和行数<br><pre class="language-none"><code class="language-none">select table_name, (data_length+index_length)&#x2F;1024&#x2F;1024 as total_mb, table_rows from information_schema.tables where table_schema&#x3D;&#39;mha_test&#39;; </code></pre><br>QPS(每秒Query量)<br><pre class="language-none"><code class="language-none">基于Questions计算出QPS：mysql&gt; show global status like &#39;Questions&#39;;mysql&gt; show global status like &#39;Uptime&#39;;QPS &#x3D; Questions &#x2F; Uptime</code></pre><br>TPS(每秒事务量)<br><pre class="language-none"><code class="language-none">基于Com_commit和Com_rollback计算出TPS：mysql&gt; show global status like &#39;Com_commit&#39;;mysql&gt; show global status like &#39;Com_rollback&#39;;mysql&gt; show global status like &#39;Uptime&#39;;TPS &#x3D; (Com_commit + Com_rollback) &#x2F; Uptime</code></pre><br>基于Com_select、Com_insert、Com_delete、Com_update计算出QPS<br><pre class="language-none"><code class="language-none">mysql&gt; show global status where Variable_name in(&#39;com_select&#39;,&#39;com_insert&#39;,&#39;com_delete&#39;,&#39;com_update&#39;);等待1秒再执行，获取间隔差值，第二次每个变量值减去第一次对应的变量值，就是QPS计算TPS，就不算查询操作了，计算出插入、删除、更新四个值即可。mysql&gt; show global status where Variable_name in(&#39;com_insert&#39;,&#39;com_delete&#39;,&#39;com_update&#39;);当数据库中myisam表比较多时，使用Questions计算比较准确。当数据库中innodb表比较多时，则以Com_*计算比较准确。</code></pre><br>修改表的名称<br><pre class="language-none"><code class="language-none">RENAME TABLE tbl_name TO new_tbl_name</code></pre></p><p>DATETIME与TIMESTAMP的区别<br><pre class="language-none"><code class="language-none">1、 时间范围不同DATETIME 支持&#39;1000-01-01 00:00:00&#39; to &#39;9999-12-31 23:59:59&#39;.TIMESTAMP 支持&#39;1970-01-01 00:00:01&#39; UTC to &#39;2038-01-19 03:14:07&#39; UTC.2、TIMESTAMP可以有默认值，DATETIME没有3、更新表时，可以设置TIMESTAMP类型的列自动更新为当前时间date TIMESTAMP DEFAULT ON UPDATE CURRENT_TIMESTAMP</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用查看命令</title>
    <link href="/2014/08/15/2014-08-15-linux-common-info/"/>
    <url>/2014/08/15/2014-08-15-linux-common-info/</url>
    
    <content type="html"><![CDATA[<h4 id="查看外网ip"><a href="#查看外网ip" class="headerlink" title="查看外网ip"></a>查看外网ip</h4><pre class="language-none"><code class="language-none">curl ifconfig.mecurl ifconfig.shcurl ifconfig.co</code></pre><h4 id="查看编译参数"><a href="#查看编译参数" class="headerlink" title="查看编译参数"></a>查看编译参数</h4><p>1、nginx编译参数<br><pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -V</code></pre><br>2、apache编译参数<br><pre class="language-none"><code class="language-none">cat &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;build&#x2F;config.nice</code></pre><br><a id="more"></a><br>3、php编译参数<br><pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php -i |grep config&#x2F;usr&#x2F;local&#x2F;php&#x2F;sbin&#x2F;php-config |grep config</code></pre><br>4、mysql编译参数<br><pre class="language-none"><code class="language-none">cat &quot;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqlbug&quot; |grep configure</code></pre></p><h4 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h4><p>1、查看linux版本、系统信息<br><pre class="language-none"><code class="language-none">uname -acat &#x2F;proc&#x2F;versioncat &#x2F;etc&#x2F;issuecat &#x2F;etc&#x2F;redhat-release</code></pre><br>2、apache版本<br><pre class="language-none"><code class="language-none">httpd -v</code></pre><br>3、php版本<br><pre class="language-none"><code class="language-none">php -v</code></pre><br>4、mysql版本<br><pre class="language-none"><code class="language-none">mysql -Vmysql --help |grep Distrib</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2014/08/14/2014-08-14-git-notes/"/>
    <url>/2014/08/14/2014-08-14-git-notes/</url>
    
    <content type="html"><![CDATA[<h3 id="账户公钥与项目公钥区别"><a href="#账户公钥与项目公钥区别" class="headerlink" title="账户公钥与项目公钥区别"></a>账户公钥与项目公钥区别</h3><p>账户设置的 SSH 公钥是用来认证用户身份的，而项目部署公钥是用来授权项目的只读权限的。<br>账户 SSH 公钥是跟用户账户关联的公钥，一旦设置，就拥有账户下所有项目仓库的读写权限。<br>项目部署 SSH 公钥是跟项目关联的公钥，设置后有该项目的仓库的只读权限。</p><p>账户公钥相当于设置管理员权限一样，你可以clone、pull、[push]<br>项目公钥，为了安全起见只允许，clone和pull</p><h4 id="git添加空目录"><a href="#git添加空目录" class="headerlink" title="git添加空目录"></a>git添加空目录</h4><p>空目录empty中添加 .gitignore 文件<br><a id="more"></a></p><h4 id="远程操作常用命令"><a href="#远程操作常用命令" class="headerlink" title="远程操作常用命令"></a>远程操作常用命令</h4><pre class="language-none"><code class="language-none">1、检出仓库$git clone git:&#x2F;&#x2F;github.com&#x2F;xx.git可以使用git:&#x2F;&#x2F; 、http:&#x2F;&#x2F;协议只有clone时会拉起tag2、查看远程仓库$git remote -v3、添加远程仓库$git remote add [name] [url]4、删除远程仓库$git remote rm [name]5、修改远程仓库$git remote set-url --push [name] [newUrl]6、拉取远程仓库$git pull [remoteName] [localBranchName]7、推送远程仓库$git push [remoteName] [localBranchName]8、提交本地test分支作为远程的master$git push origin test:master9、提交本地test分支作为远程的test$git push origin test:test</code></pre><h4 id="分支操作常用命令"><a href="#分支操作常用命令" class="headerlink" title="分支操作常用命令"></a>分支操作常用命令</h4><pre class="language-none"><code class="language-none">1、查看本地分支$git branch2、创建本地分支$git branch [branchName]3、创建本地分支并切换到新分支$git checkout -b [branchName]4、拉取远程分支$git checkout -b [newBranch] [remoteName&#x2F;branchName]5、删除分支$git branch -d [branchName]6、合并分支$git merge name7、本地分支推送到远程$git push origin [branchName]8、删除远程分支$git push origin :refs&#x2F;heads&#x2F;name</code></pre><h4 id="git回滚操作"><a href="#git回滚操作" class="headerlink" title="git回滚操作"></a>git回滚操作</h4><pre class="language-none"><code class="language-none">1、git reset --hard 回滚到上一次</code></pre><h4 id="tag操作常用命令"><a href="#tag操作常用命令" class="headerlink" title="tag操作常用命令"></a>tag操作常用命令</h4><pre class="language-none"><code class="language-none">1、创建带注释的tag$git tag -a [name] -m &quot;yourMessage&quot;2、删除本地tag$git tag -d [name]3、本地tag推送到远程$git push origin [name]4、删除远程tag版本$git push origin :refs&#x2F;tags&#x2F;[name]（推送一个空标签覆盖远程标签）$git push origin --delete tag tag_name$git push origin [tag_name] --delete5、合并远程仓库的tag到本地$git pull origin --tags6、推送本地所有tag到远程仓库$git push origin --tags7、查看tag信息$git show tag_name</code></pre><h4 id="git打包发布"><a href="#git打包发布" class="headerlink" title="git打包发布"></a>git打包发布</h4><pre class="language-none"><code class="language-none">$git archive --format&#x3D;tar.gz --prefix&#x3D;xxx-v0.0.x&#x2F; -o &#x2F;opt&#x2F;smwh&#x2F;xxx-v0.0.x.tar.gz v0.0.xv0.0.x指定打包那个标签的内容</code></pre><h4 id="links"><a href="#links" class="headerlink" title="links:"></a>links:</h4><p><a href="http://rogerdudler.github.io/git-guide/index.zh.html">http://rogerdudler.github.io/git-guide/index.zh.html</a><br><a href="http://git-scm.com/book/zh">http://git-scm.com/book/zh</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
